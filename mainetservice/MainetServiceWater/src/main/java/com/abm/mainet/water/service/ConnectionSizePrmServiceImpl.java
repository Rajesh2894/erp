/*
 * Created on 20 May 2016 ( Time 13:13:24 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.water.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.audit.service.AuditService;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.water.domain.ConnectionSizeHistEntity;
import com.abm.mainet.water.domain.ConnectionSizePrmEntity;
import com.abm.mainet.water.dto.TbCcnsizePrm;
import com.abm.mainet.water.mapper.TbCcnsizePrmServiceMapper;
import com.abm.mainet.water.repository.ConnectionSizePrmJpaRepository;

/**
 * Implementation of TbCcnsizePrmService
 */
@Component
@Transactional
public class ConnectionSizePrmServiceImpl implements ConnectionSizePrmService {

    @Resource
    private ConnectionSizePrmJpaRepository tbCcnsizePrmJpaRepository;

    @Resource
    private TbCcnsizePrmServiceMapper tbCcnsizePrmServiceMapper;

    @Resource
    private AuditService auditService;

    @Override
    @Transactional(readOnly = true)
    public TbCcnsizePrm findById(final Long cnsId) {
        final ConnectionSizePrmEntity ConnectionSizePrmEntity = tbCcnsizePrmJpaRepository.findOne(cnsId);
        return tbCcnsizePrmServiceMapper.mapTbCcnsizePrmEntityToTbCcnsizePrm(ConnectionSizePrmEntity);
    }

    @Override
    @Transactional(readOnly = true)
    public List<TbCcnsizePrm> findAll() {
        final Iterable<ConnectionSizePrmEntity> entities = tbCcnsizePrmJpaRepository.findAll();
        final List<TbCcnsizePrm> beans = new ArrayList<>();
        for (final ConnectionSizePrmEntity ConnectionSizePrmEntity : entities) {
            beans.add(tbCcnsizePrmServiceMapper.mapTbCcnsizePrmEntityToTbCcnsizePrm(ConnectionSizePrmEntity));
        }
        return beans;
    }

    @Override
    public TbCcnsizePrm create(final TbCcnsizePrm tbCcnsizePrm, final Long orgId, final int langId, final Long empId) {
        ConnectionSizePrmEntity ConnectionSizePrmEntity = null;
        if (tbCcnsizePrm.getCnsId() != null) {
            ConnectionSizePrmEntity = tbCcnsizePrmJpaRepository.findOne(tbCcnsizePrm.getCnsId());
        }
        if (ConnectionSizePrmEntity != null) {
            throw new IllegalStateException("already.exists");
        }
        ConnectionSizePrmEntity = new ConnectionSizePrmEntity();
        tbCcnsizePrmServiceMapper.mapTbCcnsizePrmToTbCcnsizePrmEntity(tbCcnsizePrm, ConnectionSizePrmEntity);
        setCommonFiledsInEntity(orgId, langId, empId, ConnectionSizePrmEntity);
        final ConnectionSizePrmEntity tbCcnsizePrmEntitySaved = tbCcnsizePrmJpaRepository.save(ConnectionSizePrmEntity);
        // AUDIT CODE START
        if (tbCcnsizePrmEntitySaved != null) {
            final ConnectionSizeHistEntity connectionSizeHistory = new ConnectionSizeHistEntity();
            connectionSizeHistory.setHStatus(MainetConstants.MENU.A);
            auditService.createHistory(tbCcnsizePrmEntitySaved, connectionSizeHistory);
        }
        // AUDIT CODE END
        return tbCcnsizePrmServiceMapper.mapTbCcnsizePrmEntityToTbCcnsizePrm(tbCcnsizePrmEntitySaved);
    }

    /**
     * @param orgId
     * @param langId
     * @param empId
     * @param ConnectionSizePrmEntity
     */
    private void setCommonFiledsInEntity(final Long orgId, final int langId, final Long empId,
            final ConnectionSizePrmEntity ConnectionSizePrmEntity) {
        ConnectionSizePrmEntity.setLmoddate(new Date());
        ConnectionSizePrmEntity.setUserId(empId);
        ConnectionSizePrmEntity.setOrgid(orgId);
        ConnectionSizePrmEntity.setLangId(Long.valueOf(langId));
    }

    @Override
    public TbCcnsizePrm update(final TbCcnsizePrm tbCcnsizePrm, final Long orgId, final int langId, final Long empId) {
        final ConnectionSizePrmEntity ConnectionSizePrmEntity = tbCcnsizePrmJpaRepository.findOne(tbCcnsizePrm.getCnsId());
        tbCcnsizePrmServiceMapper.mapTbCcnsizePrmToTbCcnsizePrmEntity(tbCcnsizePrm, ConnectionSizePrmEntity);
        setCommonFiledsInEntity(orgId, langId, empId, ConnectionSizePrmEntity);
        final ConnectionSizePrmEntity tbCcnsizePrmEntitySaved = tbCcnsizePrmJpaRepository.save(ConnectionSizePrmEntity);
        return tbCcnsizePrmServiceMapper.mapTbCcnsizePrmEntityToTbCcnsizePrm(tbCcnsizePrmEntitySaved);
    }

    @Override
    public void delete(final Long cnsId) {
        tbCcnsizePrmJpaRepository.delete(cnsId);
    }

    public ConnectionSizePrmJpaRepository getTbCcnsizePrmJpaRepository() {
        return tbCcnsizePrmJpaRepository;
    }

    public void setTbCcnsizePrmJpaRepository(final ConnectionSizePrmJpaRepository tbCcnsizePrmJpaRepository) {
        this.tbCcnsizePrmJpaRepository = tbCcnsizePrmJpaRepository;
    }

    public TbCcnsizePrmServiceMapper getTbCcnsizePrmServiceMapper() {
        return tbCcnsizePrmServiceMapper;
    }

    public void setTbCcnsizePrmServiceMapper(final TbCcnsizePrmServiceMapper tbCcnsizePrmServiceMapper) {
        this.tbCcnsizePrmServiceMapper = tbCcnsizePrmServiceMapper;
    }
}
