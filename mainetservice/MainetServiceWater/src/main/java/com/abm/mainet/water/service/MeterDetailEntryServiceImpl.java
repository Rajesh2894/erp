/*
 * Created on 11 May 2016 ( Time 11:16:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.water.service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.domain.TbCfcApplicationMstEntity;
import com.abm.mainet.common.domain.TbWorkOrderEntity;
import com.abm.mainet.common.master.service.DepartmentService;
import com.abm.mainet.common.service.ICFCApplicationMasterService;
import com.abm.mainet.common.service.ServiceMasterService;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.Utility;
import com.abm.mainet.water.dao.MeterDetailEntryJpaRepository;
import com.abm.mainet.water.domain.ChangeOfUsage;
import com.abm.mainet.water.domain.TbKCsmrInfoMH;
import com.abm.mainet.water.domain.TbMeterMasEntity;
import com.abm.mainet.water.dto.MeterDetailsEntryDTO;

@Service
public class MeterDetailEntryServiceImpl implements MeterDetailEntryService {

    private static final String ACTIVE = MainetConstants.STATUS.ACTIVE;

    @Resource
    private MeterDetailEntryJpaRepository meterDetailEntryJpaRepository;

    @Autowired
    private ICFCApplicationMasterService icfcApplicationMasterService;

    @Autowired
    ICFCApplicationMasterService cfcService;
    
    @Autowired
    DepartmentService departmentService;

    @Autowired
    ServiceMasterService serviceMaster;
    
    @Autowired
	private ChangeOfUsageService changeOfUsageService;
    
    @Override
    @Transactional(readOnly = true)
    public MeterDetailsEntryDTO getApplicantDetailForMeterDet(final Long appId, final Long orgId) {
        final TbCfcApplicationMstEntity appMasEntity = icfcApplicationMasterService.getCFCApplicationByApplicationId(appId,
                orgId);
        final Long meter = CommonMasterUtility.getValueFromPrefixLookUp(MainetConstants.NewWaterServiceConstants.METER,
                MainetConstants.NewWaterServiceConstants.WMN).getLookUpId();
        final TbKCsmrInfoMH csmrInfo = meterDetailEntryJpaRepository.getConnectionIdFromCsmrInfoUsingAppId(appId, orgId, meter);
        final MeterDetailsEntryDTO entity = new MeterDetailsEntryDTO();
        entity.setServiceName(appMasEntity.getTbServicesMst().getSmServiceName());
        entity.setApplicantName(appMasEntity.getApmFname());
        entity.setApplicationNumber(appMasEntity.getApmApplicationId());
        entity.setApplicationDate(appMasEntity.getApmApplicationDate());
        entity.setPcDate(csmrInfo.getPcDate());
        Organisation org = new Organisation();
    	org.setOrgid(orgId);
        if(Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_SKDCL)) {
        	 List<TbMeterMasEntity> meterMasEntities = meterDetailEntryJpaRepository.getMeterMasEntities(csmrInfo.getCsIdn(), orgId);
             if(CollectionUtils.isNotEmpty(meterMasEntities)) {
             	TbMeterMasEntity tbMeterMasEntity = meterMasEntities.get(0);
             	entity.setMeterInstallationDate(tbMeterMasEntity.getMmInstallDate());
             	if(tbMeterMasEntity.getMmMtrcost()!=null) {
                 	entity.setMeterCost(tbMeterMasEntity.getMmMtrcost().doubleValue());
             	}
             	if(tbMeterMasEntity.getMmInitialReading()!=null && !tbMeterMasEntity.getMmInitialReading().isEmpty()) {
                 	entity.setInitialMeterReading(Long.valueOf(tbMeterMasEntity.getMmInitialReading()));
             	}
             	entity.setMeterMake(tbMeterMasEntity.getMmMtrmake()!=null && !tbMeterMasEntity.getMmMtrmake().isEmpty() ?
             			tbMeterMasEntity.getMmMtrmake() : "");
             	entity.setMeterMaxReading(tbMeterMasEntity.getMaxMeterRead()!=null? tbMeterMasEntity.getMaxMeterRead().longValue():null);
             	entity.setMeterOwnerShip(tbMeterMasEntity.getMmOwnership());
             	entity.setMeterNumber(tbMeterMasEntity.getMmMtrno());
             }
        }
       
        return entity;
    }

    @Override
    @Transactional
    public boolean saveFormData(final MeterDetailsEntryDTO dto) {
    	Organisation org = new Organisation();
    	org.setOrgid(dto.getOrgId());
        final TbMeterMasEntity queryEntity = fetchDetailsFromDtoToMeterMasEntity(dto);
        if(Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_SKDCL)) {
        	boolean result = meterDetailEntryJpaRepository.saveOrUpdateData(queryEntity);
        	if(!result) {
        		return meterDetailEntryJpaRepository.updateFormData(queryEntity);
        	}
        	return result;
        }else { 
        	return meterDetailEntryJpaRepository.updateFormData(queryEntity);
        }
    }

    @Transactional(readOnly = true)
    private TbMeterMasEntity fetchDetailsFromDtoToMeterMasEntity(final MeterDetailsEntryDTO dto) {
        final TbMeterMasEntity queryEntity = new TbMeterMasEntity();
        final Long meter = CommonMasterUtility.getValueFromPrefixLookUp(MainetConstants.NewWaterServiceConstants.METER,
                MainetConstants.NewWaterServiceConstants.WMN).getLookUpId();
        final TbKCsmrInfoMH csmrInfo = meterDetailEntryJpaRepository
                .getConnectionIdFromCsmrInfoUsingAppId(dto.getApplicationNumber(), dto.getOrgId(), meter);
        queryEntity.setTbCsmrInfo(csmrInfo);
        queryEntity.setMmMtrno(dto.getMeterNumber());
        queryEntity.setMmMtrmake(dto.getMeterMake());
        queryEntity.setMmOwnership(dto.getMeterOwnerShip());
        if (dto.getMeterCost() != null) {
            queryEntity.setMmMtrcost(BigDecimal.valueOf(dto.getMeterCost()));
        }
        queryEntity.setMmStatus(ACTIVE);
        queryEntity.setOrgid(dto.getOrgId());
        queryEntity.setUserId(dto.getUserId());
        queryEntity.setLangId(dto.getLangId());
        queryEntity.setLmoddate(new Date());
        queryEntity.setUpdatedDate(new Date());
        queryEntity.setMmInitialReading(dto.getInitialMeterReading().toString());
        queryEntity.setMaxMeterRead(BigDecimal.valueOf(dto.getMeterMaxReading()));
        queryEntity.setMmInstallDate(dto.getMeterInstallationDate());
        return queryEntity;
    }

    @Override
    @Transactional(readOnly = true)
    public List<MeterDetailsEntryDTO> getApplicantDetailsForMeter(final long orgid) {
    	
        final List<TbWorkOrderEntity> queryEntity = meterDetailEntryJpaRepository
                .queryDataFromWorkOrderTab(BigDecimal.valueOf(orgid));
        final List<MeterDetailsEntryDTO> listOfDto = new ArrayList<>();
        MeterDetailsEntryDTO entity = null;
        Organisation org = new Organisation();
        org.setOrgid(orgid);

        final Long meter = CommonMasterUtility.getValueFromPrefixLookUp(MainetConstants.NewWaterServiceConstants.METER,
                MainetConstants.NewWaterServiceConstants.WMN).getLookUpId();
        if(Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_SKDCL)){
        	
        	List<ChangeOfUsage> changedUsageDetails = changeOfUsageService.getChangedUsageDetails(orgid, MainetConstants.Y_FLAG);
        	if(CollectionUtils.isNotEmpty(changedUsageDetails)) {
        		for(ChangeOfUsage user : changedUsageDetails) {
        			TbKCsmrInfoMH csmrInfo = meterDetailEntryJpaRepository.getConnectionIdFromCsmrInfoUsingAppId(
                            Long.valueOf(user.getApmApplicationId()), orgid, meter);
        			 final TbCfcApplicationMstEntity appMasEntity = icfcApplicationMasterService
        	                    .getCFCApplicationByApplicationId(user.getApmApplicationId(), orgid);


        			 if (csmrInfo != null) {
        	                final boolean flag = meterDetailEntryJpaRepository.getMeterMasEntity(csmrInfo.getCsIdn(), orgid);
        	               
    		                entity = new MeterDetailsEntryDTO();
    		                
    		                ServiceMaster serviceByShortName = serviceMaster.getServiceByShortName(MainetConstants.WaterServiceShortCode.CHANGE_OF_USAGE, orgid);
    		                entity.setServiceName(serviceByShortName.getSmServiceName());
    		                entity.setApplicantName(appMasEntity.getApmFname());
    		                entity.setApplicationNumber(appMasEntity.getApmApplicationId());
    		                entity.setApplicationDate(appMasEntity.getApmApplicationDate());
    		                if (csmrInfo.getCsCcn() != null) {
    		                    entity.setCsIdn(csmrInfo.getCsIdn());
    		                }
    		                listOfDto.add(entity);
        	            }
        		}
        	}
        }
        
        for (final TbWorkOrderEntity workOrderEntity : queryEntity) {
            final TbCfcApplicationMstEntity appMasEntity = icfcApplicationMasterService
                    .getCFCApplicationByApplicationId(Long.valueOf(workOrderEntity.getWoApplicationId().toString()), orgid);


            final TbKCsmrInfoMH waterEntity = meterDetailEntryJpaRepository.getConnectionIdFromCsmrInfoUsingAppId(
                    Long.valueOf(workOrderEntity.getWoApplicationId().toString()), orgid, meter);
            if (waterEntity != null) {
                final boolean flag = meterDetailEntryJpaRepository.getMeterMasEntity(waterEntity.getCsIdn(), orgid);
               
	             if (!flag) {
	                entity = new MeterDetailsEntryDTO();
	                entity.setServiceName(appMasEntity.getTbServicesMst().getSmServiceName());
	                entity.setApplicantName(appMasEntity.getApmFname());
	                entity.setApplicationNumber(appMasEntity.getApmApplicationId());
	                entity.setApplicationDate(appMasEntity.getApmApplicationDate());
	                if (waterEntity.getCsCcn() != null) {
	                    entity.setCsIdn(waterEntity.getCsIdn());
	                }
	                listOfDto.add(entity);
	            }
            }
        }
        return listOfDto;
    }

    @Override
    @Transactional
    public void saveMeterDataEntryFormData(MeterDetailsEntryDTO dto, TbKCsmrInfoMH master) {
        final TbMeterMasEntity queryEntity = new TbMeterMasEntity();
        queryEntity.setTbCsmrInfo(master);
        queryEntity.setMmMtrno(dto.getMeterNumber());
        queryEntity.setMmMtrmake(dto.getMeterMake());
        queryEntity.setMmOwnership(dto.getMeterOwnerShip());
        if (dto.getMeterCost() != null) {
            queryEntity.setMmMtrcost(BigDecimal.valueOf(dto.getMeterCost()));
        }
        queryEntity.setMmStatus(ACTIVE);
        queryEntity.setOrgid(dto.getOrgId());
        queryEntity.setUserId(dto.getUserId());
        queryEntity.setLangId(dto.getLangId());
        queryEntity.setLmoddate(new Date());
        queryEntity.setUpdatedDate(new Date());
        queryEntity.setMmInitialReading(dto.getInitialMeterReading().toString());
        queryEntity.setMaxMeterRead(BigDecimal.valueOf(dto.getMeterMaxReading()));
        queryEntity.setMmInstallDate(dto.getMeterInstallationDate());
        meterDetailEntryJpaRepository.updateFormData(queryEntity);
    }

}