/*
 * Created on 30 Apr 2016 ( Time 15:02:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.water.ui.controller;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.collections.CollectionUtils;
import org.jfree.util.Log;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.abm.mainet.cfc.loi.dto.TbLoiMas;
import com.abm.mainet.cfc.loi.service.TbLoiMasService;
import com.abm.mainet.cfc.scrutiny.ui.controller.ApplicationAuthorizationController;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.constant.ServiceEndpoints;
import com.abm.mainet.common.domain.CFCApplicationAddressEntity;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.TbCfcApplicationMstEntity;
import com.abm.mainet.common.dto.TbApprejMas;
import com.abm.mainet.common.dto.TbWorkOrder;
import com.abm.mainet.common.dto.TbWorkOrderDetail;
import com.abm.mainet.common.dto.WorkOrderGridEntityList;
import com.abm.mainet.common.dto.WorkOrderGridResponse;
import com.abm.mainet.common.exception.FrameworkException;
import com.abm.mainet.common.integration.dms.service.IFileUploadService;
import com.abm.mainet.common.master.dto.TbServicesMst;
import com.abm.mainet.common.master.service.DepartmentService;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.master.service.TbServicesMstService;
import com.abm.mainet.common.service.CommonService;
import com.abm.mainet.common.service.ICFCApplicationAddressService;
import com.abm.mainet.common.service.ICFCApplicationMasterService;
import com.abm.mainet.common.service.ServiceMasterService;
import com.abm.mainet.common.service.TbApprejMasService;
import com.abm.mainet.common.service.TbChargeMasterService;
import com.abm.mainet.common.service.TbWorkOrderService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;
import com.abm.mainet.water.dao.NewWaterRepository;
import com.abm.mainet.water.domain.PlumberMaster;
import com.abm.mainet.water.domain.TbKCsmrInfoMH;
import com.abm.mainet.water.dto.TbCsmrInfoDTO;
import com.abm.mainet.water.service.NewWaterConnectionService;
import com.abm.mainet.water.service.PhysicalDateEntryService;
import com.abm.mainet.water.service.WaterCommonService;

/**
 * Spring MVC controller for 'TbWorkOrder' management.
 */
@Controller
/* @RequestMapping("/WorkOrder.html") */
@RequestMapping(value = { "/WaterWorkOrderPrinting.html" })
public class TbWorkOrderController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "tbWorkOrder";
	private static final String MAIN_LIST_NAME = "list";
	private static final String MAIN_LIST_PRIFEX_WPC = "listpofPrifexWPC";
	private static final String MAIN_PRIFEX_WPC = "WOR";
	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM = "tbWaterWorkOrder/form";
	private static final String JSP_LIST = "tbWaterWorkOrder/list";
	private static final String JSP_GRID = "tbWaterWorkOrder/grid";
	private static final String JSP_GRID_PRINT = "tbWaterWorkOrder/gridPrint";
	// --- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE = "/tbWorkOrder/create";
	private static final String SAVE_ACTION_UPDATE = "/tbWorkOrder/update";

	private static final String REDIRECT = "redirect:/";
	private static final String REQUEST_PARAM = "?generatWorkOrderAbstract";
	private static final String ERROR_MESSAGE = "Error Occurred while request processing for Application Authorization for Application No.=";
	private static final String SERVICE_URL_NOT_CONFIGURED = "Service action Url is not configured in Service Master against serviceId=";
	private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationAuthorizationController.class);

	@Resource
	private CommonService commonService;

	// --- Main entity service 
	@Autowired
	private TbWorkOrderService tbWorkOrderService; // Injected by Spring
	// --- Other service(s)

	@Resource
	private TbServicesMstService tbServicesMstService;
	// --- Main entity service
	@Resource
	private TbApprejMasService tbApprejMasService; // Injected by Spring

	@Resource
	private TbDepartmentService tbDepartmentService;

	@Resource
	private ICFCApplicationMasterService icfcApplicationMasterService;

	@Resource
	private NewWaterConnectionService newWaterConnectionService;

	@Autowired

	private ICFCApplicationAddressService iCFCApplicationAddressService;

	@Autowired
	private TbChargeMasterService tbChargeMasterService;

	@Autowired
	private TbApprejMasService tbApprejMasServiceImpl;

	@Autowired
	private WaterCommonService waterCommonService;
	
	@Autowired
	private ServiceMasterService serviceMaster;
	
	@Autowired
    private IFileUploadService fileUpload;
	
	@Autowired
    private DepartmentService departmentService;
	
	@Autowired
	private TbLoiMasService loiMasService;
	
	@Autowired
	private PhysicalDateEntryService physicalDateEntryService;
	
	@Autowired
    private NewWaterRepository waterRepository;

	private List<TbServicesMst> serviceMasList = Collections.emptyList();
	private List<TbServicesMst> serviceList = new ArrayList<>();
	private List<TbApprejMas> apprejMasList = new ArrayList<>();
	private List<WorkOrderGridEntityList> workodergenraitonList = new ArrayList<>();

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public TbWorkOrderController() {
		super(TbWorkOrderController.class, MAIN_ENTITY_NAME);
		log("TbWorkOrderController created.");
	}

	// --------------------------------------------------------------------------------------
	// Spring MVC model management
	// --------------------------------------------------------------------------------------

	/**
	 * Populates the Spring MVC model with the given entity and eventually other
	 * useful data
	 * 
	 * @param model
	 * @param tbWorkOrder
	 */
	private void populateModel(final Model model, final TbWorkOrder tbWorkOrder, final FormMode formMode) {
		// --- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrder);
		if (formMode == FormMode.CREATE) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
			// --- Other data useful in this screen in "create" mode (all fields)
		} else if (formMode == FormMode.UPDATE) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
			// --- Other data useful in this screen in "update" mode (only non-pk fields)
		}
	}

	// --------------------------------------------------------------------------------------
	// Request mapping
	// --------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of TbWorkOrder found in the database
	 * 
	 * @param model
	 *            Spring MVC model
	 * @return
	 */
	@RequestMapping(params = "showDetails", method = { RequestMethod.POST, RequestMethod.GET })
	public String workorder(@RequestParam("appNo") final long applicationId,
			@RequestParam("actualTaskId") final Long actualTaskId, final HttpServletRequest httpServletRequest,
			final Model model) {
		final TbWorkOrder tbWorkOrder = new TbWorkOrder();
		String actionURL = null;
		try {
			final List<String> paramList = commonService.findServiceActionUrl(applicationId,
					UserSession.getCurrent().getOrganisation().getOrgid());

			UserSession.getCurrent().getScrutinyCommonParamMap().put(
					MainetConstants.SCRUTINY_COMMON_PARAM.APM_APPLICATION_ID, applicationId + MainetConstants.BLANK);
			UserSession.getCurrent().getScrutinyCommonParamMap().put(MainetConstants.SCRUTINY_COMMON_PARAM.CFC_URL,
					paramList.get(MainetConstants.INDEX.ZERO));
			UserSession.getCurrent().getScrutinyCommonParamMap()
					.put(MainetConstants.SCRUTINY_COMMON_PARAM.SM_SERVICE_ID, paramList.get(MainetConstants.INDEX.ONE));
			UserSession.getCurrent().getScrutinyCommonParamMap().put(MainetConstants.SCRUTINY_COMMON_PARAM.TASK_ID,
					actualTaskId.toString());
			if ((paramList.get(MainetConstants.INDEX.ZERO) == null)
					|| paramList.get(MainetConstants.INDEX.ZERO).toString().isEmpty()) {
				throw new FrameworkException(SERVICE_URL_NOT_CONFIGURED + paramList.get(MainetConstants.INDEX.ONE));
			} else {
				actionURL = REDIRECT + paramList.get(MainetConstants.INDEX.ZERO).toString() + REQUEST_PARAM;
				return new String(actionURL);
			}

		} catch (final Exception ex) {
			LOGGER.error(ERROR_MESSAGE + applicationId, ex);
		}
		model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrder);
		return JSP_LIST;

	}

	@RequestMapping(params = "generatWorkOrder", method = { RequestMethod.POST, RequestMethod.GET })
	public String generatWorkOrder(final HttpServletRequest httpServletRequest, final Model model) {
		long conncetionNo = 0;
		Long PlumberID = null;
		Long taskId = null;
		final long applicationId = Long.parseLong(httpServletRequest.getSession()
				.getAttribute(MainetConstants.REQUIRED_PG_PARAM.APPLICATION_NO).toString());
		if (!httpServletRequest.getSession().getAttribute("conncetionNo").equals("null")) {
			conncetionNo = Long.parseLong(httpServletRequest.getSession().getAttribute("conncetionNo").toString());
		}
		final long serviceId = Long.parseLong(httpServletRequest.getSession().getAttribute("serviceId").toString());
		if (!httpServletRequest.getSession().getAttribute("PlumberID").equals("null")) {
			PlumberID = Long.parseLong(httpServletRequest.getSession().getAttribute("PlumberID").toString());
		}
		if (!httpServletRequest.getSession().getAttribute("taskId").equals("null")) {
			taskId = Long.parseLong(httpServletRequest.getSession().getAttribute("taskId").toString());
		}

		final TbWorkOrder tbWorkOrder = new TbWorkOrder();
		long workorderid = 0;
		final long deparmentid = tbServicesMstService.findDepartmentIdByserviceid(serviceId,
				UserSession.getCurrent().getOrganisation().getOrgid());
		final TbCfcApplicationMstEntity tbCfcApplicationMstEntity = icfcApplicationMasterService
				.getCFCApplicationByApplicationId(applicationId, UserSession.getCurrent().getOrganisation().getOrgid());
		final String ApplicantFullName = tbCfcApplicationMstEntity.getApmFname() + MainetConstants.WHITE_SPACE
				+ (tbCfcApplicationMstEntity.getApmMname() != null ? tbCfcApplicationMstEntity.getApmMname()
						: MainetConstants.BLANK)
				+ MainetConstants.WHITE_SPACE + tbCfcApplicationMstEntity.getApmLname();
		final Date ApplicarionDate = tbCfcApplicationMstEntity.getApmApplicationDate();
		final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(PrefixConstants.WATERMODULEPREFIX.REM,
				UserSession.getCurrent().getOrganisation());
		for (final LookUp Lookup1 : lookUpList) {

			if (Lookup1.getLookUpCode().equalsIgnoreCase(MAIN_PRIFEX_WPC)) {
				workorderid = Lookup1.getLookUpId();
			}
		}
		apprejMasList = tbApprejMasService.findByRemarkType(serviceId, workorderid);
		final List<PlumberMaster> plumberlist = waterCommonService
				.listofplumber(UserSession.getCurrent().getOrganisation().getOrgid());
		final List<LookUp> lookUpList1 = CommonMasterUtility.getListLookup(PrefixConstants.WATERMODULEPREFIX.WPC,
				UserSession.getCurrent().getOrganisation());
		final List<LookUp> lookUpListWPC = new ArrayList<>();
		if (PlumberID != null) {
			for (final LookUp lookforeach : lookUpList1) {
				if (lookforeach.getLookUpCode().equalsIgnoreCase(PrefixConstants.WATERMODULEPREFIX.WOC)) {
					lookUpListWPC.add(lookforeach);
					model.addAttribute("workordercitizen", PrefixConstants.WATERMODULEPREFIX.WOC);
				}

			}

		} else {
			for (final LookUp lookforeach : lookUpList1) {
				if (lookforeach.getLookUpCode().equalsIgnoreCase("WOP")
						|| lookforeach.getLookUpCode().equalsIgnoreCase("WOB")) {
					lookUpListWPC.add(lookforeach);
				}

			}
		}
		tbWorkOrder.setWoServiceId(serviceId);
		tbWorkOrder.setWoDeptId(deparmentid);
		tbWorkOrder.setWoApplicationDateS(ApplicarionDate + MainetConstants.BLANK);
		tbWorkOrder.setConnectionno(conncetionNo + MainetConstants.BLANK);
		tbWorkOrder.setPlumId(PlumberID);
		tbWorkOrder.setWoApplicationId(applicationId);
		tbWorkOrder.setTaskId(taskId);
		model.addAttribute(MAIN_LIST_PRIFEX_WPC, lookUpListWPC);
		model.addAttribute("applicationId", applicationId);
		model.addAttribute("plumberlist", plumberlist);
		model.addAttribute("ApplicantFullName", ApplicantFullName);
		model.addAttribute("ApplicarionDate", ApplicarionDate);
		model.addAttribute("apprejMasList", apprejMasList);
		model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrder);
		httpServletRequest.getSession().removeAttribute("applicationId");
		httpServletRequest.getSession().removeAttribute("conncetionNo");
		httpServletRequest.getSession().removeAttribute("serviceId");
		httpServletRequest.getSession().removeAttribute("taskId");
		return JSP_LIST;
	}

	@RequestMapping()
	public String list(final Model model) {
		log("Action 'list'");
		final TbWorkOrder tbWorkOrder = new TbWorkOrder();
		final List<TbWorkOrder> list = new ArrayList<>();
		serviceMasList = tbServicesMstService
				.findAllServiceListByOrgId(Long.valueOf(UserSession.getCurrent().getOrganisation().getOrgid()));
		serviceList = new ArrayList<>();
		final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(PrefixConstants.WATERMODULEPREFIX.WPC,
				UserSession.getCurrent().getOrganisation());
		model.addAttribute(MAIN_LIST_PRIFEX_WPC, lookUpList);
		final int LanguageId = UserSession.getCurrent().getLanguageId();
		model.addAttribute("LanguageId", LanguageId);
		model.addAttribute("serviceMasList", serviceMasList);
		model.addAttribute(MAIN_LIST_NAME, list);
		model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrder);
		workodergenraitonList.clear();
		return JSP_GRID;
	}

	/**
	 * Shows a form page in order to create a new TbWorkOrder
	 * 
	 * @param model
	 *            Spring MVC model
	 * @return
	 */
	@RequestMapping(params = "searchServiceMst")
	public @ResponseBody List<WorkOrderGridEntityList> searchServiceMst(final Model model,
			@RequestParam("deptId") final Long deptId, @RequestParam("serviceId") Long serviceId) {
		log("Action 'searchServiceMst'");

		if (serviceId.intValue() == -1) {
			serviceId = null;
		}

		workodergenraitonList = tbWorkOrderService.findWorkOrderPrintList(deptId, serviceId);
		String serviceShortCode = serviceMaster
				.fetchServiceShortCode(serviceId, UserSession.getCurrent().getOrganisation().getOrgid());
		if(CollectionUtils.isNotEmpty(workodergenraitonList)) {

			workodergenraitonList.forEach(workOrderGen ->{
				if(workOrderGen.getPlumberId() != null && workOrderGen.getPlumberId() > 0) {
					workOrderGen.setPlumberFName(waterCommonService.getPlumberLicenceName(workOrderGen.getPlumberId()));
				}
			});
					
		}

		return workodergenraitonList;
	}

	@RequestMapping(params = "getGridData")
	public @ResponseBody WorkOrderGridResponse gridData(final HttpServletRequest request, final Model model) {
		log("Action 'Get grid Data'");
		final WorkOrderGridResponse response = new WorkOrderGridResponse();
		final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
		response.setRows(workodergenraitonList);
		response.setTotal(workodergenraitonList.size());
		response.setRecords(workodergenraitonList.size());
		response.setPage(page);

		model.addAttribute(MAIN_LIST_NAME, serviceList);

		return response;
	}

	@RequestMapping("/form")
	public String formForCreate(final Model model, final HttpServletRequest request,
			@RequestParam("appNo") final long applicationId) {
		log("Action 'formForCreate'");
		// --- Populates the model with a new instance
		final TbWorkOrder tbWorkOrder = new TbWorkOrder();
		populateModel(model, tbWorkOrder, FormMode.CREATE);
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing TbWorkOrder
	 * 
	 * @param model
	 *            Spring MVC model
	 * @param woId
	 *            primary key element
	 * @return
	 */
	@RequestMapping(params = "print", method = { RequestMethod.GET, RequestMethod.POST })
	public String formForPrint(final Model model, @RequestParam("applicationId") final BigDecimal applicationId) {
		log("Action 'formForUpdate'");
		final List<String> paramList = commonService.findServiceActionUrl(
				Long.valueOf(applicationId + MainetConstants.BLANK),
				UserSession.getCurrent().getOrganisation().getOrgid());
		final String ServiceName = tbServicesMstService.getServiceNameByServiceId(
				Long.valueOf(paramList.get(MainetConstants.INDEX.ONE) + MainetConstants.BLANK));
		final TbCfcApplicationMstEntity tbCfcApplicationMstEntity = icfcApplicationMasterService
				.getCFCApplicationByApplicationId(Long.valueOf(applicationId + MainetConstants.BLANK),
						UserSession.getCurrent().getOrganisation().getOrgid());
		final CFCApplicationAddressEntity address = iCFCApplicationAddressService.getApplicationAddressByAppId(
				Long.valueOf(applicationId + MainetConstants.BLANK),
				UserSession.getCurrent().getOrganisation().getOrgid());
		String useraddress = address.getApaFloor() == null ? MainetConstants.BLANK
				: address.getApaFloor() + MainetConstants.operator.COMMA;
		useraddress += address.getApaBldgnm() == null ? MainetConstants.BLANK
				: address.getApaBldgnm() + MainetConstants.operator.COMMA;
		useraddress += address.getApaAreanm() == null ? MainetConstants.BLANK
				: address.getApaAreanm() + MainetConstants.operator.COMMA;
		useraddress += address.getApaHsgCmplxnm() == null ? MainetConstants.BLANK
				: address.getApaHsgCmplxnm() + MainetConstants.operator.COMMA;
		useraddress += address.getApaRoadnm() == null ? MainetConstants.BLANK
				: address.getApaRoadnm() + MainetConstants.operator.COMMA;
		useraddress += address.getApaPincode() == null ? MainetConstants.BLANK
				: address.getApaPincode() + MainetConstants.operator.COMMA;

		String ApplicantFullName = tbCfcApplicationMstEntity.getApmFname() == null ? MainetConstants.BLANK
				: tbCfcApplicationMstEntity.getApmFname();
		if (tbCfcApplicationMstEntity.getApmMname() != null)
			ApplicantFullName += MainetConstants.WHITE_SPACE + tbCfcApplicationMstEntity.getApmMname();
		if (tbCfcApplicationMstEntity.getApmLname() != null)
			ApplicantFullName += MainetConstants.WHITE_SPACE + tbCfcApplicationMstEntity.getApmLname();
		//final Date ApplicationDate = tbCfcApplicationMstEntity.getApmApplicationDate();
		String ApplicationDate = Utility.dateToString(tbCfcApplicationMstEntity.getApmApplicationDate(),MainetConstants.DATE_FORMAT);
		final long Applicationid = tbCfcApplicationMstEntity.getApmApplicationId();
		tbCfcApplicationMstEntity.getWorkDefinitionId();
		final Map<String, BigDecimal> Chargedescruption = tbChargeMasterService.getChargeDescByChgId(
				Long.valueOf(applicationId + MainetConstants.BLANK),
				UserSession.getCurrent().getOrganisation().getOrgid());
		BigDecimal chargestotal = new BigDecimal(0);
		for (final Entry<String, BigDecimal> entry : Chargedescruption.entrySet()) {
			chargestotal = chargestotal.add(entry.getValue());
		}

		final List<TbWorkOrderDetail> tbWorkOrderDetail = tbWorkOrderService
				.findByApplicationID(Long.valueOf(applicationId + MainetConstants.BLANK));
		List<TbApprejMas> tbApprejMas = new ArrayList<>();
		final List<Long> ArtId = new ArrayList<>(0);
		Long woId = null;
		for (final TbWorkOrderDetail tbRejection : tbWorkOrderDetail) {
			woId = tbRejection.getWoId();
			if (tbRejection.getWdRemarkId() != null) {
				ArtId.add(tbRejection.getWdRemarkId());
			}
		}
		tbApprejMas = tbApprejMasServiceImpl.findByArtId(ArtId, UserSession.getCurrent().getOrganisation().getOrgid());
		final TbWorkOrder tbWorkOrderWON = tbWorkOrderService.findById(woId);
		
		TbCsmrInfoDTO master = waterCommonService.getApplicantInformationById(applicationId.longValue(),
				UserSession.getCurrent().getOrganisation().getOrgid());
		
		Map<Long, Date> receiptDet = waterCommonService.getReceiptDet(applicationId.longValue(), UserSession.getCurrent().getOrganisation().getOrgid());
		Long recptNo=null;Date rcptDate=null; 
		for ( Map.Entry<Long, Date> entry : receiptDet.entrySet()) {
			recptNo= entry.getKey();
		    rcptDate = entry.getValue();
		    
		}
		model.addAttribute("recptno", recptNo);
		model.addAttribute("recptDate", rcptDate);
		
		
		PlumberMaster plumMast = null;
		
		//US #147076
		//generate connection number before work order print for water
        if(Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(), MainetConstants.ENV_SKDCL)
        		&& MainetConstants.WATER_DEPT.equals(tbCfcApplicationMstEntity.getTbServicesMst().getTbDepartment().getDpDeptcode())) {
        	
        	physicalDateEntryService.generateConnectionNumber(Applicationid, Long.valueOf(paramList.get(MainetConstants.INDEX.ONE)));
//        	String serviceShortCode = serviceMaster.fetchServiceShortCode(Long.valueOf(paramList.get(MainetConstants.INDEX.ONE) + MainetConstants.BLANK), 
//    						UserSession.getCurrent().getOrganisation().getOrgid());
    		
        }
		if(tbWorkOrderWON.getPlumId() != null) {
			plumMast = waterCommonService.getPlumberDetailsById(tbWorkOrderWON.getPlumId());
		}
		model.addAttribute("WorkOrderNumber", tbWorkOrderWON.getWoOrderNo());
		model.addAttribute("department", departmentService.getDepartment(MainetConstants.WATER_DEPARTMENT_CODE,PrefixConstants.STATUS_ACTIVE_PREFIX));
		
//		List<TbLoiMas> getloiByApplicationId = loiMasService.getloiByApplicationId(applicationId.longValue(), Long.valueOf(paramList.get(MainetConstants.INDEX.ONE) + MainetConstants.BLANK), UserSession.getCurrent().getOrganisation().getOrgid());
		
		model.addAttribute("PrintReprintFlg", tbWorkOrderWON.getWoPrintFlg());
		model.addAttribute("NewDate", new SimpleDateFormat(MainetConstants.DATE_FORMAT_UPLOAD).format(new Date()));
		model.addAttribute("TermsConditon", tbApprejMas);
		model.addAttribute("ApplicationDate", ApplicationDate);
		model.addAttribute("ApplicationID", Applicationid);
		model.addAttribute("ServiceName", ServiceName);
		model.addAttribute("applicantAddress", useraddress);
		model.addAttribute("Chargedescruption", Chargedescruption);
		model.addAttribute("chargestotal", chargestotal);
		model.addAttribute("ApplicantFullName", ApplicantFullName);
		
		if(master != null) {
			model.addAttribute("ConnectionNo", master.getCsCcn());
			model.addAttribute("holeMan", master.getHoleMan());
		}
		if (plumMast != null) {
			String plumName = plumMast.getPlumFname() == null ? MainetConstants.BLANK : plumMast.getPlumFname();
			if (plumMast.getPlumMname() != null)
				plumName += MainetConstants.WHITE_SPACE + plumMast.getPlumMname();
			if (plumMast.getPlumLname() != null)
				plumName += MainetConstants.WHITE_SPACE + plumMast.getPlumLname();
			model.addAttribute("PlumName", plumName);
			model.addAttribute("PLumLicNO", plumMast.getPlumLicNo());
			model.addAttribute("PlumContactNo", plumMast.getPlumContactNo());
		}
		
		if (master != null && master.getCsCcnsize() != null) {
		LookUp lookUp=CommonMasterUtility.getNonHierarchicalLookUpObject(master.getCsCcnsize(), UserSession.getCurrent().getOrganisation());
	
		model.addAttribute("connectionSize",lookUp.getLookUpDesc());
		}
		//US#102672					 // pushing document to DMS		
		String URL = ServiceEndpoints.BIRT_REPORT_DMS_URL + "="
				+ ApplicationSession.getInstance().getMessage("birtName.workOrderPrint")
				+ "&__format=pdf&RP_ORGID=" + UserSession.getCurrent().getOrganisation().getOrgid()
				+ "&RP_ApplicationID=" + Applicationid + "&RP_WorkOrderNo=" + tbWorkOrderWON.getWoOrderNo();
		Utility.pushDocumentToDms(URL, tbCfcApplicationMstEntity.getApmApplicationId().toString(),
				MainetConstants.CommonConstants.COM,fileUpload);
		
		return JSP_GRID_PRINT;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param tbWorkOrder
	 *            entity to be created
	 * @param bindingResult
	 *            Spring MVC binding result
	 * @param model
	 *            Spring MVC model
	 * @param redirectAttributes
	 *            Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(params = "create", method = RequestMethod.POST) // GET or POST
	public String create(@Valid final TbWorkOrder tbWorkOrder, final BindingResult bindingResult, final Model model,
			final HttpServletRequest httpServletRequest) {
		log("Action 'create'");
		try {

			if (!bindingResult.hasErrors()) {
				final String woApplicationDate = tbWorkOrder.getWoApplicationDateS();
				final SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
				final Date date = formatter.parse(woApplicationDate);
				tbWorkOrder.setWoApplicationDate(date);
				
				final TbWorkOrder tbWorkOrderCreated = tbWorkOrderService.create(tbWorkOrder);
				model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrderCreated);
				model.addAttribute(MainetConstants.CommonConstants.SUCCESS_URL, "AdminHome.html");
				return MainetConstants.CommonConstants.SUCCESS_PAGE;
			} else {
				return new String("redirect:/AdminHome.html?");
			}
		} catch (final Exception e) {
			log("Action 'create' : Exception - " + e.getMessage());
			messageHelper.addException(model, "tbWorkOrder.error.create", e);
			return new String("redirect:/AdminHome.html?");
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param tbWorkOrder
	 *            entity to be updated
	 * @param bindingResult
	 *            Spring MVC binding result
	 * @param model
	 *            Spring MVC model
	 * @param redirectAttributes
	 *            Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(params = MainetConstants.Actions.UPDATE, method = RequestMethod.POST) // GET or POST
	public void ForPrintflagupdate(final Model model, @RequestParam("workOrderNo") final String workOrderNo) {
		log("Action 'update'");

		tbWorkOrderService.ForPrintflagupdate(workOrderNo);

	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param redirectAttributes
	 * @param woId
	 *            primary key element
	 * @return
	 */
	@RequestMapping(value = "/delete/{woId}") // GET or POST
	public String delete(final RedirectAttributes redirectAttributes, @PathVariable("woId") final Long woId) {
		log("Action 'delete'");
		try {
			tbWorkOrderService.delete(woId);
		} catch (final Exception e) {
			log("Action 'delete' : Exception - " + e.getMessage());
			messageHelper.addException(redirectAttributes, "tbWorkOrder.error.delete", e);
		}
		return redirectToList();
	}

}
