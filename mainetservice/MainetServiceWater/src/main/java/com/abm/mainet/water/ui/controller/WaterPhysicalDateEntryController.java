/*
 * Created on 10 May 2016 ( Time 19:15:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.water.ui.controller;

import java.io.Serializable;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.dto.JsonViewObject;
import com.abm.mainet.common.ui.controller.AbstractFormController;
import com.abm.mainet.common.ui.model.JQGridResponse;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.water.dto.PhysicalDateEntryDTO;
import com.abm.mainet.water.service.PhysicalDateEntryService;
import com.abm.mainet.water.ui.model.WaterPhysicalDateEntryModel;

@Controller
@RequestMapping("/PhysicalDateEntry.html")
public class WaterPhysicalDateEntryController extends AbstractFormController<WaterPhysicalDateEntryModel> {

	private static final Logger LOGGER = LoggerFactory.getLogger(WaterPhysicalDateEntryController.class);

	private static final String NOT_AUTHORIZED_USER = "Not authorized user!";

	private static final String TB_CSMR_INFO_FORM = "tbCsmrInfo/form";

	private static final String PHYSICAL_DATE_ENTRY_GRID = "PhysicalDateEntryGrid";

	@Resource
	private PhysicalDateEntryService physicalDateEntryService;

	@RequestMapping(method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView index(final HttpServletRequest httpServletRequest) {

		return customResult(PHYSICAL_DATE_ENTRY_GRID);
	}

	@RequestMapping(produces = "application/json", params = "getGridData")
	public @ResponseBody JQGridResponse<? extends Serializable> gridData(final HttpServletRequest httpServletRequest,
			final Model model) {
		bindModel(httpServletRequest);
		final String page = httpServletRequest.getParameter(MainetConstants.CommonConstants.PAGE);
		final String rows = httpServletRequest.getParameter(MainetConstants.CommonConstants.ROWS);
		int count = 0;
		final List<PhysicalDateEntryDTO> list = physicalDateEntryService.getApplicantDetailsForGrid(
				UserSession.getCurrent().getOrganisation().getOrgid(), getModel().createPagingDTO(httpServletRequest),
				getModel().createGridSearchDTO(httpServletRequest));
		if ((list != null) && !list.isEmpty()) {
			count = list.get(0).getCount();
		}
		return getModel().paginate(httpServletRequest, page, rows, count, list);
	}

	@Override
	@RequestMapping(params = "saveform", method = RequestMethod.POST)
	public ModelAndView saveform(final HttpServletRequest httpServletRequest) {
		bindModel(httpServletRequest);

		final WaterPhysicalDateEntryModel model = getModel();
		final ModelAndView mv = new ModelAndView("WaterPhysicalDateEntryValidn", MainetConstants.FORM_NAME, getModel());
		final BindingResult bindingResult = getModel().getBindingResult();

		if (bindingResult != null) {
			mv.addObject(BindingResult.MODEL_KEY_PREFIX + MainetConstants.FORM_NAME, bindingResult);
		}
		try {
			if (model.saveForm()) {
				return jsonResult(JsonViewObject.successResult(ApplicationSession.getInstance().getMessage("water.newWaterConnection.success"+ "", new Object[] {  model.getInfoDto().getCsCcn() })));
			}
		} catch (final Exception ex) {
			LOGGER.error("error in physical entry date form save", ex);
			return new ModelAndView(MainetConstants.DEFAULT_EXCEPTION_FORM_VIEW);
		}

		return mv;
	}

	@RequestMapping(params = "edit", method = RequestMethod.POST)
	public ModelAndView editForm(@RequestParam final long rowId, final HttpServletRequest httpServletRequest) {
		bindModel(httpServletRequest);
		try {
			if (getModel().doAuthorization(rowId)) {
				getModel().editForm(rowId);
			} else {
				getModel().addValidationError(NOT_AUTHORIZED_USER);
			}
		} catch (final Exception ex) {
			LOGGER.error("error in physical entry date form edit", ex);
			return new ModelAndView(MainetConstants.DEFAULT_EXCEPTION_FORM_VIEW);
		}

		return new ModelAndView(TB_CSMR_INFO_FORM, MainetConstants.FORM_NAME, getModel());

	}
}
