/*
 * Created on 10 May 2016 ( Time 19:15:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.water.ui.controller;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.dto.JsonViewObject;
import com.abm.mainet.common.ui.controller.AbstractFormController;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.water.dto.MeterDetailsEntryDTO;
import com.abm.mainet.water.service.MeterDetailEntryService;
import com.abm.mainet.water.ui.model.MeterDetailsEntryResponse;
import com.abm.mainet.water.ui.model.WaterMeterDetailsEntryModel;

@Controller
@RequestMapping("/MeterDetailsEntry.html")
public class WaterMeterDetailsEntryController extends AbstractFormController<WaterMeterDetailsEntryModel> {

    private static final String WATER_METER_DETAILS_ENTRY_VALIDN = "WaterMeterDetailsEntryValidn";

    private static final String WATER_SAVE = "water.save";

    private static final String NOT_AUTHORIZED_USER = "Not authorized user!";

    private static final String METER_DETAILS_ENTRY_FORM = "MeterDetailsEntryForm";

    private static final String PAGE = "page";

    private static final String OWNER_SHIP = "ownerShip";

    private static final String CONN_TYPE = "connType";

    private static final String METER_DETAILS_ENTRY_GRID = "MeterDetailsEntryGrid";

    private static Logger log = Logger.getLogger(WaterMeterDetailsEntryController.class);

    @Resource
    private MeterDetailEntryService meterDetailEntryService;

    @RequestMapping(method = { RequestMethod.POST, RequestMethod.GET })
    public ModelAndView index(final HttpServletRequest httpServletRequest) {
    	this.getModel().setCommonHelpDocs("MeterDetailsEntry.html");
        return customResult(METER_DETAILS_ENTRY_GRID);
    }

    @RequestMapping(params = "getGridData", method = RequestMethod.POST)
    public @ResponseBody MeterDetailsEntryResponse gridData(final HttpServletRequest request, final Model model) {

        final MeterDetailsEntryResponse responseObject = new MeterDetailsEntryResponse();
        try {
            final int page = Integer.parseInt(request.getParameter(PAGE));
            final UserSession userSession = UserSession.getCurrent();
            final List<MeterDetailsEntryDTO> list = meterDetailEntryService
                    .getApplicantDetailsForMeter(userSession.getOrganisation().getOrgid());
            responseObject.setRows(list);
            responseObject.setTotal(list.size());
            responseObject.setRecords(list.size());
            responseObject.setPage(page);
        } catch (final Exception ex) {
            log.error(ex);
        }

        return responseObject;
    }

    @Override
    @RequestMapping(params = "saveform", method = RequestMethod.POST)
    public ModelAndView saveform(final HttpServletRequest httpServletRequest) {
        bindModel(httpServletRequest);
        final ModelAndView mv = new ModelAndView(WATER_METER_DETAILS_ENTRY_VALIDN, MainetConstants.FORM_NAME, getModel());
        final BindingResult bindingResult = getModel().getBindingResult();

        if (bindingResult != null) {
            mv.addObject(BindingResult.MODEL_KEY_PREFIX + MainetConstants.FORM_NAME, bindingResult);
        }
        try {
            populateModelData(mv);
            if (getModel().saveForm()) {
                return jsonResult(JsonViewObject.successResult(getApplicationSession().getMessage(WATER_SAVE)));
            }
        } catch (final Exception ex) {
            log.error(ex);
            return new ModelAndView(MainetConstants.DEFAULT_EXCEPTION_FORM_VIEW);
        }

        return mv;
    }

    @RequestMapping(params = "edit", method = RequestMethod.POST)
    public ModelAndView editForm(@RequestParam final long rowId, final HttpServletRequest httpServletRequest, final Model model) {
        bindModel(httpServletRequest);
        final ModelAndView mv = new ModelAndView(METER_DETAILS_ENTRY_FORM, MainetConstants.FORM_NAME, getModel());

        try {
            populateModelData(mv);
            if (getModel().doAuthorization(rowId)) {
                getModel().editForm(rowId);
            } else {
                getModel().addValidationError(NOT_AUTHORIZED_USER);
            }
        } catch (final Exception ex) {
            log.error(ex);
            return new ModelAndView(MainetConstants.DEFAULT_EXCEPTION_FORM_VIEW);
        }

        return mv;

    }

    private void populateModelData(final ModelAndView model) {
        final List<LookUp> connType = CommonMasterUtility.getListLookup(PrefixConstants.NewWaterServiceConstants.WMN,
                UserSession.getCurrent().getOrganisation());
        final List<LookUp> ownerShip = CommonMasterUtility.getListLookup(PrefixConstants.NewWaterServiceConstants.WMO,
                UserSession.getCurrent().getOrganisation());
        model.addObject(CONN_TYPE, connType);
        model.addObject(OWNER_SHIP, ownerShip);

    }
}
