/*
 * Created on 4 May 2016 ( Time 15:33:38 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.water.service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.hibernate.Hibernate;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.domain.FinancialYear;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.master.dto.TbFinancialyear;
import com.abm.mainet.common.master.service.TbFinancialyearService;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.water.dao.WaterBillScheduleDAO;
import com.abm.mainet.water.domain.TbWtBillScheduleDetailEntity;
import com.abm.mainet.water.domain.TbWtBillScheduleEntity;
import com.abm.mainet.water.dto.BillingMonthDTO;
import com.abm.mainet.water.dto.BillingScheduleDto;
import com.abm.mainet.water.dto.TbWtBillSchedule;
import com.abm.mainet.water.dto.TbWtBillScheduleDetail;
import com.abm.mainet.water.mapper.TbWtBillScheduleDetailServiceMapper;
import com.abm.mainet.water.mapper.TbWtBillScheduleServiceMapper;
import com.abm.mainet.water.repository.TbWtBillScheduleDetailJpaRepository;
import com.abm.mainet.water.repository.TbWtBillScheduleJpaRepository;

/**
 * Implementation of TbWtBillScheduleService
 */
@Service
public class TbWtBillScheduleServiceImpl implements TbWtBillScheduleService {

    @Resource
    private TbWtBillScheduleJpaRepository tbWtBillScheduleJpaRepository;

    @Resource
    TbWtBillScheduleDetailJpaRepository tbWtBillScheduleDetailJpaRepository;

    @Resource
    private TbWtBillScheduleServiceMapper tbWtBillScheduleServiceMapper;

    @Resource
    TbWtBillScheduleDetailServiceMapper tbWtBillScheduleDetailServiceMapper;

    @Resource
    private WaterBillScheduleDAO waterBillScheduleDAO;

    @Autowired
    private TbFinancialyearService financialyearService;

    @Override
    @Transactional(readOnly = true)
    public TbWtBillSchedule findById(final Long cnsId, final Long orgid) {
	final TbWtBillScheduleEntity tbWtBillScheduleEntity = tbWtBillScheduleJpaRepository.findOne(cnsId);
	final TbWtBillSchedule billSchedule = tbWtBillScheduleServiceMapper
		.mapTbWtBillScheduleEntityToTbWtBillSchedule(tbWtBillScheduleEntity);
	if (tbWtBillScheduleEntity != null) {
	    final List<TbWtBillScheduleDetailEntity> listData = tbWtBillScheduleDetailJpaRepository
		    .findAllByParentId(tbWtBillScheduleEntity.getCnsId(), tbWtBillScheduleEntity.getOrgid());

	    final List<TbWtBillScheduleDetail> billScheduleDetail = new ArrayList<>();
	    for (final TbWtBillScheduleDetailEntity tbWtBillScheduleDetailEntity : listData) {
		billScheduleDetail.add(tbWtBillScheduleDetailServiceMapper
			.mapTbWtBillScheduleDetailEntityToTbWtBillScheduleDetail(tbWtBillScheduleDetailEntity));
	    }
	    billSchedule.setBillScheduleDetail(billScheduleDetail);
	}
	return billSchedule;
    }

    @Override
    @Transactional(readOnly = true)
    public List<TbWtBillSchedule> findAll() {
	final Iterable<TbWtBillScheduleEntity> entities = tbWtBillScheduleJpaRepository.findAll();
	final List<TbWtBillSchedule> beans = new ArrayList<>();
	for (final TbWtBillScheduleEntity tbWtBillScheduleEntity : entities) {
	    beans.add(
		    tbWtBillScheduleServiceMapper.mapTbWtBillScheduleEntityToTbWtBillSchedule(tbWtBillScheduleEntity));
	}
	return beans;
    }

    @Override
    @Transactional
    public TbWtBillSchedule save(final TbWtBillSchedule tbWtBillSchedule) {
	return save(tbWtBillSchedule);
    }

    @Override
    @Transactional
    public TbWtBillSchedule create(final TbWtBillSchedule tbWtBillSchedule,
	    final List<BillingMonthDTO> billingMonthTempList) {

	final TbWtBillScheduleEntity tbWtBillScheduleEntity = new TbWtBillScheduleEntity();
	tbWtBillScheduleServiceMapper.mapTbWtBillScheduleToTbWtBillScheduleEntity(tbWtBillSchedule,
		tbWtBillScheduleEntity);
	TbWtBillScheduleDetailEntity billScheduleDetailEntity = null;
	final List<BillingMonthDTO> billingMonthList = new ArrayList<>();
	final int tempFreq = tbWtBillSchedule.getTempBillFreq();

	for (int iCounter = 0; iCounter < 12; iCounter += tempFreq) {
	    billingMonthList.add(billingMonthTempList.get(iCounter));
	}

	int selectedMonth = 0;
	for (final BillingMonthDTO billingMonthData : billingMonthList) {
	    if (tbWtBillSchedule.getCnsFromDate().intValue() == billingMonthData.getMonthId().intValue()) {
		selectedMonth = billingMonthData.getTempMonthId().intValue();
		break;
	    }
	}
	final Date lmoddate = new Date();
	final List<TbWtBillScheduleDetailEntity> listOfTbWtBillScheduleDetail = new ArrayList<>();
	for (final BillingMonthDTO billingMonthData : billingMonthList) {
	    if (billingMonthData.getTempMonthId().intValue() >= selectedMonth) {
		for (final BillingMonthDTO billingMonthTempData : billingMonthTempList) {
		    if ((billingMonthData.getMonthId().intValue() + (tempFreq - 1)) > 12) {
			final int monIndex = (billingMonthData.getMonthId().intValue() + (tempFreq - 1)) - 12;
			if (billingMonthTempData.getMonthId().intValue() == monIndex) {
			    billScheduleDetailEntity = new TbWtBillScheduleDetailEntity();

			    billScheduleDetailEntity.setCnsFromDate(billingMonthData.getMonthId());
			    billScheduleDetailEntity.setCnsToDate(billingMonthTempData.getMonthId());
			    billScheduleDetailEntity.setUserId(tbWtBillSchedule.getUserId());
			    billScheduleDetailEntity.setOrgid(tbWtBillSchedule.getOrgid());
			    billScheduleDetailEntity.setLmoddate(lmoddate);
			    billScheduleDetailEntity.setLangId(tbWtBillSchedule.getLangId());
			    billScheduleDetailEntity.setStatus(MainetConstants.MENU.A);

			    billScheduleDetailEntity.setTbWtBillSchedule(tbWtBillScheduleEntity);

			    listOfTbWtBillScheduleDetail.add(billScheduleDetailEntity);

			    break;
			}
		    } else {
			if (billingMonthTempData.getMonthId()
				.intValue() == (billingMonthData.getMonthId().intValue() + (tempFreq - 1))) {
			    billScheduleDetailEntity = new TbWtBillScheduleDetailEntity();

			    billScheduleDetailEntity.setCnsFromDate(billingMonthData.getMonthId());
			    billScheduleDetailEntity.setCnsToDate(billingMonthTempData.getMonthId());
			    billScheduleDetailEntity.setUserId(tbWtBillSchedule.getUserId());
			    billScheduleDetailEntity.setOrgid(tbWtBillSchedule.getOrgid());
			    billScheduleDetailEntity.setLmoddate(lmoddate);
			    billScheduleDetailEntity.setLangId(tbWtBillSchedule.getLangId());
			    billScheduleDetailEntity.setStatus(MainetConstants.MENU.A);

			    billScheduleDetailEntity.setTbWtBillSchedule(tbWtBillScheduleEntity);

			    listOfTbWtBillScheduleDetail.add(billScheduleDetailEntity);
			    break;
			}
		    }
		}
	    }
	}

	tbWtBillScheduleEntity.setListOfTbWtBillScheduleDetail(listOfTbWtBillScheduleDetail);
	final TbWtBillScheduleEntity tbWtBillScheduleEntitySaved = tbWtBillScheduleJpaRepository
		.save(tbWtBillScheduleEntity);
	return tbWtBillScheduleServiceMapper.mapTbWtBillScheduleEntityToTbWtBillSchedule(tbWtBillScheduleEntitySaved);
    }

    @Override
    @Transactional
    public TbWtBillSchedule update(final TbWtBillSchedule tbWtBillSchedule,
	    final List<BillingMonthDTO> billingMonthTempList, final TbWtBillSchedule tbWtBillScheduleTemp) {

	final TbWtBillScheduleEntity tbWtBillScheduleEntity = tbWtBillScheduleJpaRepository
		.findOne(tbWtBillSchedule.getCnsId());
	final Long prevCnsCpdId = tbWtBillScheduleEntity.getTbComparamDet().getCpdId();
	tbWtBillScheduleServiceMapper.mapTbWtBillScheduleToTbWtBillScheduleEntity(tbWtBillSchedule,
		tbWtBillScheduleEntity);
	tbWtBillScheduleEntity.setOrgid(tbWtBillScheduleTemp.getOrgid());
	tbWtBillScheduleEntity.setUserId(tbWtBillScheduleTemp.getUserId());
	tbWtBillScheduleEntity.setLmoddate(tbWtBillScheduleTemp.getLmoddate());
	tbWtBillScheduleEntity.setLangId(tbWtBillScheduleTemp.getLangId());

	List<TbWtBillScheduleDetailEntity> listOfTbWtBillScheduleDetail = new ArrayList<>();
	if (prevCnsCpdId.intValue() != tbWtBillSchedule.getCnsCpdid().intValue()) {
	    listOfTbWtBillScheduleDetail = tbWtBillScheduleDetailJpaRepository
		    .findAllByParentId(tbWtBillScheduleEntity.getCnsId(), tbWtBillScheduleEntity.getOrgid());

	    for (final TbWtBillScheduleDetailEntity billScheduleDetailData : listOfTbWtBillScheduleDetail) {
		billScheduleDetailData.setStatus(MainetConstants.Common_Constant.INACTIVE_FLAG);
	    }

	    final List<BillingMonthDTO> billingMonthList = new ArrayList<>();
	    final int tempFreq = tbWtBillSchedule.getTempBillFreq();

	    for (int iCounter = 0; iCounter < 12; iCounter += tempFreq) {
		billingMonthList.add(billingMonthTempList.get(iCounter));
	    }

	    int selectedMonth = 0;
	    for (final BillingMonthDTO billingMonthData : billingMonthList) {
		if (tbWtBillSchedule.getCnsFromDate().intValue() == billingMonthData.getMonthId().intValue()) {
		    selectedMonth = billingMonthData.getTempMonthId().intValue();
		    break;
		}
	    }
	    final Date lmoddate = new Date();
	    TbWtBillScheduleDetailEntity billScheduleDetailEntity = null;
	    for (final BillingMonthDTO billingMonthData : billingMonthList) {
		if (billingMonthData.getTempMonthId().intValue() >= selectedMonth) {
		    for (final BillingMonthDTO billingMonthTempData : billingMonthTempList) {
			if ((billingMonthData.getMonthId().intValue() + (tempFreq - 1)) > 12) {
			    final int monIndex = (billingMonthData.getMonthId().intValue() + (tempFreq - 1)) - 12;
			    if (billingMonthTempData.getMonthId().intValue() == monIndex) {
				billScheduleDetailEntity = new TbWtBillScheduleDetailEntity();

				billScheduleDetailEntity.setCnsFromDate(billingMonthData.getMonthId());
				billScheduleDetailEntity.setCnsToDate(billingMonthTempData.getMonthId());
				billScheduleDetailEntity.setUserId(tbWtBillScheduleEntity.getUserId());
				billScheduleDetailEntity.setOrgid(tbWtBillScheduleEntity.getOrgid());
				billScheduleDetailEntity.setLmoddate(lmoddate);
				billScheduleDetailEntity.setLangId(tbWtBillScheduleEntity.getLangId());
				billScheduleDetailEntity.setStatus(MainetConstants.MENU.A);

				billScheduleDetailEntity.setTbWtBillSchedule(tbWtBillScheduleEntity);

				listOfTbWtBillScheduleDetail.add(billScheduleDetailEntity);

				break;
			    }
			} else {
			    if (billingMonthTempData.getMonthId()
				    .intValue() == (billingMonthData.getMonthId().intValue() + (tempFreq - 1))) {
				billScheduleDetailEntity = new TbWtBillScheduleDetailEntity();

				billScheduleDetailEntity.setCnsFromDate(billingMonthData.getMonthId());
				billScheduleDetailEntity.setCnsToDate(billingMonthTempData.getMonthId());
				billScheduleDetailEntity.setUserId(tbWtBillScheduleEntity.getUserId());
				billScheduleDetailEntity.setOrgid(tbWtBillScheduleEntity.getOrgid());
				billScheduleDetailEntity.setLmoddate(lmoddate);
				billScheduleDetailEntity.setLangId(tbWtBillScheduleEntity.getLangId());
				billScheduleDetailEntity.setStatus(MainetConstants.MENU.A);

				billScheduleDetailEntity.setTbWtBillSchedule(tbWtBillScheduleEntity);

				listOfTbWtBillScheduleDetail.add(billScheduleDetailEntity);
				break;
			    }
			}
		    }
		}
	    }

	    tbWtBillScheduleEntity.setListOfTbWtBillScheduleDetail(listOfTbWtBillScheduleDetail);
	} else {

	    listOfTbWtBillScheduleDetail = tbWtBillScheduleDetailJpaRepository
		    .findAllByParentId(tbWtBillScheduleEntity.getCnsId(), tbWtBillScheduleEntity.getOrgid());

	    final List<BillingMonthDTO> billingMonthList = new ArrayList<>();
	    final int tempFreq = tbWtBillSchedule.getTempBillFreq();

	    for (int iCounter = 0; iCounter < 12; iCounter += tempFreq) {
		billingMonthList.add(billingMonthTempList.get(iCounter));
	    }

	    int selectedMonth = 0;
	    for (final BillingMonthDTO billingMonthData : billingMonthList) {
		if (tbWtBillSchedule.getCnsFromDate().intValue() == billingMonthData.getMonthId().intValue()) {
		    selectedMonth = billingMonthData.getTempMonthId().intValue();
		    break;
		}
	    }

	    for (final TbWtBillScheduleDetailEntity billScheduleDetailData : listOfTbWtBillScheduleDetail) {
		for (final BillingMonthDTO billingMonthData : billingMonthList) {
		    if (billScheduleDetailData.getCnsFromDate().intValue() == billingMonthData.getMonthId()
			    .intValue()) {
			billScheduleDetailData.setTempMonthId(billingMonthData.getTempMonthId());
		    }
		}
	    }

	    for (final TbWtBillScheduleDetailEntity billScheduleDetailData : listOfTbWtBillScheduleDetail) {
		if (billScheduleDetailData.getTempMonthId().intValue() < selectedMonth) {
		    billScheduleDetailData.setStatus(MainetConstants.Common_Constant.INACTIVE_FLAG);
		}
	    }
	    tbWtBillScheduleEntity.setListOfTbWtBillScheduleDetail(listOfTbWtBillScheduleDetail);
	}

	final TbWtBillScheduleEntity tbWtBillScheduleEntitySaved = tbWtBillScheduleJpaRepository
		.save(tbWtBillScheduleEntity);
	return tbWtBillScheduleServiceMapper.mapTbWtBillScheduleEntityToTbWtBillSchedule(tbWtBillScheduleEntitySaved);
    }

    @Override
    @Transactional
    public void delete(final Long cnsId, final Long orgid) {
	tbWtBillScheduleJpaRepository.delete(cnsId);
    }

    public TbWtBillScheduleJpaRepository getTbWtBillScheduleJpaRepository() {
	return tbWtBillScheduleJpaRepository;
    }

    public void setTbWtBillScheduleJpaRepository(final TbWtBillScheduleJpaRepository tbWtBillScheduleJpaRepository) {
	this.tbWtBillScheduleJpaRepository = tbWtBillScheduleJpaRepository;
    }

    public TbWtBillScheduleServiceMapper getTbWtBillScheduleServiceMapper() {
	return tbWtBillScheduleServiceMapper;
    }

    public void setTbWtBillScheduleServiceMapper(final TbWtBillScheduleServiceMapper tbWtBillScheduleServiceMapper) {
	this.tbWtBillScheduleServiceMapper = tbWtBillScheduleServiceMapper;
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.abm.mainet.water.service.TbWtBillScheduleService#searchBillingData(java.
     * lang.Long)
     */
    @Override
    @Transactional(readOnly = true)
    public List<TbWtBillSchedule> searchBillingData(final BillingScheduleDto billingScheduleDto, final Long orgid) {

	final StringBuilder sBuilder = new StringBuilder(
		"select billScheduleEntity from TbWtBillScheduleEntity billScheduleEntity where billScheduleEntity.orgid="
			+ orgid);

	if (!StringUtils.isEmpty(billingScheduleDto.getCnsMn())) {
	    sBuilder.append(" and billScheduleEntity.cnsMn='" + billingScheduleDto.getCnsMn() + "'");
	}
	if (billingScheduleDto.getCnsYearid() != null) {
	    sBuilder.append(" and billScheduleEntity.cnsYearid=" + billingScheduleDto.getCnsYearid());
	}
	if (billingScheduleDto.getDependsOnType() != null) {
	    sBuilder.append(" and billScheduleEntity.dependsOnType=" + billingScheduleDto.getDependsOnType());
	}
	if (billingScheduleDto.getBillFreq() != null) {
	    sBuilder.append(" and billScheduleEntity.tbComparamDet.cpdId=" + billingScheduleDto.getBillFreq());
	}
	if ((billingScheduleDto.getCodIdWwz1() != null) && (billingScheduleDto.getCodIdWwz1().intValue() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz1=" + billingScheduleDto.getCodIdWwz1());
	}
	if ((billingScheduleDto.getCodIdWwz2() != null) && (billingScheduleDto.getCodIdWwz2() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz2=" + billingScheduleDto.getCodIdWwz2());
	}
	if ((billingScheduleDto.getCodIdWwz3() != null) && (billingScheduleDto.getCodIdWwz3() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz3=" + billingScheduleDto.getCodIdWwz3());
	}
	if ((billingScheduleDto.getCodIdWwz4() != null) && (billingScheduleDto.getCodIdWwz4() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz4=" + billingScheduleDto.getCodIdWwz4());
	}
	if ((billingScheduleDto.getCodIdWwz5() != null) && (billingScheduleDto.getCodIdWwz5() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz5=" + billingScheduleDto.getCodIdWwz5());
	}
	if ((billingScheduleDto.getCnsCcgid1() != null) && (billingScheduleDto.getCnsCcgid1() != 0)) {
	    sBuilder.append(" and billScheduleEntity.tbComparentDet5.codId=" + billingScheduleDto.getCnsCcgid1());
	}
	if (billingScheduleDto.getFromMonth() != null) {
	    sBuilder.append(" and billScheduleEntity.cnsFromDate=" + billingScheduleDto.getFromMonth());
	}

	sBuilder.append(" order by billScheduleEntity.cnsId desc");

	List<TbWtBillScheduleEntity> entities = waterBillScheduleDAO.searchBillingData(sBuilder.toString());

	final List<TbWtBillSchedule> beans = new ArrayList<>();
	TbWtBillSchedule entity = null;
	for (final TbWtBillScheduleEntity tbWtBillScheduleEntity : entities) {
	    entity = new TbWtBillSchedule();
	    BeanUtils.copyProperties(tbWtBillScheduleEntity, entity);
	    entity.setCnsCpdid(tbWtBillScheduleEntity.getTbComparamDet().getCpdId());
	    beans.add(entity);
	}
	return beans;
    }

    @Override
    @Transactional(readOnly = true)
    public int validateBillingData(final BillingScheduleDto billingScheduleDto, final Long orgid) {

	final StringBuilder sBuilder = new StringBuilder(
		"select billScheduleEntity from TbWtBillScheduleEntity billScheduleEntity where billScheduleEntity.orgid="
			+ orgid);

	if (!StringUtils.isEmpty(billingScheduleDto.getCnsMn())) {
	    sBuilder.append(" and billScheduleEntity.cnsMn='" + billingScheduleDto.getCnsMn() + "'");
	}
	if (billingScheduleDto.getCnsYearid() != null) {
	    sBuilder.append(" and billScheduleEntity.cnsYearid=" + billingScheduleDto.getCnsYearid());
	}
	if (billingScheduleDto.getDependsOnType() != null) {
	    sBuilder.append(" and billScheduleEntity.dependsOnType=" + billingScheduleDto.getDependsOnType());
	}
	if (billingScheduleDto.getBillFreq() != null) {
	    sBuilder.append(" and billScheduleEntity.tbComparamDet.cpdId=" + billingScheduleDto.getBillFreq());
	}
	if ((billingScheduleDto.getCodIdWwz1() != null) && (billingScheduleDto.getCodIdWwz1().intValue() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz1=" + billingScheduleDto.getCodIdWwz1());
	}
	if ((billingScheduleDto.getCodIdWwz2() != null) && (billingScheduleDto.getCodIdWwz2() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz2=" + billingScheduleDto.getCodIdWwz2());
	}
	if ((billingScheduleDto.getCodIdWwz3() != null) && (billingScheduleDto.getCodIdWwz3() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz3=" + billingScheduleDto.getCodIdWwz3());
	}
	if ((billingScheduleDto.getCodIdWwz4() != null) && (billingScheduleDto.getCodIdWwz4() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz4=" + billingScheduleDto.getCodIdWwz4());
	}
	if ((billingScheduleDto.getCodIdWwz5() != null) && (billingScheduleDto.getCodIdWwz5() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz5=" + billingScheduleDto.getCodIdWwz5());
	}
	if ((billingScheduleDto.getCnsCcgid1() != null) && (billingScheduleDto.getCnsCcgid1() != 0)) {
	    sBuilder.append(" and billScheduleEntity.tbComparentDet5.codId=" + billingScheduleDto.getCnsCcgid1());
	}
	if (billingScheduleDto.getFromMonth() != null) {
	    sBuilder.append(" and billScheduleEntity.cnsFromDate=" + billingScheduleDto.getFromMonth());
	}

	final int entities = waterBillScheduleDAO.validateBillingData(sBuilder.toString());
	return entities;
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.abm.mainet.water.service.TbWtBillScheduleService#
     * getBillScheduleByFinYearId(java.lang.String, long)
     */
    @Override
    @Transactional(readOnly = true)
    public List<TbWtBillSchedule> getBillScheduleByFinYearId(final Long finYearId, final long orgid,
	    final String meteredtype) {
	final List<TbWtBillSchedule> beans = new ArrayList<>();
	final List<TbWtBillScheduleEntity> tbWtBillScheduleEntity = tbWtBillScheduleJpaRepository
		.getBillScheduleByFinYearId(finYearId, orgid, meteredtype);
	if ((tbWtBillScheduleEntity != null) && !tbWtBillScheduleEntity.isEmpty()) {
	    int i = 0;
	    for (final TbWtBillScheduleEntity tbWtBillSchedule : tbWtBillScheduleEntity) {
		beans.add(tbWtBillScheduleServiceMapper.mapTbWtBillScheduleEntityToTbWtBillSchedule(tbWtBillSchedule));

		final List<TbWtBillScheduleDetailEntity> listData = tbWtBillScheduleDetailJpaRepository
			.findAllByParentId(tbWtBillSchedule.getCnsId(), tbWtBillSchedule.getOrgid());

		final List<TbWtBillScheduleDetail> billScheduleDetail = new ArrayList<>();
		for (final TbWtBillScheduleDetailEntity tbWtBillScheduleDetailEntity : listData) {
		    billScheduleDetail.add(tbWtBillScheduleDetailServiceMapper
			    .mapTbWtBillScheduleDetailEntityToTbWtBillScheduleDetail(tbWtBillScheduleDetailEntity));
		}
		beans.get(i).setBillScheduleDetail(billScheduleDetail);
		i++;
	    }
	}
	return beans;
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.abm.mainet.water.service.TbWtBillScheduleService#
     * getBillScheduleByBillfrequency(java.lang.String, java.lang.Long,
     * java.lang.Long)
     */
    @Override
    @Transactional(readOnly = true)
    public List<TbWtBillSchedule> getBillScheduleByBillfrequency(final String finYearId, final Long billfrequency,
	    final Long orgId, final String meterType) {
	final List<TbWtBillSchedule> beans = new ArrayList<>();
	final List<TbWtBillScheduleEntity> tbWtBillScheduleEntity = tbWtBillScheduleJpaRepository
		.getBillScheduleByFinYearIdAndBillFrequency(Long.valueOf(finYearId), billfrequency, orgId, meterType);
	if ((tbWtBillScheduleEntity != null) && !tbWtBillScheduleEntity.isEmpty()) {
	    int i = 0;
	    for (final TbWtBillScheduleEntity tbWtBillSchedule : tbWtBillScheduleEntity) {
		beans.add(tbWtBillScheduleServiceMapper.mapTbWtBillScheduleEntityToTbWtBillSchedule(tbWtBillSchedule));

		final List<TbWtBillScheduleDetailEntity> listData = tbWtBillScheduleDetailJpaRepository
			.findAllByParentId(tbWtBillSchedule.getCnsId(), tbWtBillSchedule.getOrgid());

		final List<TbWtBillScheduleDetail> billScheduleDetail = new ArrayList<>();
		for (final TbWtBillScheduleDetailEntity tbWtBillScheduleDetailEntity : listData) {
		    billScheduleDetail.add(tbWtBillScheduleDetailServiceMapper
			    .mapTbWtBillScheduleDetailEntityToTbWtBillScheduleDetail(tbWtBillScheduleDetailEntity));
		}
		beans.get(i).setBillScheduleDetail(billScheduleDetail);
		i++;
	    }
	}
	return beans;
    }

    @Override
    @Transactional(readOnly = true)
    public List<TbWtBillSchedule> getBillScheduleFromToYear(Date fromdate, long orgid, String meterType, Date todate) {
	final List<TbWtBillSchedule> beans = new ArrayList<>();
	final List<TbWtBillScheduleEntity> tbWtBillScheduleEntity = tbWtBillScheduleJpaRepository
		.getBillScheduleFromToYear(fromdate, orgid, meterType, todate);
	if ((tbWtBillScheduleEntity != null) && !tbWtBillScheduleEntity.isEmpty()) {
	    int i = 0;
	    for (final TbWtBillScheduleEntity tbWtBillSchedule : tbWtBillScheduleEntity) {
		beans.add(tbWtBillScheduleServiceMapper.mapTbWtBillScheduleEntityToTbWtBillSchedule(tbWtBillSchedule));

		final List<TbWtBillScheduleDetailEntity> listData = tbWtBillScheduleDetailJpaRepository
			.findAllByParentId(tbWtBillSchedule.getCnsId(), tbWtBillSchedule.getOrgid());

		final List<TbWtBillScheduleDetail> billScheduleDetail = new ArrayList<>();
		for (final TbWtBillScheduleDetailEntity tbWtBillScheduleDetailEntity : listData) {
		    billScheduleDetail.add(tbWtBillScheduleDetailServiceMapper
			    .mapTbWtBillScheduleDetailEntityToTbWtBillScheduleDetail(tbWtBillScheduleDetailEntity));
		}
		beans.get(i).setBillScheduleDetail(billScheduleDetail);
		i++;
	    }
	}
	return beans;
    }

    @Override
    @Transactional(readOnly = true)
    public TbWtBillScheduleDetail findScheduleByDet(Long schduleChildId, long orgid) {
	TbWtBillScheduleDetailEntity det = tbWtBillScheduleDetailJpaRepository.findOne(schduleChildId);

	TbWtBillScheduleDetail scheduleDetail = tbWtBillScheduleDetailServiceMapper
		.mapTbWtBillScheduleDetailEntityToTbWtBillScheduleDetail(det);

	Hibernate.initialize(det.getTbWtBillSchedule());

	scheduleDetail.setYearId(det.getTbWtBillSchedule().getCnsYearid());

	return scheduleDetail;

    }

    @Override
    @Transactional(readOnly = true)
    public List<TbWtBillSchedule> searchBillingDataWithScheduleDetails(BillingScheduleDto billingScheduleDto,
	    Long orgid) {

	final StringBuilder sBuilder = new StringBuilder(
		"select billScheduleEntity from TbWtBillScheduleEntity billScheduleEntity where billScheduleEntity.orgid="
			+ orgid);

	if (!StringUtils.isEmpty(billingScheduleDto.getCnsMn())) {
	    sBuilder.append(" and billScheduleEntity.cnsMn='" + billingScheduleDto.getCnsMn() + "'");
	}
	if (billingScheduleDto.getCnsYearid() != null) {
	    sBuilder.append(" and billScheduleEntity.cnsYearid=" + billingScheduleDto.getCnsYearid());
	}
	if (billingScheduleDto.getDependsOnType() != null) {
	    sBuilder.append(" and billScheduleEntity.dependsOnType=" + billingScheduleDto.getDependsOnType());
	}
	if (billingScheduleDto.getBillFreq() != null) {
	    sBuilder.append(" and billScheduleEntity.tbComparamDet.cpdId=" + billingScheduleDto.getBillFreq());
	}
	if ((billingScheduleDto.getCodIdWwz1() != null) && (billingScheduleDto.getCodIdWwz1().intValue() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz1=" + billingScheduleDto.getCodIdWwz1());
	}
	if ((billingScheduleDto.getCodIdWwz2() != null) && (billingScheduleDto.getCodIdWwz2() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz2=" + billingScheduleDto.getCodIdWwz2());
	}
	if ((billingScheduleDto.getCodIdWwz3() != null) && (billingScheduleDto.getCodIdWwz3() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz3=" + billingScheduleDto.getCodIdWwz3());
	}
	if ((billingScheduleDto.getCodIdWwz4() != null) && (billingScheduleDto.getCodIdWwz4() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz4=" + billingScheduleDto.getCodIdWwz4());
	}
	if ((billingScheduleDto.getCodIdWwz5() != null) && (billingScheduleDto.getCodIdWwz5() != -1)) {
	    sBuilder.append(" and billScheduleEntity.codIdWwz5=" + billingScheduleDto.getCodIdWwz5());
	}
	if ((billingScheduleDto.getCnsCcgid1() != null) && (billingScheduleDto.getCnsCcgid1() != 0)) {
	    sBuilder.append(" and billScheduleEntity.tbComparentDet5.codId=" + billingScheduleDto.getCnsCcgid1());
	}
	if (billingScheduleDto.getFromMonth() != null) {
	    sBuilder.append(" and billScheduleEntity.cnsFromDate=" + billingScheduleDto.getFromMonth());
	}

	sBuilder.append(" order by billScheduleEntity.cnsId desc");

	@SuppressWarnings("unchecked")
	final List<TbWtBillScheduleEntity> entities = waterBillScheduleDAO.searchBillingData(sBuilder.toString());
	final List<TbWtBillSchedule> beans = new ArrayList<>(0);
	for (TbWtBillScheduleEntity entity : entities) {
	    final List<TbWtBillScheduleDetailEntity> billScheduleDetail = new ArrayList<>(0);
	    final List<TbWtBillScheduleDetail> detailBean = new ArrayList<>(0);
	    for (TbWtBillScheduleDetailEntity detail : entity.getListOfTbWtBillScheduleDetail()) {
		billScheduleDetail.add(detail);
		detailBean.add(tbWtBillScheduleDetailServiceMapper
			.mapTbWtBillScheduleDetailEntityToTbWtBillScheduleDetail(detail));
	    }
	    entity.setListOfTbWtBillScheduleDetail(billScheduleDetail);
	    TbWtBillSchedule bean = tbWtBillScheduleServiceMapper.mapTbWtBillScheduleEntityToTbWtBillSchedule(entity);
	    bean.setBillScheduleDetail(detailBean);
	    beans.add(bean);
	}
	return beans;
    }

    /**
     * frequency-1 for schedule end date +1 for next schedule Start date
     */
    @Override
    public List<BillingScheduleDto> createSchedule(Long schFreq, Long cnsYearid, Organisation organisation) {
	List<BillingScheduleDto> billSchDtoList = new LinkedList<>();
	int frequency = Integer
		.parseInt(CommonMasterUtility.getNonHierarchicalLookUpObject(schFreq, organisation).getLookUpCode());
	Date fromDate = null;

	if (cnsYearid != null) {
	    TbFinancialyear finYear = financialyearService.findYearById(cnsYearid, organisation.getOrgid());
	    fromDate = finYear.getFaFromDate();
	} else {
	    FinancialYear financialYear = financialyearService.getFinanciaYearByDate(new Date());
	    fromDate = financialYear.getFaFromDate();
	}

	for (int i = frequency; i <= 12; i = i + frequency) {
	    BillingScheduleDto billSchDto = new BillingScheduleDto();
	    Calendar cal = Calendar.getInstance();
	    cal.setTime(fromDate);
	    billSchDto.setBillFromDate(cal.getTime());
	    billSchDto.setBillFromMonth(new SimpleDateFormat("MMMM").format(fromDate));
	    cal.add(Calendar.MONTH, +frequency - 1);
	    cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
	    billSchDto.setBillToDate(cal.getTime());
	    billSchDto.setBillToMonth(new SimpleDateFormat("MMMM").format(cal.getTime()));
	    cal.add(Calendar.MONTH, +1);
	    cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH));
	    fromDate = cal.getTime();
	    billSchDtoList.add(billSchDto);
	}
	return billSchDtoList;
    }
    
    
    @Override
    @Transactional(readOnly = true)
    public List<TbWtBillSchedule> getBillScheduleByOrgId(final long orgid,
	    final String meteredtype) {
	final List<TbWtBillSchedule> beans = new ArrayList<>();
	final List<TbWtBillScheduleEntity> tbWtBillScheduleEntity = tbWtBillScheduleJpaRepository
		.getBillScheduleByOrgId(orgid, meteredtype);
	if ((tbWtBillScheduleEntity != null) && !tbWtBillScheduleEntity.isEmpty()) {
	    int i = 0;
	    for (final TbWtBillScheduleEntity tbWtBillSchedule : tbWtBillScheduleEntity) {
		beans.add(tbWtBillScheduleServiceMapper.mapTbWtBillScheduleEntityToTbWtBillSchedule(tbWtBillSchedule));

		final List<TbWtBillScheduleDetailEntity> listData = tbWtBillScheduleDetailJpaRepository
			.findAllByParentId(tbWtBillSchedule.getCnsId(), tbWtBillSchedule.getOrgid());

		final List<TbWtBillScheduleDetail> billScheduleDetail = new ArrayList<>();
		for (final TbWtBillScheduleDetailEntity tbWtBillScheduleDetailEntity : listData) {
		    billScheduleDetail.add(tbWtBillScheduleDetailServiceMapper
			    .mapTbWtBillScheduleDetailEntityToTbWtBillScheduleDetail(tbWtBillScheduleDetailEntity));
		}
		beans.get(i).setBillScheduleDetail(billScheduleDetail);
		i++;
	    }
	}
	return beans;
    }
    
}
