/*
 * Created on 27 Jul 2015 ( Time 15:57:44 )

 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.master.dto.TbOrganisation;
import com.abm.mainet.common.master.dto.TbOrganisationAddDet;
import com.abm.mainet.common.master.service.TbOrganisationAddDetService;
import com.abm.mainet.common.master.service.TbOrganisationService;
import com.abm.mainet.common.master.ui.model.TbOrganisationListItem;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;

//--- Entities
//--- Services
//--- Common classes
//--- List Items

/**
 * Spring MVC controller for 'TbOrganisationAddDet' management.
 */
@Controller
@RequestMapping("/TbOrganisationAddDet.html")
public class TbOrganisationAddDetController extends AbstractController {

    // --- Variables names ( to be used in JSP with Expression Language )
    private static final String MAIN_ENTITY_NAME = "tbOrganisationAddDet";
    private static final String MAIN_LIST_NAME = "list";

    // --- JSP pages names ( View name in the MVC model )
    private static final String JSP_FORM = "tbOrganisationAddDet/form";
    private static final String JSP_LIST = "tbOrganisationAddDet/list";

    // --- SAVE ACTION ( in the HTML form )
    private static final String SAVE_ACTION_CREATE = "TbOrganisationAddDet.html?create";
    private static final String SAVE_ACTION_UPDATE = "TbOrganisationAddDet.html?update";

    // --- Main entity service
    @Resource
    private TbOrganisationAddDetService tbOrganisationAddDetService; // Injected by Spring
    // --- Other service(s)
    @Resource
    private TbOrganisationService tbOrganisationService; // Injected by Spring

    // --------------------------------------------------------------------------------------
    /**
     * Default constructor
     */
    public TbOrganisationAddDetController() {
        super(TbOrganisationAddDetController.class, MAIN_ENTITY_NAME);
        log("TbOrganisationAddDetController created.");
    }

    // --------------------------------------------------------------------------------------
    // Spring MVC model management
    // --------------------------------------------------------------------------------------
    /**
     * Populates the combo-box "items" for the referenced entity "TbOrganisation"
     * @param model
     */
    private void populateListOfTbOrganisationItems(final Model model) {
        final List<TbOrganisation> list = tbOrganisationService.findAll();
        final List<TbOrganisationListItem> items = new LinkedList<>();
        for (final TbOrganisation tbOrganisation : list) {
            items.add(new TbOrganisationListItem(tbOrganisation));
        }
        model.addAttribute(MainetConstants.TbDeporgMap.LIST_OF_ORGANIZATION_ITEMS, items);
    }

    /**
     * Populates the Spring MVC model with the given entity and eventually other useful data
     * @param model
     * @param tbOrganisationAddDet
     */
    private void populateModel(final Model model, final TbOrganisationAddDet tbOrganisationAddDet, final FormMode formMode) {
        // --- Main entity
        model.addAttribute(MAIN_ENTITY_NAME, tbOrganisationAddDet);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            // --- Other data useful in this screen in "create" mode (all fields)
            populateListOfTbOrganisationItems(model);
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
            // --- Other data useful in this screen in "update" mode (only non-pk fields)
        }
    }

    // --------------------------------------------------------------------------------------
    // Request mapping
    // --------------------------------------------------------------------------------------
    /**
     * Shows a list with all the occurrences of TbOrganisationAddDet found in the database
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping()
    public String list(final Model model) {
        log("Action 'list'");
        final List<TbOrganisationAddDet> list = tbOrganisationAddDetService.findAll();
        model.addAttribute(MAIN_LIST_NAME, list);
        return JSP_LIST;
    }

    /**
     * Shows a form page in order to create a new TbOrganisationAddDet
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping(params = "form")
    public String formForCreate(final Model model) {
        log("Action 'formForCreate'");
        // --- Populates the model with a new instance
        final TbOrganisationAddDet tbOrganisationAddDet = new TbOrganisationAddDet();
        populateModel(model, tbOrganisationAddDet, FormMode.CREATE);
        return JSP_FORM;
    }

    /**
     * Shows a form page in order to update an existing TbOrganisationAddDet
     * @param model Spring MVC model
     * @param orgidDet primary key element
     * @param orgId primary key element
     * @return
     */
    @RequestMapping(params = "formForUpdate")
    public String formForUpdate(final Model model, @RequestParam("orgidDet") final Long orgidDet,
            @RequestParam("orgId") final Long orgId) {
        log("Action 'formForUpdate'");
        // --- Search the entity by its primary key and stores it in the model
        final TbOrganisationAddDet tbOrganisationAddDet = tbOrganisationAddDetService.findById(orgidDet, orgId);
        populateModel(model, tbOrganisationAddDet, FormMode.UPDATE);
        return JSP_FORM;
    }

    /**
     * 'CREATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbOrganisationAddDet entity to be created
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "create") // GET or POST
    public String create(@Valid final TbOrganisationAddDet tbOrganisationAddDet, final BindingResult bindingResult,
            final Model model,
            final HttpServletRequest httpServletRequest) {
        log("Action 'create'");
        try {
            if (!bindingResult.hasErrors()) {
                final TbOrganisationAddDet tbOrganisationAddDetCreated = tbOrganisationAddDetService.create(tbOrganisationAddDet);
                model.addAttribute(MAIN_ENTITY_NAME, tbOrganisationAddDetCreated);
                return redirectToForm(httpServletRequest, tbOrganisationAddDet.getOrgidDet(), tbOrganisationAddDet.getOrgId());
            } else {
                populateModel(model, tbOrganisationAddDet, FormMode.CREATE);
                return JSP_FORM;
            }
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbOrganisationAddDet.error.create", e);
            populateModel(model, tbOrganisationAddDet, FormMode.CREATE);
            return JSP_FORM;
        }
    }

    /**
     * 'UPDATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbOrganisationAddDet entity to be updated
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "update") // GET or POST
    public String update(@Valid final TbOrganisationAddDet tbOrganisationAddDet, final BindingResult bindingResult,
            final Model model,
            final HttpServletRequest httpServletRequest) {
        log("Action 'update'");
        try {
            if (!bindingResult.hasErrors()) {
                // --- Perform database operations
                final TbOrganisationAddDet tbOrganisationAddDetSaved = tbOrganisationAddDetService.update(tbOrganisationAddDet);
                model.addAttribute(MAIN_ENTITY_NAME, tbOrganisationAddDetSaved);
                // --- Set the result message
                log("Action 'update' : update done - redirect");
                return redirectToForm(httpServletRequest, tbOrganisationAddDet.getOrgidDet(), tbOrganisationAddDet.getOrgId());
            } else {
                log("Action 'update' : binding errors");
                populateModel(model, tbOrganisationAddDet, FormMode.UPDATE);
                return JSP_FORM;
            }
        } catch (final Exception e) {
            messageHelper.addException(model, "tbOrganisationAddDet.error.update", e);
            log("Action 'update' : Exception - " + e.getMessage());
            populateModel(model, tbOrganisationAddDet, FormMode.UPDATE);
            return JSP_FORM;
        }
    }

    /**
     * 'DELETE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param redirectAttributes
     * @param orgidDet primary key element
     * @param orgId primary key element
     * @return
     */
    @RequestMapping(params = "delete") // GET or POST
    public String delete(@RequestParam("orgidDet") final Long orgidDet, @RequestParam("orgId") final Long orgId) {
        log("Action 'delete'");
        try {
            tbOrganisationAddDetService.delete(orgidDet, orgId);
            // --- Set the result message
        } catch (final Exception e) {
           
        }
        return redirectToList();
    }

}
