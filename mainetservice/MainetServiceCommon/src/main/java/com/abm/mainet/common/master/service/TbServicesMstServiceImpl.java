/* * Created on 19 Aug 2015 ( Time 17:12:01 ) * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.audit.service.AuditService;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.dao.IServiceMasterDAO;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.domain.ServiceMasterHistory;
import com.abm.mainet.common.exception.FrameworkException;
import com.abm.mainet.common.integration.dto.PortalServiceDTO;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbOrganisation;
import com.abm.mainet.common.master.dto.TbServicesMst;
import com.abm.mainet.common.master.mapper.TbDepartmentServiceMapper;
import com.abm.mainet.common.master.mapper.TbOrganisationServiceMapper;
import com.abm.mainet.common.master.mapper.TbServicesMstServiceMapper;
import com.abm.mainet.common.master.repository.TbComparamDetJpaRepository;
import com.abm.mainet.common.master.repository.TbComparamMasJpaRepository;
import com.abm.mainet.common.master.repository.TbServicesMstJpaRepository;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.RestClient;
import com.abm.mainet.common.utility.UserSession;

/**
 * Implementation of TbServicesMstService
 */
@Component
public class TbServicesMstServiceImpl implements TbServicesMstService {

    @Autowired
    private AuditService auditService;

    @Resource
    private TbServicesMstJpaRepository tbServicesMstJpaRepository;

    @Resource
    private TbServicesMstServiceMapper tbServicesMstServiceMapper;

    @Resource
    private TbComparamMasJpaRepository tbComparamMasJpaRepository;

    @Resource
    private TbComparamDetJpaRepository tbComparamDetJpaRepository;

    @Autowired
    private TbOrganisationService organisationService;

    @Resource
    TbOrganisationServiceMapper tbOrganisationServiceMapper;

    @PersistenceContext
    protected EntityManager entityManager;

    @Resource
    private TbDepartmentServiceMapper tbDepartmentServiceMapper;

    @Autowired
    private IServiceMasterDAO serviceMasterDAO;

    @Resource
    private TbDepartmentService departmentService;

    private static final Logger LOGGER = LoggerFactory.getLogger(TbServicesMstServiceImpl.class);

    @Override
    @Transactional
    public TbServicesMst findById(final Long smServiceId) {
        final ServiceMaster tbServicesMstEntity = tbServicesMstJpaRepository.findOne(smServiceId);
        final TbServicesMst servicesMst = tbServicesMstServiceMapper
                .mapTbServicesMstEntityToTbServicesMst(tbServicesMstEntity);
        return servicesMst;
    }

    @Override
    @Transactional
    public List<TbServicesMst> findAll() {
        final Iterable<ServiceMaster> entities = tbServicesMstJpaRepository.findAll();
        final List<TbServicesMst> beans = new ArrayList<>();
        for (final ServiceMaster tbServicesMstEntity : entities) {
            beans.add(tbServicesMstServiceMapper.mapTbServicesMstEntityToTbServicesMst(tbServicesMstEntity));
        }
        return beans;
    }

    @Override
    @Transactional
    public TbServicesMst create(final TbServicesMst tbServicesMst) {

        final Organisation org = UserSession.getCurrent().getOrganisation();
        final int langId = UserSession.getCurrent().getLanguageId();
        ApplicationSession applicationSession = ApplicationSession.getInstance();
        final String yesStatus = PrefixConstants.IsLookUp.STATUS.YES;
        final String noStatus = PrefixConstants.IsLookUp.STATUS.NO;

        ServiceMaster tbServicesMstEntity = new ServiceMaster();
        tbServicesMst.setSmShortdesc(tbServicesMst.getSmShortdesc().toUpperCase());
        tbServicesMst.setLmoddate(new Date());

        if (tbServicesMst.getSmSwitch() == null) {
            tbServicesMst.setSmSwitch(noStatus);
        }
        if (tbServicesMst.getComV1() == null) {
            tbServicesMst.setComV1(noStatus);
        }
        if (tbServicesMst.getComV2() == null) {
            tbServicesMst.setComV2(noStatus);
        }
        if (tbServicesMst.getSmScrutinyApplicableFlag() == null) {
            tbServicesMst.setSmScrutinyApplicableFlag(noStatus);
        }
        if (tbServicesMst.getSmAppliChargeFlag() == null) {
            tbServicesMst.setSmAppliChargeFlag(noStatus);
        }
        if (tbServicesMst.getSmScrutinyChargeFlag() == null) {
            tbServicesMst.setSmScrutinyChargeFlag(noStatus);
        }

        tbServicesMstServiceMapper.mapTbServicesMstToTbServicesMstEntity(tbServicesMst, tbServicesMstEntity);
        ServiceMaster tbServicesMstEntitySaved = tbServicesMstJpaRepository.save(tbServicesMstEntity);

        ServiceMasterHistory servicemasterHist = new ServiceMasterHistory();
        servicemasterHist.setStatus(MainetConstants.InsertMode.ADD.getStatus());
        auditService.createHistory(tbServicesMstEntitySaved, servicemasterHist);

        // Finds all active Organization
        final List<TbOrganisation> orgList = organisationService.findAll();

        // get activeness lookup id
        final LookUp activenessLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
                PrefixConstants.IsLookUp.INACTIVE, PrefixConstants.LookUp.ACN, langId, org);
        final Long activenessLookupId = activenessLookup.getLookUpId();

        for (final TbOrganisation orgData : orgList) {

            if (!yesStatus.equals(orgData.getDefaultStatus())) {

                tbServicesMstEntity = new ServiceMaster();
                tbServicesMst.setOrgid(orgData.getOrgid());
                tbServicesMst.setSmServActive(activenessLookupId);
                ServiceMaster serviceMstEntity = findShortCodeByOrgId(tbServicesMst.getSmShortdesc().toUpperCase(),
                        orgData.getOrgid());
                if (serviceMstEntity == null) {
                    tbServicesMstServiceMapper.mapTbServicesMstToTbServicesMstEntity(tbServicesMst,
                            tbServicesMstEntity);
                    tbServicesMstJpaRepository.save(tbServicesMstEntity);
                }
            }

        }

        if (MainetConstants.Common_Constant.YES
                .equals(applicationSession.getMessage("organisation.usecase.isPortal"))) {
            try {
                createPortalService(tbServicesMstEntitySaved, applicationSession);
            } catch (Exception exception) {
                LOGGER.error("Exception while posting services to portal : " + exception);

            }
        }

        final TbServicesMst servicesMst = new TbServicesMst();
        servicesMst.setSmServiceId(tbServicesMstEntitySaved.getSmServiceId());
        return servicesMst;
    }

    private void createPortalService(ServiceMaster serviceMasterEntity, ApplicationSession applicationSession) {

        final int languageId = UserSession.getCurrent().getLanguageId();

        PortalServiceDTO serviceDTO = new PortalServiceDTO();

        serviceDTO.setServiceId(serviceMasterEntity.getSmServiceId());
        serviceDTO.setLmodDate(serviceMasterEntity.getLmoddate());
        serviceDTO.setServiceName(serviceMasterEntity.getSmServiceName());
        serviceDTO.setServiceOrgId(serviceMasterEntity.getOrgid());
        serviceDTO.setServiceNameReg(serviceMasterEntity.getSmServiceNameMar());
        serviceDTO.setShortName(serviceMasterEntity.getSmShortdesc());
        serviceDTO.setLangId(Long.valueOf(languageId));
        serviceDTO.setUserId(serviceMasterEntity.getUserId());
        serviceDTO.setIsDeleted(CommonMasterUtility.getCPDDescription(serviceMasterEntity.getSmServActive(), "V"));
        TbDepartment dept = departmentService.findById(serviceMasterEntity.getTbDepartment().getDpDeptid());

        // set service Department Id, Department Name , Department description and Department code
        serviceDTO.setPsmDpDeptid(dept.getDpDeptid());
        serviceDTO.setPsmDpDeptCode(dept.getDpDeptcode());
        serviceDTO.setPsmDpDeptDesc(dept.getDpDeptdesc());
        serviceDTO.setPsmDpNameMar(dept.getDpNameMar());
        String absoluteUri = applicationSession.getMessage("mainet.portal.absolutepath.url");
        String completeUri = null;
        completeUri = absoluteUri + "servicePortal/saveService";
        try {
            RestClient.postData(serviceDTO, completeUri);
        } catch (Exception exception) {
            LOGGER.error("While Calling Rest call Method " + exception);
        }
    }

    @Override
    @Transactional
    public TbServicesMst update(final TbServicesMst tbServicesMst) {
        final TbDepartment tbDepartment = new TbDepartment();
        final String noStatus = PrefixConstants.IsLookUp.STATUS.NO;

        final ServiceMaster tbServicesMstEntity = tbServicesMstJpaRepository.findOne(tbServicesMst.getSmServiceId());

        BeanUtils.copyProperties(tbServicesMstEntity.getTbDepartment(), tbDepartment);
        tbDepartment.setLangId(tbServicesMstEntity.getTbDepartment().getLangId().longValue());
        tbServicesMst.setTbDepartment(tbDepartment);

        tbServicesMst.setLmoddate(tbServicesMstEntity.getLmoddate());
        tbServicesMst.setUserId(tbServicesMstEntity.getUserId());

        if (tbServicesMst.getSmSwitch() == null) {
            tbServicesMst.setSmSwitch(noStatus);
        }
        if (tbServicesMst.getComV1() == null) {
            tbServicesMst.setComV1(noStatus);
        }
        if (tbServicesMst.getComV2() == null) {
            tbServicesMst.setComV2(noStatus);
        }
        if (tbServicesMst.getSmScrutinyApplicableFlag() == null) {
            tbServicesMst.setSmScrutinyApplicableFlag(noStatus);
        }
        if (tbServicesMst.getSmAppliChargeFlag() == null) {
            tbServicesMst.setSmAppliChargeFlag(noStatus);
        }
        if (tbServicesMst.getSmScrutinyChargeFlag() == null) {
            tbServicesMst.setSmScrutinyChargeFlag(noStatus);

        }

        tbServicesMstServiceMapper.mapTbServicesMstToTbServicesMstEntity(tbServicesMst, tbServicesMstEntity);

        final ServiceMaster tbServicesMstEntitySaved = tbServicesMstJpaRepository.save(tbServicesMstEntity);

        final ApplicationSession applicationSession = ApplicationSession.getInstance();

        if (tbServicesMst.getActiveInactive().longValue() != tbServicesMstEntitySaved.getSmServActive().longValue()) {
            if (MainetConstants.Common_Constant.YES
                    .equals(applicationSession.getMessage("organisation.usecase.isPortal"))) {
                PortalServiceDTO serviceDTO = new PortalServiceDTO();
                // Department department = new Department();
                // department.setDpDeptid(tbDepartment.getDpDeptid());
                serviceDTO.setPsmDpDeptid(tbDepartment.getDpDeptid());
                serviceDTO.setPsmDpDeptCode(tbDepartment.getDpDeptcode());
                serviceDTO.setPsmDpDeptDesc(tbDepartment.getDpDeptdesc());
                serviceDTO.setPsmDpNameMar(tbDepartment.getDpNameMar());
                serviceDTO.setUpdatedBy(tbServicesMstEntitySaved.getUpdatedBy());
                serviceDTO.setServiceId(tbServicesMstEntitySaved.getSmServiceId());
                serviceDTO.setShortName(tbServicesMstEntitySaved.getSmShortdesc());
                serviceDTO.setServiceOrgId(tbServicesMstEntitySaved.getOrgid());
                serviceDTO.setLmodDate(tbServicesMstEntitySaved.getLmoddate());
                serviceDTO.setServiceName(tbServicesMstEntitySaved.getSmServiceName());
                serviceDTO.setServiceOrgId(tbServicesMstEntitySaved.getOrgid());
                serviceDTO.setServiceNameReg(tbServicesMstEntitySaved.getSmServiceNameMar());
                serviceDTO.setLangId(tbServicesMstEntitySaved.getLangId());
                serviceDTO.setIsDeleted(
                        CommonMasterUtility.getCPDDescription(tbServicesMstEntitySaved.getSmServActive(), "V"));
                String absoluteUri = applicationSession.getMessage("mainet.portal.absolutepath.url");
                String completeUri = null;
                completeUri = absoluteUri + "servicePortal/updateService";
                org.springframework.beans.BeanUtils.copyProperties(tbServicesMstEntitySaved, serviceDTO);
                try {
                    RestClient.postData(serviceDTO, completeUri);
                } catch (Exception exception) {
                    LOGGER.error("While Calling Rest call Method " + exception);
                }

            }

        }

        ServiceMasterHistory servicemaster_hist = new ServiceMasterHistory();
        servicemaster_hist.setStatus(MainetConstants.InsertMode.UPDATE.getStatus());
        auditService.createHistory(tbServicesMstEntitySaved, servicemaster_hist);

        final TbServicesMst servicesMst = new TbServicesMst();
        servicesMst.setSmServiceId(tbServicesMstEntitySaved.getSmServiceId());
        return servicesMst;
    }

    @Override
    @Transactional
    public void delete(final Long smServiceId) {

        final ServiceMaster tbServicesMstEntity = tbServicesMstJpaRepository.findOne(smServiceId);
        final List<LookUp> acnPrefixList = CommonMasterUtility.getListLookup(PrefixConstants.LookUp.ACN,
                UserSession.getCurrent().getOrganisation());
        Long isActive = null;
        for (final LookUp lookUp : acnPrefixList) {
            if ("I".equals(lookUp.getLookUpCode())) {
                isActive = lookUp.getLookUpId();
                break;
            }
        }
        tbServicesMstEntity.setSmServActive(isActive);
        tbServicesMstJpaRepository.save(tbServicesMstEntity);

        ServiceMasterHistory servicemaster_hist = new ServiceMasterHistory();
        servicemaster_hist.setStatus(MainetConstants.InsertMode.DELETE.getStatus());
        auditService.createHistory(tbServicesMstEntity, servicemaster_hist);

    }

    public TbServicesMstJpaRepository getTbServicesMstJpaRepository() {
        return tbServicesMstJpaRepository;
    }

    public void setTbServicesMstJpaRepository(final TbServicesMstJpaRepository tbServicesMstJpaRepository) {
        this.tbServicesMstJpaRepository = tbServicesMstJpaRepository;
    }

    public TbServicesMstServiceMapper getTbServicesMstServiceMapper() {
        return tbServicesMstServiceMapper;
    }

    public void setTbServicesMstServiceMapper(final TbServicesMstServiceMapper tbServicesMstServiceMapper) {
        this.tbServicesMstServiceMapper = tbServicesMstServiceMapper;
    }

    @Override
    @Transactional
    public List<TbServicesMst> findAllServiceListByOrgId(final Long orgId) {
        final List<TbServicesMst> beans = new ArrayList<>();

        try {
            final List<ServiceMaster> servicesMstEntityList = tbServicesMstJpaRepository
                    .findAllServiceListByOrgId(orgId);

            for (final ServiceMaster tbServicesMstEntity : servicesMstEntityList) {
                beans.add(tbServicesMstServiceMapper.mapTbServicesMstEntityToTbServicesMst(tbServicesMstEntity));
            }
        } catch (final Exception ex) {
            throw new FrameworkException("Exception while fetching all services by organization id : ", ex);
        }
        return beans;
    }

    @Override
    @Transactional
    public List<TbServicesMst> findByDeptServiceId(final Long deptId, final Long serviceId, final Long organisation) {

        List<ServiceMaster> servicesMstEntityList = null;
        final Organisation defaultOrg = organisationService.findDefaultOrganisation();

        if (serviceId == null) {
            servicesMstEntityList = tbServicesMstJpaRepository.findByDeptServiceId(deptId, organisation);
        } else {
            servicesMstEntityList = tbServicesMstJpaRepository.findByDeptServiceId(deptId, serviceId, organisation);
        }

        final List<TbServicesMst> beansList = new ArrayList<>();
        LookUp lookUp = null;
        TbServicesMst servicesMst = null;

        for (final ServiceMaster serviceMstEntity : servicesMstEntityList) {
            servicesMst = new TbServicesMst();
            servicesMst = tbServicesMstServiceMapper.mapTbServicesMstEntityToTbServicesMst(serviceMstEntity);
            lookUp = CommonMasterUtility.getNonHierarchicalLookUpObject(serviceMstEntity.getSmChklstVerify(),
                    defaultOrg);
            servicesMst.setSmChklstVerifyName(lookUp.getLookUpDesc());
            beansList.add(servicesMst);
        }
        return beansList;
    }

    @Override
    @Transactional
    public List<TbServicesMst> findByDeptId(final Long deptId, final Long orgId) {

        final List<ServiceMaster> entities = tbServicesMstJpaRepository.findByDeptId(deptId, orgId);
        final List<TbServicesMst> beans = new ArrayList<>();

        for (final ServiceMaster tbServicesMstEntity : entities) {
            beans.add(tbServicesMstServiceMapper.mapTbServicesMstEntityToTbServicesMst(tbServicesMstEntity));
        }
        return beans;
    }

    @Override
    @Transactional
    public List<TbServicesMst> findALlActiveServiceByDeptId(final Long deptId, final Long orgId) {
        Organisation organisation = new Organisation();
        organisation.setOrgid(orgId);
        final Long servActive = CommonMasterUtility
                .getValueFromPrefixLookUp(PrefixConstants.IsLookUp.ACTIVE, PrefixConstants.LookUp.ACN, organisation)
                .getLookUpId();
        final List<ServiceMaster> entities = tbServicesMstJpaRepository.findActiveServiceByDeptId(deptId, orgId,
                servActive);
        final List<TbServicesMst> beans = new ArrayList<>();

        for (final ServiceMaster tbServicesMstEntity : entities) {
            beans.add(tbServicesMstServiceMapper.mapTbServicesMstEntityToTbServicesMst(tbServicesMstEntity));
        }
        return beans;
    }
    
    @Override
    @Transactional
    public List<TbServicesMst> findActiveServiceByDeptIdAndNotActualSer(final Long deptId, final Long orgId) {
        Organisation organisation = new Organisation();
        organisation.setOrgid(orgId);
        final Long servActive = CommonMasterUtility
                .getValueFromPrefixLookUp(PrefixConstants.IsLookUp.ACTIVE, PrefixConstants.LookUp.ACN, organisation)
                .getLookUpId();
        final List<ServiceMaster> entities = tbServicesMstJpaRepository.findActiveServiceByDeptIdAndNotActualSer(deptId, orgId,
                servActive);
        final List<TbServicesMst> beans = new ArrayList<>();

        for (final ServiceMaster tbServicesMstEntity : entities) {
            beans.add(tbServicesMstServiceMapper.mapTbServicesMstEntityToTbServicesMst(tbServicesMstEntity));
        }
        return beans;
    }

    @Override
    @Transactional
    public Long getCpdId(final String prefix, final String cpdCode, final Organisation organisation) {

        Long cpdId = null;
        List<LookUp> prefixData = Collections.emptyList();

        final boolean replicateFlag = ApplicationSession.getInstance().checkForReplicateFlag(prefix);

        if (replicateFlag) {
            if (MainetConstants.Common_Constant.YES
                    .equals(UserSession.getCurrent().getOrganisation().getDefaultStatus())) {
                prefixData = CommonMasterUtility.getLookUps(prefix, UserSession.getCurrent().getOrganisation());
            }
        } else {
            prefixData = CommonMasterUtility.getLookUps(prefix, organisation);
        }

        if (prefixData != null) {
            for (final LookUp styLookUp : prefixData) {
                if (cpdCode.equals(styLookUp.getLookUpCode())) {
                    cpdId = Long.valueOf(styLookUp.getLookUpId());
                }
            }
        }

        return cpdId;
    }

    @Override
    @Transactional
    public Long findDepartmentIdByserviceid(final long smServiceId, final long orgid) {

        return tbServicesMstJpaRepository.findDepartmentIdByserviceid(smServiceId, orgid);

    }

    @Override
    @Transactional
    public Long checkForDuplicateService(final String serviceName, final Long orgId) {

        final Long serviceId = tbServicesMstJpaRepository.checkForDuplicateService(serviceName, orgId);
        return serviceId;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.serviceruledefinition.business.service.
     * TbServicesMstService#getSearchData(java.lang.Long, java.lang.Long, java.lang.String)
     */
    /*
     * @Override
     * @Transactional public List<ServiceChecklistDTO> getSearchData(final Long orgId, final Long serviceId, final String
     * groupName) { final StringBuilder query = new StringBuilder(
     * "select tbCfcChecklistMstEntity.tbServicesMst.smServiceId, tbCfcChecklistMstEntity.tbServicesMst.smServiceName, tbCfcChecklistMstEntity.tbServicesMst.smServiceNameMar,"
     * + " tbCfcChecklistMstEntity.docGroup from TbCfcChecklistMstEntity tbCfcChecklistMstEntity," +
     * " ServiceMaster tbServicesMstEntity where tbCfcChecklistMstEntity.tbServicesMst=tbServicesMstEntity.smServiceId" +
     * " and tbCfcChecklistMstEntity.tbOrganisation.orgid=tbServicesMstEntity.orgid" +
     * " and tbCfcChecklistMstEntity.clmStatus='A'" + " and tbCfcChecklistMstEntity.tbOrganisation.orgid=" + orgId +
     * " and tbServicesMstEntity.orgid=" + orgId); if (serviceId != null) {
     * query.append(" and tbCfcChecklistMstEntity.tbServicesMst.smServiceId=" + serviceId); } if (!StringUtils.isEmpty(groupName))
     * { query.append(" and tbCfcChecklistMstEntity.docGroup ='" + groupName + "'"); } query.append(
     * " group by tbCfcChecklistMstEntity.tbServicesMst.smServiceId, tbCfcChecklistMstEntity.tbServicesMst.smServiceName, tbCfcChecklistMstEntity.tbServicesMst.smServiceNameMar,"
     * + " tbCfcChecklistMstEntity.docGroup"); final Query list = entityManager.createQuery(query.toString());
     * @SuppressWarnings("unchecked") final List<Object> chkList = list.getResultList(); final List<ServiceChecklistDTO> beans =
     * new ArrayList<>(); ServiceChecklistDTO serviceChecklistDTO = null; final int dataSize = chkList.size(); for (int counter =
     * 0; counter < dataSize; counter++) { serviceChecklistDTO = new ServiceChecklistDTO(); final Object[] obj = (Object[])
     * chkList.get(counter); if (obj[0] != null) { serviceChecklistDTO.setSmServiceId(Long.valueOf(obj[0].toString())); } if
     * (obj[1] != null) { serviceChecklistDTO.setSmServiceName(obj[1].toString()); } if (obj[2] != null) {
     * serviceChecklistDTO.setSmServiceNameMar(obj[2].toString()); } if (obj[3] != null) {
     * serviceChecklistDTO.setDocGroup(obj[3].toString()); } beans.add(serviceChecklistDTO); } return beans; }
     */

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.serviceruledefinition.business.service.
     * TbServicesMstService#findServiceNameById(java.lang .Long, java.lang.Long)
     */
    @Override
    @Transactional
    public String findServiceNameById(final Long serviceId, final Long orgId) {
        return tbServicesMstJpaRepository.findServiceNameById(serviceId, orgId);
    }

    @Override
    public ServiceMaster findShortCodeByOrgId(final String smShortdesc, final Long orgId) {
        ServiceMaster serviceMasterEntity = null;
        try {
            serviceMasterEntity = tbServicesMstJpaRepository.findShortCodeByOrgId(smShortdesc, orgId);
        } catch (Exception e) {
            throw new FrameworkException(
                    "More than one short code define for code : " + smShortdesc + " orgid : " + orgId, e);
        }
        return serviceMasterEntity;
    }
    /*
     * @Override
     * public List<ServiceChecklistDTO> getSearchDocumentData(final Long orgId, final Long groupId) {
     * final StringBuilder queryString = new StringBuilder(
     * "SELECT TbDocumentGroup.docName,TbDocumentGroup.docType,TbDocumentGroup.docSize,"
     * +
     * "TbDocumentGroup.ccmValueset,TbDocumentGroup.docSrNo,TbDocumentGroup.dgId FROM TbDocumentGroupEntity TbDocumentGroup WHERE TbDocumentGroup.groupCpdId ="
     * + groupId + "AND TbDocumentGroup.docStatus='A' " + "AND TbDocumentGroup.tbOrganisation.orgid="
     * + orgId + "order by TbDocumentGroup.docSrNo ASC");
     * final Query list = entityManager.createQuery(queryString.toString());
     * @SuppressWarnings("unchecked")
     * final List<Object> docList = list.getResultList();
     * final List<Object> docList = tbServicesMstJpaRepository.getDocumentDetails(orgId, groupId);
     * final List<ServiceChecklistDTO> beans = new ArrayList<>();
     * ServiceChecklistDTO serviceDoclistDTO = null;
     * final int dataSize = docList.size();
     * for (int counter = 0; counter < dataSize; counter++) {
     * serviceDoclistDTO = new ServiceChecklistDTO();
     * final Object[] obj = (Object[]) docList.get(counter);
     * if (obj != null) {
     * if (obj[0] != null) {
     * serviceDoclistDTO.setDocName(obj[0].toString());
     * }
     * if (obj[1] != null) {
     * serviceDoclistDTO.setDocType(obj[1].toString());
     * }
     * if (obj[2] != null) {
     * serviceDoclistDTO.setDocSize((Long) obj[2]);
     * }
     * if (obj[3] != null) {
     * serviceDoclistDTO.setDocMandatory(setDocumentDescription((Long) obj[3]));
     * }
     * if (obj[4] != null) {
     * serviceDoclistDTO.setDocSrNo((Long) obj[4]);
     * }
     * if (obj[5] != null) {
     * serviceDoclistDTO.setDgId((Long) obj[5]);
     * }
     * serviceDoclistDTO.setDocGroup(obj.toString());
     * }
     * beans.add(serviceDoclistDTO);
     * }
     * return beans;
     * }
     * private String setDocumentDescription(final Long mandatoryId) {
     * return CommonMasterUtility.findLookUpDesc("SET", UserSession.getCurrent().getOrganisation().getOrgid(),
     * mandatoryId);
     * }
     */
    /*
     * @Override
     * public List<ServiceChecklistDTO> getSearchChecklistData(final Long orgId, final Long serviceId) {
     * final StringBuilder query = new StringBuilder(
     * "SELECT checklistMst.docGroup FROM ChecklistMstEntity checklistMst WHERE checklistMst.smServiceId ="
     * + serviceId + "AND checklistMst.clStatus='A' " + "AND checklistMst.orgid=" + orgId);// +"order
     * // by
     * // checklistMst.srNo
     * // ASC"
     * final Query list = entityManager.createQuery(query.toString());
     * @SuppressWarnings("unchecked")
     * final List<Object> chkList = list.getResultList();
     * final List<ServiceChecklistDTO> beans = new ArrayList<>();
     * ServiceChecklistDTO serviceChecklistDTO = null;
     * final int dataSize = chkList.size();
     * for (int counter = 0; counter < dataSize; counter++) {
     * serviceChecklistDTO = new ServiceChecklistDTO();
     * final Object obj = chkList.get(counter);
     * if (obj != null) {
     * serviceChecklistDTO.setDocGroup(obj.toString());
     * serviceChecklistDTO.setSmServiceId(serviceId);
     * }
     * beans.add(serviceChecklistDTO);
     * }
     * return beans;
     * }
     */

    @Override
    public List<TbDepartment> findDeptByScrutinyFlag(final Long orgId) {
        final List<Department> deptList = tbServicesMstJpaRepository.findDepartmentwithScrutiny(orgId);
        final List<TbDepartment> beanList = new ArrayList<>();
        for (final Department dept : deptList) {
            beanList.add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(dept));
        }
        return beanList;
    }

    @Override
    public List<TbServicesMst> findServiceByDeptScrutiny(final Long deptId, final Long orgId, final Long servActive) {

        final List<TbServicesMst> serviceBeanList = new ArrayList<>();
        final List<ServiceMaster> servicesList = tbServicesMstJpaRepository.findServiceByDeptScrutiny(deptId, orgId,
                servActive);
        for (final ServiceMaster serviceMst : servicesList) {
            serviceBeanList.add(tbServicesMstServiceMapper.mapTbServicesMstEntityToTbServicesMst(serviceMst));
        }
        return serviceBeanList;
    }

    @Override
    @Transactional
    public List<ServiceMaster> findAllServicesByOrgId(Long orgId) {
        return tbServicesMstJpaRepository.findAllServiceListByOrgId(orgId);
    }

    @Override
    @Transactional
    public String getServiceShortDescByServiceId(final long smServiceId) {
        return serviceMasterDAO.getServiceShortDescByServiceId(smServiceId);

    }

    @Override
    @Transactional
    public String getServiceNameByServiceId(final long smServiceId) {
        return serviceMasterDAO.getServiceNameByServiceId(smServiceId);
    }

    @Override
    @Transactional
    public List<TbServicesMst> findListOfServiceByDepartment(List<String> approvalList, Long orgId, Long deptId) {

        List<TbServicesMst> serviceMasterDtoList = new ArrayList<>();
        List<ServiceMaster> serviceMastEntity = serviceMasterDAO.getServicesByShortCodes(approvalList, orgId, deptId);
        if (serviceMastEntity != null && !serviceMastEntity.isEmpty()) {
            serviceMastEntity.forEach(serviceMast -> {
                TbServicesMst servicesMstDto = new TbServicesMst();
                BeanUtils.copyProperties(serviceMast, servicesMstDto);
                serviceMasterDtoList.add(servicesMstDto);
            });
        }
        return serviceMasterDtoList;
    }

    @Override
    @Transactional
    public void createOrganisationServices(List<TbServicesMst> serviceList) {

        // N flag for null value
        final String noStatus = PrefixConstants.IsLookUp.STATUS.NO;
        List<ServiceMaster> serviceEntityList = new ArrayList<>();
        serviceList.forEach(serviceBean -> {
            ServiceMaster serviceEntity = new ServiceMaster();
            tbServicesMstServiceMapper.mapTbServicesMstToTbServicesMstEntity(serviceBean, serviceEntity);
            // set service id as null for created new service
            if (serviceBean.getSmSwitch() == null) {
                serviceEntity.setSmSwitch(noStatus);
            }
            if (serviceBean.getComV1() == null) {
                serviceEntity.setComV1(noStatus);
            }
            if (serviceBean.getComV2() == null) {
                serviceEntity.setComV2(noStatus);
            }
            if (serviceBean.getSmScrutinyApplicableFlag() == null) {
                serviceEntity.setSmScrutinyApplicableFlag(noStatus);
            }
            if (serviceBean.getSmAppliChargeFlag() == null) {
                serviceEntity.setSmAppliChargeFlag(noStatus);
            }
            if (serviceBean.getSmScrutinyChargeFlag() == null) {
                serviceEntity.setSmScrutinyChargeFlag(noStatus);
            }
            serviceEntityList.add(serviceEntity);
        });

        // save All Service Entity
        Iterable<ServiceMaster> savedServices = tbServicesMstJpaRepository.save(serviceEntityList);

        List<Object> historyList = new ArrayList<>();
        // create History for created service master
        savedServices.forEach(serviceEntity -> {
            ServiceMasterHistory serviceHist = new ServiceMasterHistory();
            BeanUtils.copyProperties(serviceEntity, serviceHist);
            serviceHist.setStatus(MainetConstants.InsertMode.ADD.getStatus());
            historyList.add(serviceHist);
        });
        auditService.createHistoryForListObj(historyList);

    }
    
    @Override
    @Transactional
    public String getServiceNameByServiceIdLangId(final long smServiceId, int langId) {
        return serviceMasterDAO.getServiceNameByServiceIdLangId(smServiceId,langId);
    }


}
