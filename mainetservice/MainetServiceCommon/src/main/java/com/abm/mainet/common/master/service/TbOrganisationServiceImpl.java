/*
 * Created on 27 Jul 2015 ( Time 15:58:02 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.abm.mainet.common.master.service;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.annotation.Resource;
import javax.jws.WebMethod;
import javax.jws.WebService;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.apache.commons.io.FileUtils;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.task.TaskExecutor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.constant.ServiceEndpoints;
import com.abm.mainet.common.dao.IOrganisationDAO;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.DeptOrgMap;
import com.abm.mainet.common.domain.Designation;
import com.abm.mainet.common.domain.Employee;
import com.abm.mainet.common.domain.FinancialYear;
import com.abm.mainet.common.domain.GroupMaster;
import com.abm.mainet.common.domain.LocationMasEntity;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.domain.SystemModuleFunction;
import com.abm.mainet.common.domain.TbComparamDetEntity;
import com.abm.mainet.common.domain.TbComparamMasEntity;
import com.abm.mainet.common.domain.TbComparentMasEntity;
import com.abm.mainet.common.dto.OrganisationDTO;
import com.abm.mainet.common.dto.TbDepartmentDTO;
import com.abm.mainet.common.entitlement.domain.RoleEntitlement;
import com.abm.mainet.common.exception.FrameworkException;
import com.abm.mainet.common.integration.dms.client.FileNetApplicationClient;
import com.abm.mainet.common.integration.dms.fileUpload.FileUploadUtility;
import com.abm.mainet.common.integration.dto.PortalEmployeeDto;
import com.abm.mainet.common.integration.dto.PortalServiceDTO;
import com.abm.mainet.common.integration.dto.TbOrganisationRest;
import com.abm.mainet.common.master.dto.DesignationBean;
import com.abm.mainet.common.master.dto.EmployeeBean;
import com.abm.mainet.common.master.dto.TbComparamDet;
import com.abm.mainet.common.master.dto.TbComparentMas;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbDeptLocation;
import com.abm.mainet.common.master.dto.TbOrgDesignation;
import com.abm.mainet.common.master.dto.TbOrganisation;
import com.abm.mainet.common.master.dto.TbServicesMst;
import com.abm.mainet.common.master.mapper.TbComparamMasServiceMapper;
import com.abm.mainet.common.master.mapper.TbDepartmentServiceMapper;
import com.abm.mainet.common.master.mapper.TbDeporgMapServiceMapper;
import com.abm.mainet.common.master.mapper.TbOrganisationAddDetServiceMapper;
import com.abm.mainet.common.master.mapper.TbOrganisationServiceMapper;
import com.abm.mainet.common.master.repository.TbOrganisationJpaRepository;
import com.abm.mainet.common.service.IEmployeeService;
import com.abm.mainet.common.service.ILocationMasService;
import com.abm.mainet.common.service.TbComparamDetService;
import com.abm.mainet.common.service.TbComparamMasService;
import com.abm.mainet.common.service.TbComparentMasService;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.RestClient;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;
import com.abm.mainet.smsemail.dto.SMSAndEmailDTO;
import com.abm.mainet.smsemail.service.ISMSAndEmailService;

/**
 * Implementation of TbOrganisationService
 */
@Service
@WebService(endpointInterface = "com.abm.mainet.common.master.service.TbOrganisationService")
public class TbOrganisationServiceImpl implements TbOrganisationService {

	@Resource
	private TbOrganisationJpaRepository tbOrganisationJpaRepository;

	@Resource
	private TbOrganisationServiceMapper tbOrganisationServiceMapper;

	@Resource
	TbOrganisationAddDetServiceMapper tbOrganisationAddDetServiceMapper;

	@Resource
	private TbDeporgMapServiceMapper tbDeporgMapServiceMapper;

	@Resource
	private TbComparamMasServiceMapper tbComparamMasServiceMapper;

	@Resource
	private ILocationMasService locationMasService;

	@Resource
	private SysmodfunctionService sysmodfunctionService;

	@Autowired
	private DesignationService designationService;

	@Resource
	private TbDepartmentService tbDepartmentService;

	@Resource
	private TbDeporgMapService tbDeporgMapService;

	@Resource
	private GroupMasterService groupMasService;

	@Resource
	private IEmployeeService employeeService;

	@Resource
	private TbOrgDesignationService tbOrgDesignationService;

	@Resource
	private TbComparamMasService tbComparamMasService;

	@Resource
	private TbComparentMasService tbComparentMasService;
	@Resource
	private DeptLocationService deptLocationService;

	@Resource
	TbServicesMstService tbServicesMstService;

	@Resource
	private TbFinancialyearService tbFinancialyearService;

	@Resource
	private TbFinancialyearOrgMapService tbFinancialyearOrgMapService;

	@Resource
	private TbDepartmentServiceMapper tbDepartmentServiceMapper;

	@Resource
	private TbComparamDetService tbComparamDetService;

	@Resource
	private TaskExecutor taskExecutor;

	@Autowired
	private ISMSAndEmailService ismsAndEmailService;

	@Autowired
	private IOrganisationProvisionService organisationProvisionService;
	
	@Autowired
	private IOrganisationDAO organisationDAO;

	private static final Logger LOG = LoggerFactory.getLogger(TbOrganisationServiceImpl.class);

	@Override
	@Transactional
	@WebMethod(exclude = true)
	public TbOrganisation create(TbOrganisation tbOrganisation, ApplicationSession appSession, UserSession userSession,
			String directory, FileNetApplicationClient fileNetApplicationClient) throws Exception {
		Organisation organisationEntity = new Organisation();
		tbOrganisation.setOrgStatus(MainetConstants.STATUS.ACTIVE);

		Set<Entry<Long, Set<File>>> entrySet = FileUploadUtility.getCurrent().getFileMap().entrySet();
		List<File> list = null;
		for (Map.Entry<Long, Set<File>> entry : entrySet) {
			list = new ArrayList<>(entry.getValue());
			Iterator<File> setFilesItr = entry.getValue().iterator();
			String tempDirPath = MainetConstants.operator.EMPTY;
			while (setFilesItr.hasNext()) {
				File file = setFilesItr.next();
				tempDirPath = directory + MainetConstants.FILE_PATH_SEPARATOR + entry.getKey().toString();

				if (entry.getKey().longValue() == 0) {
					tbOrganisation.setoLogo(tempDirPath + MainetConstants.FILE_PATH_SEPARATOR + file.getName());
				}
				try {
					fileNetApplicationClient.uploadFileList(list, tempDirPath);
				} catch (Exception e) {
					LOG.error("Exception :: ", e);
					return tbOrganisation;
				}
			}
		}
		tbOrganisationServiceMapper.mapTbOrganisationToTbOrganisationEntity(tbOrganisation, organisationEntity);
		final Organisation tbOrganisationEntitySaved = tbOrganisationJpaRepository.save(organisationEntity);
		TbOrganisation savedOrgDto = tbOrganisationServiceMapper
				.mapTbOrganisationEntityToTbOrganisation(tbOrganisationEntitySaved);

		/**
		 * this service is used to push created organization data to other application
		 * like GRP if flag is 'Y'. this flag in configured in
		 * serviceConfiguration.properties file
		 * 
		 */
		organisationProvisionService.createOrganisation(savedOrgDto);
		final Long userId = userSession.getEmployee().getEmpId();
		final Long lang = Long.valueOf(userSession.getLanguageId());

		taskExecutor.execute(() -> createDefaultPrefixes(tbOrganisationEntitySaved, userId, lang));
		try {
			createDefaults(tbOrganisationEntitySaved, userSession, appSession, tbOrganisation);
		} catch (Exception ex) {
			throw new FrameworkException("Exception in creating default data", ex);

		}
		if (MainetConstants.Common_Constant.YES.equals(appSession.getMessage("organisation.usecase.isPortal"))) {
			try {
				createPortalOrganisation(tbOrganisationEntitySaved, appSession, userSession, tbOrganisation);
			} catch (Exception e) {
				LOG.error("Exceptin while postion organisation and service details to portal :: ", e);
			}
		}
		return savedOrgDto;
	}

	@Override
	@Transactional
	public TbOrganisation findById(final Long orgid) {
		final Organisation tbOrganisationEntity = tbOrganisationJpaRepository.findOne(orgid);
		return tbOrganisationServiceMapper.mapTbOrganisationEntityToTbOrganisation(tbOrganisationEntity);
	}

	@Override
	@Transactional
	public List<TbOrganisation> findAll() {
		final List<Organisation> entities = tbOrganisationJpaRepository.findActiveOrgList();
		final List<TbOrganisation> beans = new ArrayList<>();
		for (final Organisation tbOrganisationEntity : entities) {
			beans.add(tbOrganisationServiceMapper.mapTbOrganisationEntityToTbOrganisation(tbOrganisationEntity));
		}
		return beans;
	}

	private void createPortalOrganisation(Organisation serviceOrg, ApplicationSession appSession,
			UserSession userSession, TbOrganisation tbOrganisationDTO)
			throws JsonGenerationException, JsonMappingException, URISyntaxException, IOException {

		TbOrganisationRest orgForPortal = new TbOrganisationRest();

		Employee sessionEmp = new Employee();
		sessionEmp.setEmpId(userSession.getEmployee().getEmpId());

		// set default admin employee login details for portal organization
		Employee defaultEmp = new Employee();
		getOrganisationDefaultEmployee(tbOrganisationDTO, defaultEmp);

		if (defaultEmp != null) {
			PortalEmployeeDto portalEmpDto = new PortalEmployeeDto();
			portalEmpDto.setEmpname(defaultEmp.getEmpname());
			portalEmpDto.setEmpmname(defaultEmp.getEmpmname());
			portalEmpDto.setEmplname(defaultEmp.getEmplname());
			portalEmpDto.setEmploginname(defaultEmp.getEmploginname());
			portalEmpDto.setEmpmobno(defaultEmp.getEmpmobno());
			portalEmpDto.setEmpemail(defaultEmp.getEmpemail());
			portalEmpDto.setEmppassword(defaultEmp.getEmppassword());
			orgForPortal.setPortalEmpDto(portalEmpDto);
		}

		// portal organization details
		orgForPortal.setOrgid(serviceOrg.getOrgid());
		orgForPortal.setOrgShortNm(serviceOrg.getOrgShortNm());
		orgForPortal.setONlsOrgname(serviceOrg.getONlsOrgname());
		orgForPortal.setONlsOrgnameMar(serviceOrg.getONlsOrgnameMar());
		orgForPortal.setOrgStatus(appSession.getMessage("organisation.status"));
		orgForPortal.setOrgCpdId(serviceOrg.getOrgCpdId());
		orgForPortal.setOrgCpdIdDis(serviceOrg.getOrgCpdIdDis());
		orgForPortal.setOrgCpdIdDiv(serviceOrg.getOrgCpdIdDiv());
		orgForPortal.setOrgCpdIdOst(serviceOrg.getOrgCpdIdOst());
		orgForPortal.setOrgCpdIdState(serviceOrg.getOrgCpdIdState());
		orgForPortal.setLangId((short) appSession.getLangId());
		orgForPortal.setUserId(userSession.getEmployee().getEmpId());
		orgForPortal.setUlbOrgID(serviceOrg.getUlbOrgID());
		orgForPortal.setLmoddate(new Date());

		if (serviceOrg.getOrgAddress() != null)
			orgForPortal.setOrgAddress(serviceOrg.getOrgAddress());
		if (serviceOrg.getOrgAddressMar() != null)
			orgForPortal.setOrgAddressMar(serviceOrg.getOrgAddressMar());
		if (serviceOrg.getEsdtDate() != null)
			orgForPortal.setEsdtDate(serviceOrg.getEsdtDate());
		if (serviceOrg.getOrgEmailId() != null)
			orgForPortal.setOrgEmailId(serviceOrg.getOrgEmailId());
		if (serviceOrg.getOrgTaxDedAddr() != null)
			orgForPortal.setOrgTaxDedAddr(serviceOrg.getOrgTaxDedAddr());
		if (serviceOrg.getOrgTaxDedName() != null)
			orgForPortal.setOrgTAxDedName(serviceOrg.getOrgTaxDedName());
		if (serviceOrg.getTdsAccountno() != null)
			orgForPortal.setTdsAccountno(serviceOrg.getTdsAccountno());
		if (serviceOrg.getTdsCircle() != null)
			orgForPortal.setTdsCircle(serviceOrg.getTdsCircle());
		if (serviceOrg.getTdsPanGirNo() != null)
			orgForPortal.setTdsPanGirNo(serviceOrg.getTdsPanGirNo());
		if (serviceOrg.getVatCircle() != null)
			orgForPortal.setVatCircle(serviceOrg.getVatCircle());
		if (serviceOrg.getVatDedName() != null)
			orgForPortal.setVatDedName(serviceOrg.getVatDedName());
		if (serviceOrg.getoLogo() != null)
			orgForPortal.setOLogo(serviceOrg.getoLogo());
		if (serviceOrg.getOrgGstNo() != null)
			orgForPortal.setOrgGstNo(serviceOrg.getOrgGstNo());
		if (serviceOrg.getOrgLatitude() != null)
			orgForPortal.setOrgLatitude(serviceOrg.getOrgLatitude());
		if (serviceOrg.getOrgLongitude() != null)
			orgForPortal.setOrgLongitude(serviceOrg.getOrgLongitude());
		if (serviceOrg.getTranStartDate() != null)
			orgForPortal.setTranStartDate(serviceOrg.getTranStartDate());

		// push all department services to new portal organization
		List<ServiceMaster> serviceMstLst = tbServicesMstService.findAllServicesByOrgId(serviceOrg.getOrgid());

		List<PortalServiceDTO> portalServiceLst = new ArrayList<>();
		if (!serviceMstLst.isEmpty()) {
			serviceMstLst.forEach(service -> {
				PortalServiceDTO portalService = new PortalServiceDTO();
				portalService = new PortalServiceDTO();
				portalService.setServiceId(service.getSmServiceId());
				portalService.setIsDeleted(MainetConstants.IsDeleted.ONE);
				portalService.setLmodDate(new Date());
				portalService.setServiceName(service.getSmServiceName());
				portalService.setServiceNameReg(service.getSmServiceNameMar());
				portalService.setServiceOrgId(serviceOrg.getOrgid());
				portalService.setShortName(service.getSmShortdesc());

				// set service Department Id, Department Name , Department description and
				// Department code
				TbDepartment deptEntity = tbDepartmentService.findById(service.getTbDepartment().getDpDeptid());
				portalService.setPsmDpDeptid(service.getTbDepartment().getDpDeptid());
				portalService.setPsmDpDeptCode(deptEntity.getDpDeptcode());
				portalService.setPsmDpDeptDesc(deptEntity.getDpDeptdesc());
				portalService.setPsmDpNameMar(deptEntity.getDpNameMar());
				portalServiceLst.add(portalService);
			});
		}

		if (portalServiceLst != null) {
			orgForPortal.setServiceMstList(portalServiceLst);
		}
		RestClient.postData(orgForPortal, ServiceEndpoints.ORG_POST_ORGANISATION);
	}

	@Override
	@Transactional
	@WebMethod(exclude = true)
	public TbOrganisation update(final TbOrganisation tbOrganisation, final String directry,
			final FileNetApplicationClient filenetClient) {
		final Organisation tbOrganisationEntity = tbOrganisationJpaRepository.findOrgById(tbOrganisation.getUlbOrgID());
		if ((tbOrganisation.getOrgStatus() == null) || (tbOrganisation.getOrgStatus() == MainetConstants.BLANK)) {
			tbOrganisation.setOrgStatus(MainetConstants.STATUS.ACTIVE);
		}
		List<File> list = null;
		if ((FileUploadUtility.getCurrent().getFileMap().entrySet() != null)
				&& !FileUploadUtility.getCurrent().getFileMap().entrySet().isEmpty()) {
			for (final Map.Entry<Long, Set<File>> entry : FileUploadUtility.getCurrent().getFileMap().entrySet()) {
				list = new ArrayList<>(entry.getValue());
				final Iterator<File> setFilesItr = entry.getValue().iterator();
				String tempDirPath = MainetConstants.operator.EMPTY;
				while (setFilesItr.hasNext()) {
					final File file = setFilesItr.next();
					tempDirPath = directry + MainetConstants.FILE_PATH_SEPARATOR + tbOrganisation.getOrgid().toString()
							+ MainetConstants.FILE_PATH_SEPARATOR + entry.getKey().toString();

					if ((entry.getKey().longValue() == 0) && (file != null)) {
						tbOrganisation.setoLogo((tempDirPath + MainetConstants.FILE_PATH_SEPARATOR + file.getName()));
					} else {
						tbOrganisation.setoLogo(tbOrganisationEntity.getoLogo());
					}

					try {
						filenetClient.uploadFileList(list, tempDirPath);
					} catch (final Exception e) {
						LOG.error("Exception :: ", e);
						return tbOrganisation;
					}
				}
			}
		} else {

			tbOrganisation.setoLogo(null);
		}
		flushServerFolder();

		tbOrganisationServiceMapper.mapTbOrganisationToTbOrganisationEntity(tbOrganisation, tbOrganisationEntity);
		final Organisation tbOrganisationEntitySaved = tbOrganisationJpaRepository.save(tbOrganisationEntity);

		final ApplicationSession applicationSession = ApplicationSession.getInstance();

		if (MainetConstants.Common_Constant.YES
				.equals(applicationSession.getMessage("organisation.usecase.isPortal"))) {
			TbOrganisationRest organisationRest = new TbOrganisationRest();
			// String absoluteUri =
			// applicationSession.getMessage("mainet.portal.absolutepath.url");
			// String completeUri = null;
			// completeUri = absoluteUri + ServiceEndpoints.ORG_POST_UPDATE_ORGANISATION;
			org.springframework.beans.BeanUtils.copyProperties(tbOrganisationEntitySaved, organisationRest);
			try {
				RestClient.postData(organisationRest, ServiceEndpoints.ORG_POST_UPDATE_ORGANISATION);
			} catch (Exception exception) {
				LOG.error("While Calling Rest call Method " + exception);
			}
		}
		Date tranDate = tbOrganisation.getTranStartDate();
		final Calendar cal = new GregorianCalendar();
		cal.setTime(tranDate);

		if (tranDate != null) {
			Date minFinYear = tbFinancialyearService.getMinFinancialYear();
			if (minFinYear != null) {
				final Calendar minCal = new GregorianCalendar();
				minCal.setTime(minFinYear);
				createFinYears(cal.get(Calendar.YEAR), minCal.get(Calendar.YEAR), tbOrganisationEntitySaved.getOrgid());
			} else {
				createFinYears(cal.get(Calendar.YEAR), cal.get(Calendar.YEAR) + 1,
						tbOrganisationEntitySaved.getOrgid());
			}
		}

		if (tbOrganisationEntitySaved.getDefaultStatus().equals(MainetConstants.Organisation.SUPER_ORG_STATUS)) {
			ApplicationSession.getInstance().setSuperUserOrganization(tbOrganisationEntitySaved);
		}
		return tbOrganisationServiceMapper.mapTbOrganisationEntityToTbOrganisation(tbOrganisationEntitySaved);
	}

	@Override
	@Transactional
	@WebMethod(exclude = true)
	public void delete(final Long orgid) {
		final Organisation tbOrganisationEntity = tbOrganisationJpaRepository.findOne(orgid);
		tbOrganisationEntity.setOrgStatus(MainetConstants.STATUS.INACTIVE);
		tbOrganisationJpaRepository.save(tbOrganisationEntity);
	}

	public TbOrganisationJpaRepository getTbOrganisationJpaRepository() {
		return tbOrganisationJpaRepository;
	}

	public void setTbOrganisationJpaRepository(final TbOrganisationJpaRepository tbOrganisationJpaRepository) {
		this.tbOrganisationJpaRepository = tbOrganisationJpaRepository;
	}

	public TbOrganisationServiceMapper getTbOrganisationServiceMapper() {
		return tbOrganisationServiceMapper;
	}

	public void setTbOrganisationServiceMapper(final TbOrganisationServiceMapper tbOrganisationServiceMapper) {
		this.tbOrganisationServiceMapper = tbOrganisationServiceMapper;
	}

	@Override
	@Transactional
	@WebMethod(exclude = true)
	public boolean defaultexist(final String defaultStatus) {
		final List<Organisation> list = tbOrganisationJpaRepository.defaultexist(defaultStatus);
		if ((list != null) && !list.isEmpty()) {
			return true;
		}
		return false;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.web.masters.organisation.business.service.
	 * TbOrganisationService#exist(java.lang.String, java.lang.Long,
	 * java.lang.String, java.lang.String)
	 */
	@Override
	@Transactional
	@WebMethod(exclude = true)
	public List<String> exist(final String mode, final Long orgId, final Long ulbOrgId, final String orgName,
			final String orgNameMar, final ApplicationSession appSession) {

		final String orgNameNew = orgName.trim();
		final String orgNameRegNew = orgNameMar.trim();
		final List<String> errorList = new ArrayList<>();

		final Organisation ulbOrgIdObj = tbOrganisationJpaRepository.findOrgById(ulbOrgId);
		final Organisation orgNameObj = tbOrganisationJpaRepository.findData(orgNameNew);
		final Organisation orgNameRegObj = tbOrganisationJpaRepository.findDataByNameReg(orgNameRegNew);

		if (mode.equalsIgnoreCase("create")) {
			if (ulbOrgIdObj != null) {
				errorList.add(appSession.getMessage("tbOrganisation.error.orgIdExist"));
			}
			if (orgNameObj != null) {
				errorList.add(appSession.getMessage("tbOrganisation.error.orgNameExist"));
			}
			if (orgNameRegObj != null) {
				errorList.add(appSession.getMessage("tbOrganisation.error.orgNameRegExist"));
			}
		} else {
			if (ulbOrgIdObj != null) {
				if (!orgId.equals(ulbOrgIdObj.getOrgid())) {
					errorList.add(appSession.getMessage("tbOrganisation.error.orgIdExist"));
				}
			}
			if (orgNameObj != null) {
				if (!orgId.equals(orgNameObj.getOrgid())) {
					errorList.add(appSession.getMessage("tbOrganisation.error.orgNameExist"));
				}
			}
			if (orgNameRegObj != null) {
				if (!orgId.equals(orgNameRegObj.getOrgid())) {
					errorList.add(appSession.getMessage("tbOrganisation.error.orgNameRegExist"));
				}
			}
		}
		return errorList;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.web.masters.organisation.business.service.
	 * TbOrganisationService#findAllOrganization(java.lang.String)
	 */
	@Override
	@Transactional(readOnly = true)
	@WebMethod(exclude = true)
	public List<Object[]> findAllOrganization(final String orgStatus) {
		final List<Object[]> list = tbOrganisationJpaRepository.findAllOrganization(orgStatus);
		return list;
	}

	@Override
	@Transactional
	public Organisation findDefaultOrganisation() {
		final Organisation organisation = tbOrganisationJpaRepository.defaultOrganisation();
		return organisation;
	}

	@Override
	@Transactional
	@WebMethod(exclude = true)
	public Designation createDefaultDesignation(final String dsgName, final String shortCode)
			throws IllegalAccessException, InvocationTargetException {

		final Designation desgEntity = null;
		DesignationBean newDesg = new DesignationBean();
		newDesg.setDsgname(dsgName);
		newDesg.setDsgshortname(shortCode);
		newDesg.setIsdeleted(MainetConstants.Common_Constant.ZERO_SEC);
		newDesg.setDsgDefault(MainetConstants.Common_Constant.YES);
		newDesg = designationService.create(newDesg);
		BeanUtils.copyProperties(desgEntity, newDesg);
		return desgEntity;
	}

	private void createDefaults(final Organisation tbOrganisationEntitySaved, final UserSession userSession,
			final ApplicationSession appSession, TbOrganisation tbOrganisationDTO)
			throws IllegalAccessException, InvocationTargetException {

		// UserSession details like Session Employee, Organization and Session Language
		// id.
		final Employee sessionEmp = userSession.getEmployee();
		final int sessionLangId = userSession.getLanguageId();
		final Organisation orgSession = UserSession.getCurrent().getOrganisation();

		// Create default Location Details
		final LocationMasEntity tbLocationMasEntity = new LocationMasEntity();
		tbLocationMasEntity.setLocNameEng(appSession.getMessage("location.LocNameEng"));
		tbLocationMasEntity.setLocNameReg(appSession.getMessage("location.LocNameReg"));
		tbLocationMasEntity.setLocArea(appSession.getMessage("location.LocArea"));
		tbLocationMasEntity.setLocAreaReg(appSession.getMessage("location.LocArea"));
		tbLocationMasEntity.setLocAddress(appSession.getMessage("location.LocAddress"));
		tbLocationMasEntity.setLocAddressReg(appSession.getMessage("location.LocAddress"));
		tbLocationMasEntity.setDeptLoc(MainetConstants.CommonConstants.CHAR_Y);
		tbLocationMasEntity.setUserId(sessionEmp.getEmpId());
		tbLocationMasEntity.setLangId(sessionLangId);
		tbLocationMasEntity.setLocSource(appSession.getMessage("location.LocSource"));
		tbLocationMasEntity.setLocActive(MainetConstants.Common_Constant.YES);
		tbLocationMasEntity.setLmoddate(new Date());
		tbLocationMasEntity.setOrganisation(tbOrganisationEntitySaved);
		LocationMasEntity tbLocationMasEntitySaved = locationMasService.createDefaultLocationMas(tbLocationMasEntity,
				tbOrganisationEntitySaved);

		// fetch default System module Functional details.
		final List<SystemModuleFunction> sysModFunctionList = sysmodfunctionService.findBySmfaction(
				appSession.getMessage("systemmodulefunction.smfaction"),
				appSession.getMessage("systemmodulefunction.smfname"));

		// create default Group Master
		final GroupMaster groupMasEntity = new GroupMaster();
		groupMasEntity.setOrgId(tbOrganisationEntitySaved);
		groupMasEntity.setGrCode(appSession.getMessage("groupmaster.GrCode"));
		groupMasEntity.setGrDescEng(appSession.getMessage("groupmaster.GrDescEng"));
		groupMasEntity.setGrDescReg(appSession.getMessage("groupmaster.GrDescReg"));
		groupMasEntity.setGrStatus(MainetConstants.Common_Constant.ACTIVE_FLAG);
		groupMasEntity.setEntryDate(new Date());
		groupMasEntity.setUserId(sessionEmp);
		groupMasEntity.setLgIpMac(sessionEmp.getEmppiservername());

		// Prepare RoleEntitlement details for default group master.
		RoleEntitlement roleEntitlement = null;
		final Set<RoleEntitlement> entitlementSet = new HashSet<>();
		for (final SystemModuleFunction sysmodFunction : sysModFunctionList) {
			roleEntitlement = new RoleEntitlement();
			if (sysmodFunction.getModuleFunction() == null) {
				roleEntitlement.setParentId(Long.valueOf(0));
			} else {
				roleEntitlement.setParentId(Long.valueOf(1));
			}
			roleEntitlement.setEntitle(sysmodFunction);
			roleEntitlement.setIsActive(MainetConstants.Common_Constant.ZERO_SEC);
			roleEntitlement.setOrganisation(tbOrganisationEntitySaved);
			roleEntitlement.setCreatedBy(sessionEmp.getEmpId());
			roleEntitlement.setCreatedDate(new Date());
			roleEntitlement.setGroupMaster(groupMasEntity);
			entitlementSet.add(roleEntitlement);

		}
		// Set RoleEntitlement details for default group master.
		groupMasEntity.setEntitlements(entitlementSet);

		// Create Default Group master with RoleEntitlement
		GroupMaster groupMasterSaved = groupMasService.createGroupMaster(groupMasEntity, tbOrganisationEntitySaved);

		// set default employee details
		final Employee employee = new Employee();
		employee.setUpdatedBy(sessionEmp.getEmpId());
		employee.setLmodDate(new Date());
		employee.setUserId(sessionEmp.getEmpId());
		employee.setLgIpMac(sessionEmp.getEmppiservername());
		employee.setIsDeleted(MainetConstants.Common_Constant.ZERO_SEC);
		employee.setIsuploaded(MainetConstants.Common_Constant.YES);
		employee.setAutMob(MainetConstants.Common_Constant.YES);
		employee.setAutEmail(MainetConstants.Common_Constant.YES);
		employee.setAuthStatus(MainetConstants.STATUS.ACTIVE);

		getOrganisationDefaultEmployee(tbOrganisationDTO, employee);
		final Calendar now = Calendar.getInstance();
		now.add(Calendar.DATE, 1);
		final Date date = now.getTime();
		employee.setEmpexpiredt(date);
		employee.setUpdatedDate(new Date());

		// Fetch Default Designation
		Designation designation = designationService.findByName(appSession.getMessage("organisation.designation"));
		if (!designation.equals(null)) {
			employee.setDesignation(designation);
		} else {
			// Default Values for Designation
			designation = createDefaultDesignation(appSession.getMessage("organisation.designation"),
					appSession.getMessage("default.designation.shortcode"));
			employee.setDesignation(designation);
		}

		// set default employee location (Ex.Head Office)
		employee.setTbLocationMas(tbLocationMasEntitySaved);

		// Fetch Default CFC Department
		Department department = tbDepartmentService
				.findDepartmentByCode(appSession.getMessage("organisation.department"));

		// check if CFC department is null than create new CFC department else map that
		// department with Organization
		if (department == null) {
			// create CFC department
			final TbDepartmentDTO cfcDept = new TbDepartmentDTO();
			cfcDept.setDpDeptcode(appSession.getMessage("organisation.department"));
			cfcDept.setDpDeptDesc(appSession.getMessage("organisation.department"));
			cfcDept.setDpNameMar(appSession.getMessage("organisation.department"));
			department = tbDepartmentService.createDefaultDepartment(userSession.getEmployee().getEmpId(), cfcDept,
					tbOrganisationEntitySaved.getOrgid(), userSession.getLanguageId());
		} else {
			// map CFC department with organization
			final DeptOrgMap deptOrgMap = new DeptOrgMap();
			deptOrgMap.setMapStatus(MainetConstants.STATUS.ACTIVE);
			deptOrgMap.setLangId(userSession.getLanguageId());
			deptOrgMap.setLmoddate(new Date());
			deptOrgMap.setUpdatedBy(Integer.parseInt(userSession.getEmployee().getEmpId().toString()));
			deptOrgMap.setUpdatedDate(new Date());
			deptOrgMap.setDepartment(department);
			deptOrgMap.setOrgid(tbOrganisationEntitySaved.getOrgid());
			deptOrgMap.setUserId(userSession.getEmployee().getEmpId().intValue());
			deptOrgMap.setLgIpMac(sessionEmp.getEmppiservername());
			tbDeporgMapService.createDefaultDepOrgMap(deptOrgMap);
		}

		// Map CFC department with default Location
		createDepLocMapping(department.getDpDeptid(), tbOrganisationEntitySaved, tbLocationMasEntitySaved.getLocId(),
				userSession);

		// Fetch Default Common Department
		Department comDepartment = tbDepartmentService
				.findDepartmentByCode(appSession.getMessage("org.commom.dept.deptCode"));

		// check if Common department is null than create new Common department else map
		// that department with Organization
		if (comDepartment == null) {
			// create common department
			final TbDepartmentDTO comDept = new TbDepartmentDTO();
			comDept.setDpDeptcode(appSession.getMessage("org.commom.dept.deptCode"));
			comDept.setDpDeptDesc(appSession.getMessage("org.commom.dept.deptDesc"));
			comDept.setDpNameMar(appSession.getMessage("org.commom.dept.deptDesc"));
			comDepartment = tbDepartmentService.createDefaultDepartment(userSession.getEmployee().getEmpId(), comDept,
					tbOrganisationEntitySaved.getOrgid(), userSession.getLanguageId());
		} else {

			// map common department with organization
			final DeptOrgMap deptOrg = new DeptOrgMap();
			deptOrg.setMapStatus(MainetConstants.STATUS.ACTIVE);
			deptOrg.setLangId(userSession.getLanguageId());
			deptOrg.setLmoddate(new Date());
			deptOrg.setUpdatedBy(Integer.parseInt(userSession.getEmployee().getEmpId().toString()));
			deptOrg.setUpdatedDate(new Date());
			deptOrg.setDepartment(comDepartment);
			deptOrg.setOrgid(tbOrganisationEntitySaved.getOrgid());
			deptOrg.setUserId(userSession.getEmployee().getEmpId().intValue());
			deptOrg.setLgIpMac(sessionEmp.getEmppiservername());
			tbDeporgMapService.createDefaultDepOrgMap(deptOrg);
		}

		// Map common department with default Location
		createDepLocMapping(comDepartment.getDpDeptid(), tbOrganisationEntitySaved, tbLocationMasEntitySaved.getLocId(),
				userSession);
		// create Organization-Designation Mapping
		final TbOrgDesignation tbOrgDesignationMap = new TbOrgDesignation();
		tbOrgDesignationMap.setUserId(sessionEmp.getUserId());
		tbOrgDesignationMap.setUpdatedDate(new Date());
		tbOrgDesignationMap.setUpdatedBy(sessionEmp.getEmpId());
		tbOrgDesignationMap.setOrgid(tbOrganisationEntitySaved.getOrgid());
		tbOrgDesignationMap.setLmoddate(new Date());
		tbOrgDesignationMap.setDsgid(designation.getDsgid());
		final List<TbOrgDesignation> tbOrgDesignationMapList = new ArrayList<>();
		tbOrgDesignationMapList.add(tbOrgDesignationMap);
		tbOrgDesignationService.createDesgOrgData(tbOrgDesignationMap, tbOrgDesignationMapList);

		// Fetch All Services by default organization details
		final List<TbServicesMst> serviceList = tbServicesMstService.findAllServiceListByOrgId(orgSession.getOrgid());

		// get Activeness Lookup Id
		final LookUp activenessLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
				PrefixConstants.IsLookUp.INACTIVE, PrefixConstants.LookUp.ACN, sessionLangId, orgSession);
		final Long activenessLookupId = activenessLookup.getLookUpId();

		// Create all services of Super OrganizationC.

		List<TbServicesMst> serviceMstList = new ArrayList<>();
		if ((serviceList != null) && !serviceList.isEmpty()) {

			serviceList.forEach(bean -> {
				TbServicesMst serviceBean = new TbServicesMst();
				BeanUtils.copyProperties(bean, serviceBean);
				serviceBean.setOrgid(tbOrganisationEntitySaved.getOrgid());

				// set service id as null for creating new service
				serviceBean.setSmServiceId(null);

				// set service created date
				serviceBean.setLmoddate(new Date());

				// set service updated day as null for new services
				serviceBean.setUpdatedDate(null);

				// set service status as inactive
				serviceBean.setSmServActive(activenessLookupId);

				// set service code description in Upper case
				serviceBean.setSmShortdesc(bean.getSmShortdesc().toUpperCase());
				serviceBean.setUserId(sessionEmp.getEmpId());
				serviceBean.setLangId(Long.valueOf(sessionLangId));
				serviceMstList.add(serviceBean);
			});
			tbServicesMstService.createOrganisationServices(serviceMstList);

		}

		// create Financial year
		Date tranDate = tbOrganisationEntitySaved.getTranStartDate();
		final Calendar cal = new GregorianCalendar();
		cal.setTime(tranDate);

		if (tranDate != null) {
			int yrFrom = 0;
			int yrTo = 0;
			Date minFinYear = tbFinancialyearService.getMinFinancialYear();
			if (minFinYear != null) {
				final Calendar minCal = new GregorianCalendar();
				minCal.setTime(minFinYear);
				if (cal.get(Calendar.YEAR) >= minCal.get(Calendar.YEAR)) {
					yrFrom = cal.get(Calendar.YEAR);
					yrTo = Utility.getCurrentYear() + 1;
				} else {
					yrFrom = cal.get(Calendar.YEAR);
					yrTo = minCal.get(Calendar.YEAR);
				}
				createFinYears(yrFrom, yrTo, tbOrganisationEntitySaved.getOrgid());
			} else {
				createFinYears(cal.get(Calendar.YEAR), cal.get(Calendar.YEAR) + 1,
						tbOrganisationEntitySaved.getOrgid());
			}
		}

		// Save default employee
		employee.setTbDepartment(department);
		employee.setOrganisation(tbOrganisationEntitySaved);
		employee.setGmid(groupMasterSaved.getGmId());
		employeeService.saveEmployee(employee);

		// send SMS to default employee
		final SMSAndEmailDTO dto = new SMSAndEmailDTO();
		dto.setEmail(employee.getEmpemail());
		dto.setMobnumber(employee.getEmpmobno());
		dto.setUserName(employee.getEmploginname());
		dto.setAppName(employee.getEmpname() + " " + employee.getEmplname());
		dto.setOrganizationName(userSession.getOrganisation().getONlsOrgname());
		int langId = Utility.getDefaultLanguageId(userSession.getOrganisation());
		// Added Changes As per told by Rajesh Sir For Sms and Email
		dto.setUserId(sessionEmp.getEmpId());
		ismsAndEmailService.sendEmailSMS(MainetConstants.DEPT_SHORT_NAME.CFC_CENTER,
				MainetConstants.SMS_EMAIL_URL.REGISTRATION, PrefixConstants.SMS_EMAIL_ALERT_TYPE.APPROVAL, dto,
				userSession.getOrganisation(), langId);
	}

	private void getOrganisationDefaultEmployee(TbOrganisation tbOrganisationDTO, final Employee employee) {
		// if already registered user than save already encrypted password
		if (MainetConstants.Common_Constant.YES.equals(tbOrganisationDTO.getAlreadyRegisteredUser())) {
			EmployeeBean regiEmp = employeeService
					.getActiveEmployeeByEmpMobileNo(tbOrganisationDTO.getDefaultUserMobi().trim()).get(0);

			// set already registered employee details
			employee.setEmppassword(regiEmp.getEmppassword());
			employee.setEmpname(regiEmp.getEmpname());
			employee.setEmpmname(regiEmp.getEmpmname());
			employee.setEmplname(regiEmp.getEmplname());
			employee.setEmposloginname(regiEmp.getEmposloginname());
			employee.setEmploginname(regiEmp.getEmploginname());
			employee.setCpdTtlId(regiEmp.getCpdTtlId());
			employee.setEmpdob(regiEmp.getEmpdob());
			employee.setEmpGender(regiEmp.getEmpGender());
			employee.setEmpAddress(regiEmp.getEmpAddress());
			employee.setEmpAddress1(regiEmp.getEmpAddress1());
			employee.setPanNo(regiEmp.getPanNo());
			employee.setEmppincode(regiEmp.getEmppincode());

		} else {
			employee.setEmpname(tbOrganisationDTO.getDefaultLoginName());
			employee.setEmplname(tbOrganisationDTO.getDefaultLoginName());
			employee.setEmposloginname(tbOrganisationDTO.getDefaultLoginName());
			employee.setEmploginname(tbOrganisationDTO.getDefaultLoginName());

			// if new user than save password after encryption
			employee.setEmppassword(Utility.encryptPassword(tbOrganisationDTO.getDefaultLoginName(),
					tbOrganisationDTO.getDefaultUserNewPass()));
		}

		employee.setEmpmobno(tbOrganisationDTO.getDefaultUserMobi().trim());
		employee.setEmpemail(tbOrganisationDTO.getDefaultUserEmail());
	}

	private void createDepLocMapping(final Long deptId, final Organisation tbOrganisationEntitySaved, final Long locId,
			final UserSession userSession) {
		final TbDeptLocation deptLocBean = new TbDeptLocation();
		deptLocBean.setDpDeptid(deptId);
		deptLocBean.setOrgid(tbOrganisationEntitySaved.getOrgid());
		deptLocBean.setUserId(userSession.getEmployee().getEmpId());
		deptLocBean.setLangId(Long.valueOf(userSession.getLanguageId()));
		deptLocBean.setUpdatedBy(userSession.getEmployee().getEmpId());
		deptLocBean.setUpdatedDate(new Date());
		deptLocBean.setLocId(locId);
		deptLocBean.setIsdeleted(MainetConstants.Common_Constant.ZERO_SEC);
		deptLocationService.create(deptLocBean);
	}

	private void createDefaultPrefixes(final Organisation tbOrganisationEntitySaved, final Long userId,
			final Long lang) {
		List<TbComparamMasEntity> tbComparamMasEntity = null;
		Long cpmId = null;
		List<TbComparamDetEntity> tbComparamDetlist = null;
		TbComparamDet tbComparamBean = null;
		tbComparamMasEntity = tbComparamMasService.findAllByCpmReplicateFlag(MainetConstants.Common_Constant.YES,
				MainetConstants.Common_Constant.NO);
		for (final TbComparamMasEntity tbCmprm : tbComparamMasEntity) {
			cpmId = tbCmprm.getCpmId();
			tbComparamDetlist = tbComparamDetService.findCmprmDetDataByCpmId(cpmId);
			for (final TbComparamDetEntity tbComparamDetEntityList : tbComparamDetlist) {
				tbComparamBean = new TbComparamDet();
				tbComparamBean.setOrgid(tbOrganisationEntitySaved.getOrgid());
				tbComparamBean.setCpdDefault(tbComparamDetEntityList.getCpdDefault());
				tbComparamBean.setCpdDesc(tbComparamDetEntityList.getCpdDesc());
				tbComparamBean.setCpdStatus(tbComparamDetEntityList.getCpdStatus());
				tbComparamBean.setCpdDescMar(tbComparamDetEntityList.getCpdDescMar());
				tbComparamBean.setCpdValue(tbComparamDetEntityList.getCpdValue());
				tbComparamBean.setUserId(userId);
				tbComparamBean.setLmoddate(new Date());
				tbComparamBean.setLangId(lang);
				tbComparamBean.setCpmId(cpmId);
				tbComparamBean.setUpdatedBy(userId);
				tbComparamBean.setUpdatedDate(new Date());
				tbComparamDetService.create(tbComparamBean);
			}

		}
		tbComparamMasEntity = tbComparamMasService.findAllByCpmReplicateFlag(MainetConstants.Common_Constant.YES,
				PrefixConstants.LookUp.HIERARCHICAL);
		List<TbComparentMas> tbComparentMasList = null;
		TbComparentMasEntity tbComparentMasEntity = null;
		for (final TbComparamMasEntity tbComparam : tbComparamMasEntity) {
			cpmId = tbComparam.getCpmId();
			tbComparentMasList = tbComparentMasService.findComparentMasDataByCpmId(cpmId);
			for (final TbComparentMas tbComparentMas : tbComparentMasList) {
				tbComparentMasEntity = new TbComparentMasEntity();
				tbComparentMasEntity.setTbComparamMas(tbComparam);
				tbComparentMasEntity.setComDesc(tbComparentMas.getComDesc());
				tbComparentMasEntity.setComDescMar(tbComparentMas.getComDescMar());
				tbComparentMasEntity.setComValue(tbComparentMas.getComValue());
				tbComparentMasEntity.setComLevel(tbComparentMas.getComLevel());
				tbComparentMasEntity.setOrgid(tbOrganisationEntitySaved.getOrgid());
				tbComparentMasEntity.setUserId(userId);
				tbComparentMasEntity.setLangId(lang);
				tbComparentMasEntity.setLmoddate(new Date());
				tbComparentMasEntity.setUpdatedBy(userId);
				tbComparentMasEntity.setUpdatedDate(new Date());

				tbComparentMasEntity.setComStatus(tbComparentMas.getComStatus());
				tbComparentMasService.create(tbComparentMasEntity);
			}
		}

	}

	@Override
	@Transactional
	@WebMethod(exclude = true)
	public Organisation findByShortCode(final String orgShortCode) {
		return tbOrganisationJpaRepository.findByShortCode(orgShortCode);
	}

	public void flushServerFolder() {
		try {
			final String path = FileUploadUtility.getCurrent().getExistingFolderPath();
			if (path != null) {
				final File cacheFolderStructure = new File(FileUploadUtility.getCurrent().getExistingFolderPath());
				FileUtils.deleteDirectory(cacheFolderStructure);
			}
		} catch (final Throwable e) {
			LOG.error("Exception :: ", e);
		}
	}

	public void createFinYears(int yrFrom, int yrTo, Long orgId) {
		FinancialYear isFinYearExist = null;

		for (int i = yrFrom; i < yrTo; i++) {
			Calendar cal1 = new GregorianCalendar(i, 3, 1);
			Date crntDte = cal1.getTime();
			isFinYearExist = tbFinancialyearService.isFaYearExists(Utility.dateToString(crntDte));
			if (isFinYearExist != null) {
				tbFinancialyearService.create(isFinYearExist, orgId);
			} else {
				FinancialYear finYear = new FinancialYear();
				Calendar cal2 = new GregorianCalendar(i + 1, 2, 31);
				finYear.setFaFromDate(cal1.getTime());
				finYear.setFaToDate(cal2.getTime());
				finYear.setCreatedDate(new Date());
				finYear.setLgIpMac(Utility.getMacAddress());
				finYear.setCreatedBy(UserSession.getCurrent().getEmployee().getEmpId());
				tbFinancialyearService.create(finYear, orgId);
			}
		}
	}
	
	@Transactional
	@Override
	@POST
	@Path("/getAllOrganisation/{deptCode}")
	@Produces(MediaType.APPLICATION_JSON)
	public List<OrganisationDTO> getOrganizationActiveWithWorkflow(@PathParam(value = "deptCode") String deptCode) {
		List<OrganisationDTO> organisationList = new ArrayList<>();
		Long deptId = tbDepartmentService.getDepartmentIdByDeptCode(deptCode);
		if (deptId != null) {
			List<Object[]> entityList=new ArrayList<>();
			try {
			entityList = organisationDAO.getOrganizationActiveWithWorkflow(deptId);
			if (entityList != null) {
				for (Object[] obj : entityList) {
					OrganisationDTO dto = new OrganisationDTO();
					if (obj[0] != null)
					dto.setOrgid((Long) obj[0]);
					if (obj[1] != null)
					dto.setONlsOrgname(obj[1].toString());
					if (obj[2] !=null)
					dto.setONlsOrgnameMar(obj[2].toString());
					organisationList.add(dto);
				}
			}
			}
			catch (Exception e) {
				LOG.error("record not found for getOrganizationActiveWithWorkflow   "+ e);	
			}
		}
		return organisationList;
	}
	
	@Override
	@Transactional
	public List<TbOrganisation> fetchOrgListBasedOnLoginOrg() {
		final List<Organisation> entities = tbOrganisationJpaRepository.findActiveOrgList();
		final List<TbOrganisation> beans = new ArrayList<>();
		for (final Organisation tbOrganisationEntity : entities) {
			   String orgShortName = UserSession.getCurrent().getOrganisation().getOrgShortNm();
			   if (orgShortName.equals("IA") && tbOrganisationEntity.getOrgShortNm().equals("CBBO"))
				   beans.add(tbOrganisationServiceMapper.mapTbOrganisationEntityToTbOrganisation(tbOrganisationEntity));
	        	else if (orgShortName.equals("CBBO") && tbOrganisationEntity.getOrgShortNm().equals("FPO"))
	        		beans.add(tbOrganisationServiceMapper.mapTbOrganisationEntityToTbOrganisation(tbOrganisationEntity));
	        	else if
			   (orgShortName.equals(MainetConstants.Sfac.NPMA))
		        		beans.add(tbOrganisationServiceMapper.mapTbOrganisationEntityToTbOrganisation(tbOrganisationEntity));
		   }
		return beans;
	}
}