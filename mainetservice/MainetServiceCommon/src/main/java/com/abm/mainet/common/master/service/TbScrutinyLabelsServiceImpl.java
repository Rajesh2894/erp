/*
 * Created on 21 Mar 2016 ( Time 19:07:24 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.cfc.scrutiny.domain.TbScrutinyLabelsEntity;
import com.abm.mainet.cfc.scrutiny.domain.TbScrutinyLabelsEntityKey;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.ScrutinyLabelsDto;
import com.abm.mainet.common.domain.ScrutinyServiceDto;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.domain.TbScrutinyLabels;
import com.abm.mainet.common.master.mapper.TbScrutinyLabelsServiceMapper;
import com.abm.mainet.common.master.mapper.TbServicesMstServiceMapper;
import com.abm.mainet.common.master.repository.TbScrutinyLabelsJpaRepository;
import com.abm.mainet.common.service.ServiceMasterService;
import com.abm.mainet.common.utility.ApplicationContextProvider;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.SeqGenFunctionUtility;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;

/**
 * Implementation of TbScrutinyLabelsService
 */
@Component
@Transactional
public class TbScrutinyLabelsServiceImpl implements TbScrutinyLabelsService {

	@Resource
	private TbScrutinyLabelsJpaRepository tbScrutinyLabelsJpaRepository;

	@Resource
	private TbScrutinyLabelsServiceMapper tbScrutinyLabelsServiceMapper;

	@Resource
	private TbServicesMstServiceMapper tbServicesMstServiceMapper;

	@Autowired
	SeqGenFunctionUtility seqGenFunctionUtility;

	@PersistenceContext
	protected EntityManager entityManager;

	public static final String TB_SCRUTINY_LABELS = "TB_SCRUTINY_LABELS";
	public static final String SL_LABEL_ID = "SL_LABEL_ID";

	@Override
	public TbScrutinyLabels update(final TbScrutinyLabels tbScrutinyLabels) {
		final TbScrutinyLabelsEntityKey id = new TbScrutinyLabelsEntityKey(tbScrutinyLabels.getSlLabelId(),
				tbScrutinyLabels.getOrgid());
		final TbScrutinyLabelsEntity tbScrutinyLabelsEntity = tbScrutinyLabelsJpaRepository.findOne(id);
		tbScrutinyLabelsServiceMapper.mapTbScrutinyLabelsToTbScrutinyLabelsEntity(tbScrutinyLabels,
				tbScrutinyLabelsEntity);
		final TbScrutinyLabelsEntity tbScrutinyLabelsEntitySaved = tbScrutinyLabelsJpaRepository
				.save(tbScrutinyLabelsEntity);
		return tbScrutinyLabelsServiceMapper.mapTbScrutinyLabelsEntityToTbScrutinyLabels(tbScrutinyLabelsEntitySaved);
	}

	@Override
	public void delete(final Long slLabelId, final Long orgid) {
		final TbScrutinyLabelsEntityKey id = new TbScrutinyLabelsEntityKey(slLabelId, orgid);
		tbScrutinyLabelsJpaRepository.delete(id);
	}

	public TbScrutinyLabelsJpaRepository getTbScrutinyLabelsJpaRepository() {
		return tbScrutinyLabelsJpaRepository;
	}

	public void setTbScrutinyLabelsJpaRepository(final TbScrutinyLabelsJpaRepository tbScrutinyLabelsJpaRepository) {
		this.tbScrutinyLabelsJpaRepository = tbScrutinyLabelsJpaRepository;
	}

	public TbScrutinyLabelsServiceMapper getTbScrutinyLabelsServiceMapper() {
		return tbScrutinyLabelsServiceMapper;
	}

	public void setTbScrutinyLabelsServiceMapper(final TbScrutinyLabelsServiceMapper tbScrutinyLabelsServiceMapper) {
		this.tbScrutinyLabelsServiceMapper = tbScrutinyLabelsServiceMapper;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.
	 * TbScrutinyLabelsService#getAllServices(java.lang.Long)
	 */
	@Override
	public List<ScrutinyServiceDto> getAllServices(final Long orgId) {
		List<Object> result = new ArrayList<Object>();
		Organisation org = new Organisation();
		org.setOrgid(orgId);
		if (orgId != null && (Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_SKDCL)) || (Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_PSCL))) {
			result = tbScrutinyLabelsJpaRepository.getAllSKDCLServices(orgId);
		} else {
			result = tbScrutinyLabelsJpaRepository.getAllServices(orgId);
		}

		final List<ScrutinyServiceDto> beans = new ArrayList<>();

		final int listSize = result.size();
		ScrutinyServiceDto scrutinyServiceDto = null;
		for (int iCounter = 0; iCounter < listSize; iCounter++) {
			final Object[] obj = (Object[]) result.get(iCounter);
			scrutinyServiceDto = new ScrutinyServiceDto();
			if (obj[0] != null) {
				scrutinyServiceDto.setSmServiceId(Long.parseLong(obj[0].toString()));
			}
			if (obj[1] != null) {
				scrutinyServiceDto.setSmServiceName(obj[1].toString());
			}
			if (obj[2] != null) {
				scrutinyServiceDto.setSmServiceNameMar(obj[2].toString());
			}
			beans.add(scrutinyServiceDto);
		}
		return beans;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.
	 * TbScrutinyLabelsService
	 * #createScrutinyLabel(com.abm.mainetservice.web.masters.scrutinylabels.bean.
	 * ScrutinyLabelsDto)
	 */
	@Override
	public String createScrutinyLabel(final ScrutinyLabelsDto scrutinyLabelsDto,
			final List<TbScrutinyLabels> scrutinyLabelsList) {
		TbScrutinyLabelsEntity scrutinyLabelsEntity = null;

		final Date curDate = new Date();
		final long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
		for (final TbScrutinyLabels scrutinyLabels : scrutinyLabelsList) {
			scrutinyLabelsEntity = new TbScrutinyLabelsEntity();
			final long slLabelId = seqGenFunctionUtility.generateSequenceNo(MainetConstants.CommonConstants.COM,
					TB_SCRUTINY_LABELS, SL_LABEL_ID, orgId, null, null);
			scrutinyLabels.setSlLabelId(slLabelId);
			scrutinyLabels.setLmoddate(curDate);
			scrutinyLabels.setUserId(UserSession.getCurrent().getEmployee().getEmpId());
			scrutinyLabels.setOrgid(UserSession.getCurrent().getOrganisation().getOrgid());
			scrutinyLabels.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
			scrutinyLabels.setSlActiveStatus(MainetConstants.FlagA);

			tbScrutinyLabelsServiceMapper.mapTbScrutinyLabelsToTbScrutinyLabelsEntity(scrutinyLabels,
					scrutinyLabelsEntity);
			scrutinyLabelsEntity.setScrutinyId(scrutinyLabelsDto.getScrutinyLabels().getScrutinyId());
			// added for US#113590
			if (scrutinyLabelsDto != null && scrutinyLabelsDto.getScrutinyLabels() != null) {
				scrutinyLabelsEntity.setTriCod1(scrutinyLabelsDto.getScrutinyLabels().getTriCod1());
			}
			tbScrutinyLabelsJpaRepository.save(scrutinyLabelsEntity);
		}
		return "success";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.
	 * TbScrutinyLabelsService#findAllServiceListData(java.lang. Long)
	 */
	@Override
	public List<ScrutinyServiceDto> findAllServiceListData(final Long orgId, final Long serviceId, final Long deptId,
			Long triCod1) {
		// List<Object> serviceMasterList =
		// tbScrutinyLabelsJpaRepository.findAllServiceListData(orgId);

		final StringBuilder scrutinyServiceList = new StringBuilder(
				"select distinct tbServicesMstEntity from TbScrutinyLabelsEntity scrutinyLabelsEntity,"
						+ " ServiceMaster tbServicesMstEntity where scrutinyLabelsEntity.tbServiceMst.smServiceId=tbServicesMstEntity.smServiceId"
						+ " and scrutinyLabelsEntity.compositePrimaryKey.orgid=tbServicesMstEntity.orgid"
						+ " and scrutinyLabelsEntity.slActiveStatus='A'"
						+ " and scrutinyLabelsEntity.compositePrimaryKey.orgid=" + orgId
						+ " and tbServicesMstEntity.orgid=" + orgId);

		if (serviceId != null) {
			scrutinyServiceList.append(" and scrutinyLabelsEntity.tbServiceMst.smServiceId=" + serviceId);
		}
		if (deptId != null) {
			scrutinyServiceList.append(" and tbServicesMstEntity.tbDepartment.dpDeptid=" + deptId);
		}
		// US#113590
		Organisation org = new Organisation();
		org.setOrgid(orgId);
		String deptShortCode = getServiceCode(serviceId, orgId);
		if (((Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_SKDCL))
				|| (Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_PSCL)))
				&& (deptShortCode != null && deptShortCode.equals(MainetConstants.TradeLicense.MARKET_LICENSE))) {
			scrutinyServiceList.append(" and scrutinyLabelsEntity.triCod1=" + triCod1);
		}
		final Query query = entityManager.createQuery(scrutinyServiceList.toString());

		@SuppressWarnings("unchecked")
		final List<ServiceMaster> serviceMasterList = query.getResultList();

		final List<ScrutinyServiceDto> beans = new ArrayList<>();
		ScrutinyServiceDto scrutinyServiceDto = null;
		if ((serviceMasterList != null) && !serviceMasterList.isEmpty()) {
			for (final ServiceMaster serviceMaster : serviceMasterList) {
				scrutinyServiceDto = new ScrutinyServiceDto();
				scrutinyServiceDto.setSmServiceId(serviceMaster.getSmServiceId());
				scrutinyServiceDto.setSmServiceName(serviceMaster.getSmServiceName());
				scrutinyServiceDto.setSmServiceNameMar(serviceMaster.getSmServiceNameMar());
				scrutinyServiceDto.setDepartmentName(serviceMaster.getTbDepartment().getDpDeptdesc());
				scrutinyServiceDto.setDepartmentNameMar(serviceMaster.getTbDepartment().getDpNameMar());
				if ((Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_SKDCL)) || (Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_PSCL))) {
					if (triCod1 != null && triCod1 > 0) {
						scrutinyServiceDto.setTriCod1(triCod1.longValue());
						scrutinyServiceDto.setTriDesc(
								CommonMasterUtility.getHierarchicalLookUp(triCod1.longValue(), orgId).getLookUpDesc());
					}
				}
				beans.add(scrutinyServiceDto);
			}
		}
		return beans;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.
	 * TbScrutinyLabelsService#findAllScrutinyLabelData(java. lang.Long,
	 * java.lang.Long)
	 */
	@Override
	public List<TbScrutinyLabels> findAllScrutinyLabelData(final Long smServiceId, final Long orgId,
			final Long triCod1) {
		// added for US#113590
		Organisation org = new Organisation();
		org.setOrgid(orgId);
		String deptShortCode = getServiceCode(smServiceId, orgId);
		List<TbScrutinyLabelsEntity> entities = new ArrayList<TbScrutinyLabelsEntity>();
		if (((Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_SKDCL))
				|| (Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_PSCL)))
				&& (deptShortCode != null && deptShortCode.equals(MainetConstants.TradeLicense.MARKET_LICENSE))) {
			entities = tbScrutinyLabelsJpaRepository.findAllScrutinyLabelDataForSKDCL(smServiceId, orgId, triCod1);
		} else {
			entities = tbScrutinyLabelsJpaRepository.findAllScrutinyLabelData(smServiceId, orgId);
		}
		final List<TbScrutinyLabels> beans = new ArrayList<>();
		for (final TbScrutinyLabelsEntity tbScrutinyLabelsEntity : entities) {
			beans.add(
					tbScrutinyLabelsServiceMapper.mapTbScrutinyLabelsEntityToTbScrutinyLabels(tbScrutinyLabelsEntity));
		}
		return beans;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.
	 * TbScrutinyLabelsService#updateScrutinyLabel(com.abm.
	 * mainetservice.web.masters.scrutinylabels.bean.ScrutinyLabelsDto,
	 * java.util.List,
	 * com.abm.mainetservice.web.masters.scrutinylabels.bean.TbScrutinyLabels)
	 */
	@Override
	public String updateScrutinyLabel(final ScrutinyLabelsDto scrutinyLabelsDto,
			final List<TbScrutinyLabels> scrutinyLabelsList, final TbScrutinyLabels tbScrutinyLabelsTemp) {

		TbScrutinyLabelsEntity tbScrutinyLabelsEntity = null;
		final Date curDate = new Date();
		int dbDataFound = 0;
		final List<TbScrutinyLabels> finalCheckList = new ArrayList<>();
		for (final TbScrutinyLabels newListElement : scrutinyLabelsDto.getScrutinyLabelsList()) {
			dbDataFound = 0;
			for (final TbScrutinyLabels dbListElement : scrutinyLabelsList) {
				/*
				 * D#129843 adding 2nd condition for checking is new label or not and 3rd
				 * condition for when updating duplicate label with different role code
				 */
				if (((newListElement.getSlLabelId() != null
								|| !newListElement.getGmId().equals(dbListElement.getGmId())))
						&& (newListElement.getSlLabelId() != null
								&& (newListElement.getSlLabelId().equals(dbListElement.getSlLabelId())))) {
					dbListElement.setSlLabelMar(newListElement.getSlLabelMar());
					dbListElement.setSlPosition(newListElement.getSlPosition());
					dbListElement.setLevels(newListElement.getLevels());
					dbListElement.setGmId(newListElement.getGmId());
					dbListElement.setSlLabel(newListElement.getSlLabel());
					dbListElement.setSlDatatype(newListElement.getSlDatatype());
					dbListElement.setSlPreValidation(newListElement.getSlPreValidation());
					dbListElement.setSlFormName(newListElement.getSlFormName());
					dbListElement.setSlFormMode(newListElement.getSlFormMode());
					dbListElement.setSlValidationText(newListElement.getSlValidationText());
					// added for US#113590
					if (scrutinyLabelsDto != null && scrutinyLabelsDto.getScrutinyLabels() != null) {
						dbListElement.setTriCod1(scrutinyLabelsDto.getScrutinyLabels().getTriCod1());

					}
					if (scrutinyLabelsDto != null && newListElement.getSlQuery() != null) {
						dbListElement.setSlQuery(newListElement.getSlQuery());

					}
					finalCheckList.add(dbListElement);

					dbDataFound++;
					break;
				}
			}
			if (dbDataFound == 0) {
				finalCheckList.add(newListElement);
			}
		}

		int count = 0;
		for (final TbScrutinyLabels dbListElement : scrutinyLabelsList) {
			count = 0;
			for (final TbScrutinyLabels fianlListElement : finalCheckList) {
				if (fianlListElement.getSlLabelId()!=null && fianlListElement.getSlLabelId().equals(dbListElement.getSlLabelId())) {
					count++;
				}
			}

			if (count == 0) {
				dbListElement.setSlActiveStatus(MainetConstants.STATUS.INACTIVE);
				finalCheckList.add(dbListElement);
			}
		}
		final long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
		for (final TbScrutinyLabels scrutinyLabels : finalCheckList) {
			tbScrutinyLabelsEntity = new TbScrutinyLabelsEntity();
			scrutinyLabels.setScrutinyId(scrutinyLabelsDto.getScrutinyLabels().getScrutinyId());
			if (scrutinyLabels.getSlLabelId() != null) {
				scrutinyLabels.setLangId(tbScrutinyLabelsTemp.getLangId());
				scrutinyLabels.setUserId(tbScrutinyLabelsTemp.getUserId());

				scrutinyLabels.setLmoddate(tbScrutinyLabelsTemp.getLmoddate());
				if (StringUtils.isEmpty(tbScrutinyLabelsTemp.getSlActiveStatus())) {
					scrutinyLabels.setSlActiveStatus(tbScrutinyLabelsTemp.getSlActiveStatus());
				}
				tbScrutinyLabelsServiceMapper.mapTbScrutinyLabelsToTbScrutinyLabelsEntity(scrutinyLabels,
						tbScrutinyLabelsEntity);

				tbScrutinyLabelsEntity.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
				tbScrutinyLabelsEntity.setOrgid(orgId);
				tbScrutinyLabelsJpaRepository.save(tbScrutinyLabelsEntity);
			} else {
				final long slLabelId = seqGenFunctionUtility.generateSequenceNo(MainetConstants.CommonConstants.COM,
						TB_SCRUTINY_LABELS, SL_LABEL_ID, orgId, null, null);
				scrutinyLabels.setSlLabelId(slLabelId);
				scrutinyLabels.setOrgid(UserSession.getCurrent().getOrganisation().getOrgid());
				scrutinyLabels.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
				scrutinyLabels.setUserId(UserSession.getCurrent().getEmployee().getEmpId());
				scrutinyLabels.setLmoddate(curDate);
				scrutinyLabels.setSlActiveStatus(MainetConstants.FlagA);

				tbScrutinyLabelsServiceMapper.mapTbScrutinyLabelsToTbScrutinyLabelsEntity(scrutinyLabels,
						tbScrutinyLabelsEntity);

				tbScrutinyLabelsEntity.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
				// added for US#113590
				if (scrutinyLabelsDto != null && scrutinyLabelsDto.getScrutinyLabels() != null) {
					tbScrutinyLabelsEntity.setTriCod1(scrutinyLabelsDto.getScrutinyLabels().getTriCod1());

				}
				tbScrutinyLabelsJpaRepository.save(tbScrutinyLabelsEntity);
			}
		}

		return "success";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.
	 * TbScrutinyLabelsService#getScrutinyServices(java.lang. Long)
	 */
	@Override
	public List<ScrutinyServiceDto> getScrutinyServices(final Long orgId) {
		final List<Object> result = tbScrutinyLabelsJpaRepository.getScrutinyServices(orgId);
		final List<ScrutinyServiceDto> beans = new ArrayList<>();

		final int listSize = result.size();
		ScrutinyServiceDto scrutinyServiceDto = null;
		for (int iCounter = 0; iCounter < listSize; iCounter++) {
			final Object[] obj = (Object[]) result.get(iCounter);
			scrutinyServiceDto = new ScrutinyServiceDto();
			if (obj[0] != null) {
				scrutinyServiceDto.setSmServiceName(obj[0].toString());
			}
			if (obj[1] != null) {
				scrutinyServiceDto.setSmServiceNameMar(obj[1].toString());
			}
			if (obj[2] != null) {
				scrutinyServiceDto.setSmServiceId(Long.parseLong(obj[2].toString()));
			}
			beans.add(scrutinyServiceDto);
		}
		return beans;
	}

	@Override
	public List<TbScrutinyLabels> findAllScrutinyLabelsByServiceAndLevelId(Long smServiceId, Long levelId, Long orgId) {
		final List<TbScrutinyLabelsEntity> entities = tbScrutinyLabelsJpaRepository
				.findAllScrutinyLabelsByServiceAndLevelId(smServiceId, levelId, orgId);
		final List<TbScrutinyLabels> beans = new ArrayList<>();
		for (final TbScrutinyLabelsEntity tbScrutinyLabelsEntity : entities) {
			beans.add(
					tbScrutinyLabelsServiceMapper.mapTbScrutinyLabelsEntityToTbScrutinyLabels(tbScrutinyLabelsEntity));
		}
		return beans;
	}

	@Override
	public String getServiceCode(Long serviceId, Long orgId) {
		try {
			if (serviceId != null && orgId != null) {
				ServiceMaster servMast = ApplicationContextProvider.getApplicationContext()
						.getBean(ServiceMasterService.class).getServiceMaster(serviceId, orgId);
				String deptshortName = ApplicationContextProvider.getApplicationContext()
						.getBean(DepartmentService.class).getDeptCode(servMast.getTbDepartment().getDpDeptid());
				return deptshortName;

			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		return null;
	}
	
	@Override
	public List<ScrutinyServiceDto> getAllServicesData(final Long orgId) {
		List<Object> result = new ArrayList<Object>();
		Organisation org = new Organisation();
		org.setOrgid(orgId);
		
			result = tbScrutinyLabelsJpaRepository.getAllActiveServices(orgId);
		

		final List<ScrutinyServiceDto> beans = new ArrayList<>();

		final int listSize = result.size();
		ScrutinyServiceDto scrutinyServiceDto = null;
		for (int iCounter = 0; iCounter < listSize; iCounter++) {
			final Object[] obj = (Object[]) result.get(iCounter);
			scrutinyServiceDto = new ScrutinyServiceDto();
			if (obj[0] != null) {
				scrutinyServiceDto.setSmServiceId(Long.parseLong(obj[0].toString()));
			}
			if (obj[1] != null) {
				scrutinyServiceDto.setSmServiceName(obj[1].toString());
			}
			if (obj[2] != null) {
				scrutinyServiceDto.setSmServiceNameMar(obj[2].toString());
			}
			if (obj[3] != null) {
				scrutinyServiceDto.setTriCod1(Long.valueOf(obj[3].toString()));
			}
			beans.add(scrutinyServiceDto);
		}
		return beans;
	}

}
