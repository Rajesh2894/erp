/*
 * Created on 19 Aug 2015 ( Time 17:12:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.mapper;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;

import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.domain.TbCfcApplicationMstEntity;
import com.abm.mainet.common.master.dto.TbCfcApplicationMst;
import com.abm.mainet.common.utility.AbstractServiceMapper;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class TbCfcApplicationMstServiceMapper extends AbstractServiceMapper {

    /**
     * ModelMapper : bean to bean mapping library.
     */
    private ModelMapper modelMapper;

    /**
     * Constructor.
     */
    public TbCfcApplicationMstServiceMapper() {
        modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
    }

    /**
     * Mapping from 'TbCfcApplicationMstEntity' to 'TbCfcApplicationMst'
     * @param tbCfcApplicationMstEntity
     */
    public TbCfcApplicationMst mapTbCfcApplicationMstEntityToTbCfcApplicationMst(
            final TbCfcApplicationMstEntity tbCfcApplicationMstEntity) {
        if (tbCfcApplicationMstEntity == null) {
            return null;
        }

        // --- Generic mapping
        final TbCfcApplicationMst tbCfcApplicationMst = map(tbCfcApplicationMstEntity, TbCfcApplicationMst.class);

        // --- Link mapping ( link to TbOrganisation )
        if (tbCfcApplicationMstEntity.getTbOrganisation() != null) {
            tbCfcApplicationMst.setOrgid(Long.valueOf(tbCfcApplicationMstEntity.getTbOrganisation().getOrgid()));
        }
        // --- Link mapping ( link to TbServicesMst )
        if (tbCfcApplicationMstEntity.getTbServicesMst() != null) {
            tbCfcApplicationMst.setSmServiceId(tbCfcApplicationMstEntity.getTbServicesMst().getSmServiceId());
        }

        // --- Link mapping ( link to Employee )
        if (tbCfcApplicationMstEntity.getUpdatedBy() != null) {
            tbCfcApplicationMst.setUpdatedBy(tbCfcApplicationMstEntity.getUpdatedBy());
        }
        return tbCfcApplicationMst;
    }

    /**
     * Mapping from 'TbCfcApplicationMst' to 'TbCfcApplicationMstEntity'
     * @param tbCfcApplicationMst
     * @param tbCfcApplicationMstEntity
     */
    public void mapTbCfcApplicationMstToTbCfcApplicationMstEntity(final TbCfcApplicationMst tbCfcApplicationMst,
            final TbCfcApplicationMstEntity tbCfcApplicationMstEntity) {
        if (tbCfcApplicationMst == null) {
            return;
        }

        // --- Generic mapping
        map(tbCfcApplicationMst, tbCfcApplicationMstEntity);

        // --- Link mapping ( link : tbCfcApplicationMst )
        if (hasLinkToTbOrganisation(tbCfcApplicationMst)) {
            final Organisation tbOrganisation1 = new Organisation();
            tbOrganisation1.setOrgid(tbCfcApplicationMst.getOrgid().longValue());
            tbCfcApplicationMstEntity.setTbOrganisation(tbOrganisation1);
        } else {
            tbCfcApplicationMstEntity.setTbOrganisation(null);
        }

        // --- Link mapping ( link : tbCfcApplicationMst )
        if (hasLinkToTbServicesMst(tbCfcApplicationMst)) {
            final ServiceMaster tbServicesMst2 = new ServiceMaster();
            tbServicesMst2.setSmServiceId(tbCfcApplicationMst.getSmServiceId());
            tbCfcApplicationMstEntity.setTbServicesMst(tbServicesMst2);
        } else {
            tbCfcApplicationMstEntity.setTbServicesMst(null);
        }

        // --- Link mapping ( link : tbCfcApplicationMst )
        if (hasLinkToEmployee1(tbCfcApplicationMst)) {
            tbCfcApplicationMstEntity.setUpdatedBy(tbCfcApplicationMst.getUpdatedBy());
        } else {
            tbCfcApplicationMstEntity.setUpdatedBy(null);
        }

    }

    /**
     * Verify that TbOrganisation id is valid.
     * @param TbOrganisation TbOrganisation
     * @return boolean
     */
    private boolean hasLinkToTbOrganisation(final TbCfcApplicationMst tbCfcApplicationMst) {
        if (tbCfcApplicationMst.getOrgid() != null) {
            return true;
        }
        return false;
    }

    /**
     * Verify that TbServicesMst id is valid.
     * @param TbServicesMst TbServicesMst
     * @return boolean
     */
    private boolean hasLinkToTbServicesMst(final TbCfcApplicationMst tbCfcApplicationMst) {
        if (tbCfcApplicationMst.getSmServiceId() != null) {
            return true;
        }
        return false;
    }

    /**
     * Verify that Employee id is valid.
     * @param Employee Employee
     * @return boolean
     */
    private boolean hasLinkToEmployee1(final TbCfcApplicationMst tbCfcApplicationMst) {
        if (tbCfcApplicationMst.getEmpIdCitizen() != null) {
            return true;
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected ModelMapper getModelMapper() {
        return modelMapper;
    }

    protected void setModelMapper(final ModelMapper modelMapper) {
        this.modelMapper = modelMapper;
    }

}