/*
 * Created on 7 Jun 2016 ( Time 17:15:22 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.integration.acccount.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.integration.acccount.dao.AccountFundMasterDao;
import com.abm.mainet.common.integration.acccount.domain.AccountFundMasterEntity;
import com.abm.mainet.common.integration.acccount.domain.TbAcCodingstructureDetEntity;
import com.abm.mainet.common.integration.acccount.dto.AccountFundDto;
import com.abm.mainet.common.integration.acccount.dto.AccountFundMasterBean;
import com.abm.mainet.common.integration.acccount.mapper.AccountFundMasterServiceMapper;
import com.abm.mainet.common.integration.acccount.repository.AccountFundMasterJpaRepository;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;

/**
 * Implementation of TbAcFundMasterService
 */
@Component
@Transactional
public class AccountFundMasterServiceImpl implements AccountFundMasterService {

    @Resource
    private AccountFundMasterJpaRepository tbAcFundMasterJpaRepository;

    @Resource
    private AccountFundMasterServiceMapper tbAcFundMasterServiceMapper;

    @Resource
    private AccountFundMasterDao accountFundMasterDao;

    @Override
    @Transactional
    public void create(final AccountFundMasterBean masterBean, final TbAcCodingstructureDetEntity detailEntity, final Long orgId,
            final int langId,
            final Long empId) throws Exception {

        final List<Object[]> codcofDetIdForAllLvl = accountFundMasterDao
                .getCodCofigurationDetIdUsingLevel(masterBean.getCodconfigId());
        final Map<Integer, Integer> mapForAllLevels = new HashMap<>();

        if ((codcofDetIdForAllLvl != null) && !codcofDetIdForAllLvl.isEmpty()) {
            for (final Object[] obj : codcofDetIdForAllLvl) {
                mapForAllLevels.put(Integer.valueOf(obj[MainetConstants.ENGLISH].toString()),
                        Integer.valueOf(obj[MainetConstants.EMPTY_LIST].toString()));
            }
        }

        AccountFundMasterEntity accountPrimayHeadCodeEntity = fillDataForParentLevel(masterBean, orgId, langId, empId,
                mapForAllLevels);

        accountPrimayHeadCodeEntity = tbAcFundMasterJpaRepository.save(accountPrimayHeadCodeEntity);
    }

    private AccountFundMasterEntity fillDataForParentLevel(final AccountFundMasterBean fundMasterBean, final Long orgId,
            final int langId,
            final Long empId, final Map<Integer, Integer> mapForAllLevels) {
        TbAcCodingstructureDetEntity entity;
        final AccountFundMasterEntity fundnMasterEntity = new AccountFundMasterEntity();

        fundnMasterEntity.setFundDesc(fundMasterBean.getParentDesc());
        fundnMasterEntity.setFundCode(fundMasterBean.getParentCode());
        fundnMasterEntity.setFundCompositecode(fundMasterBean.getParentFinalCode());
        fundnMasterEntity.setFundParentId(null);
        fundnMasterEntity.setOrgid(orgId);
        fundnMasterEntity.setLgIpMac(fundMasterBean.getLgIpMac());
        fundnMasterEntity.setUserId(empId);
        fundnMasterEntity.setFundStatusCpdId(fundMasterBean.getFundStatusCpdId());
        entity = new TbAcCodingstructureDetEntity();
        entity.setCodcofdetId(Long.valueOf(mapForAllLevels.get(1)));
        fundnMasterEntity.setTbAcCodingstructureDet(entity);
        fundnMasterEntity.setLmoddate(new Date());
        fundMasterBean.setParentLevel("1");

        AccountFundMasterEntity childEntity = null;
        final Set<AccountFundMasterEntity> set = new HashSet<>();
        AccountFundMasterEntity parentEntity = null;
        final List<AccountFundDto> list = new ArrayList<>(fundMasterBean.getListDto());
        ArrayList<AccountFundDto> newList = null;
        for (final AccountFundDto dto : list) {

            newList = new ArrayList<>(fundMasterBean.getListDto());
            childEntity = new AccountFundMasterEntity();
            if (dto.getChildParentCode().equals(fundMasterBean.getParentCode())
                    && dto.getChildParentLevelCode().toString().equals(fundMasterBean.getParentLevel())) {

                childEntity.setFundDesc(dto.getChildDesc());
                childEntity.setFundCode(dto.getChildCode());

                /*
                 * child fund active/Inactive Status
                 */
                if (dto.getChildFundStatus() != null) {
                    childEntity.setFundStatusCpdId(dto.getChildFundStatus());
                } else {
                    childEntity.setFundStatusCpdId(getActiveStatusId());
                }
                childEntity.setFundCompositecode(dto.getChildFinalCode());
                childEntity.setFundParentId(fundnMasterEntity);
                childEntity.setOrgid(orgId);
                childEntity.setLgIpMac(fundMasterBean.getLgIpMac());
                childEntity.setUserId(empId);
                entity = new TbAcCodingstructureDetEntity();
                entity.setCodcofdetId(Long.valueOf(mapForAllLevels.get(Integer.parseInt(dto.getChildLevelCode().toString()))));
                childEntity.setTbAcCodingstructureDet(entity);
                childEntity.setLmoddate(new Date());
                parentEntity = new AccountFundMasterEntity();
                parentEntity.setFundId(childEntity.getFundId());
                newList = new ArrayList<>(fundMasterBean.getListDto());
                childEntity.setFundHierarchicalList(addRecordsRecursively(newList, dto.getChildCode(), dto.getChildLevel(),
                        dto.getChildFinalCode(), childEntity.getFundId(), orgId, langId, empId, childEntity, mapForAllLevels));
                set.add(childEntity);
            }
        }
        fundnMasterEntity.setFundHierarchicalList(set);

        return fundnMasterEntity;

    }

    public Set<AccountFundMasterEntity> addRecordsRecursively(final ArrayList<AccountFundDto> list, final String parentCode,
            final String parentLevel, final String parentFinalCode, final Long parentId,
            final Long orgId, final int langId, final Long empId, final AccountFundMasterEntity parentEntity,
            final Map<Integer, Integer> mapForAllLevels) {
        final Set<AccountFundMasterEntity> set = new HashSet<>();
        AccountFundMasterEntity childEntity = null;
        TbAcCodingstructureDetEntity entity = null;
        AccountFundMasterEntity parentEntity1 = null;
        String[] strArray = null;
        String childParentFinalCode = MainetConstants.BLANK;
        for (final AccountFundDto dto : list) {

            childEntity = new AccountFundMasterEntity();

            if (dto.getChildParentCode().equals(parentCode) && dto.getChildParentLevelCode().equals(parentLevel)) {
                strArray = dto.getChildFinalCode().split(MainetConstants.HYPHEN);
                for (int i = 0; i < (strArray.length - 1); i++) {
                    if (childParentFinalCode == null) {
                        childParentFinalCode = strArray[i];
                    } else {
                        childParentFinalCode += MainetConstants.HYPHEN + strArray[i];
                    }
                }

                if (parentFinalCode.equals(childParentFinalCode)) {
                    childEntity.setFundDesc(dto.getChildDesc());
                    childEntity.setFundCode(dto.getChildCode());

                    childEntity.setFundStatusCpdId(dto.getChildFundStatus());

                    childEntity.setFundCompositecode(dto.getChildFinalCode());
                    childEntity.setFundParentId(parentEntity);
                    childEntity.setOrgid(orgId);
                    childEntity.setUserId(empId);
                    entity = new TbAcCodingstructureDetEntity();
                    entity.setCodcofdetId(mapForAllLevels.get(Integer.parseInt(dto.getChildLevelCode().toString())));
                    childEntity.setTbAcCodingstructureDet(entity);
                    childEntity.setLmoddate(new Date());
                    parentEntity1 = new AccountFundMasterEntity();
                    parentEntity1.setFundId(childEntity.getFundId());
                    set.add(childEntity);
                    if (!set.isEmpty()) {
                        childEntity.setFundHierarchicalList(
                                addRecordsRecursively(list, dto.getChildCode(), dto.getChildLevel(), dto.getChildFinalCode(),
                                        childEntity.getFundId(), orgId, langId, empId, childEntity, mapForAllLevels));
                    }
                }
            }
        }

        return set;
    }

    @Override
    @Transactional
    public void saveEditedData(final AccountFundMasterBean fundMasterBean, final Long orgId, final int langId, final Long empId)
            throws Exception {
        final AccountFundMasterEntity existParentEntity = accountFundMasterDao.getParentDetailsUsingFundId(fundMasterBean);

        final List<Object[]> codcofDetIdForAllLvl = accountFundMasterDao
                .getCodCofigurationDetIdUsingLevel(fundMasterBean.getCodconfigId());
        final Map<Integer, Integer> mapForAllLevels = new HashMap<>();

        if ((codcofDetIdForAllLvl != null) && !codcofDetIdForAllLvl.isEmpty()) {
            for (final Object[] obj : codcofDetIdForAllLvl) {
                mapForAllLevels.put(Integer.valueOf(obj[MainetConstants.ENGLISH].toString()),
                        Integer.valueOf(obj[MainetConstants.EMPTY_LIST].toString()));
            }
        }
        String[] strArray = null;
        String childParentFinalCode = MainetConstants.BLANK;
        existParentEntity.setFundDesc(fundMasterBean.getParentDesc());
        for (final AccountFundDto dto : fundMasterBean.getListDto()) {
            strArray = dto.getChildFinalCode().split(MainetConstants.HYPHEN);

            for (int i = 0; i < (strArray.length - 1); i++) {
                childParentFinalCode += strArray[i] + MainetConstants.HYPHEN;
            }
            childParentFinalCode.lastIndexOf(MainetConstants.HYPHEN);
            final StringBuffer stringBuffer = new StringBuffer(childParentFinalCode);
            stringBuffer.deleteCharAt(childParentFinalCode.lastIndexOf(MainetConstants.HYPHEN));

            traverseFirstNode(existParentEntity, fundMasterBean, stringBuffer.toString(), dto, mapForAllLevels, orgId, langId,
                    empId);

        }
    }

    private void traverseFirstNode(final AccountFundMasterEntity existParentEntity, final AccountFundMasterBean fundMasterBean,
            final String dtocompositeCode, final AccountFundDto dto, final Map<Integer, Integer> mapForAllLevels,
            final Long orgId, final int langId,
            final Long empId) {

        TbAcCodingstructureDetEntity codingStructerDetEntity = null;
        final Set<AccountFundMasterEntity> set = existParentEntity.getFundHierarchicalList();
        final AccountFundMasterEntity childEntity = new AccountFundMasterEntity();
        childEntity.setFundCode(dto.getChildCode());
        if (!existParentEntity.getFundHierarchicalList().contains(childEntity)
                && dto.getChildParentCode().equals(existParentEntity.getFundCode())) {
            childEntity.setFundDesc(dto.getChildDesc());
            childEntity.setFundCode(dto.getChildCode());

            childEntity.setFundStatusCpdId(dto.getChildFundStatus());

            childEntity.setFundCompositecode(dto.getChildFinalCode());
            childEntity.setFundParentId(existParentEntity);
            childEntity.setOrgid(orgId);
            childEntity.setUserId(empId);
            childEntity.setLgIpMac(existParentEntity.getLgIpMac());
            codingStructerDetEntity = new TbAcCodingstructureDetEntity();
            codingStructerDetEntity.setCodcofdetId(mapForAllLevels.get(Integer.parseInt(dto.getChildLevelCode().toString())));
            childEntity.setTbAcCodingstructureDet(codingStructerDetEntity);
            childEntity.setLmoddate(new Date());
            set.add(childEntity);
        } else if (existParentEntity.getFundHierarchicalList().contains(childEntity)) {
            for (final AccountFundMasterEntity existEntity : existParentEntity.getFundHierarchicalList()) {
                if (existEntity.getFundCompositecode().equals(dto.getChildFinalCode())) {
                    if (dto.getChildDesc() != null) {
                        existEntity.setFundDesc(dto.getChildDesc());
                        existEntity.setFundStatusCpdId(dto.getChildFundStatus());
                    }
                }
            }
        }
        existParentEntity.setFundHierarchicalList(set);

        if (!existParentEntity.getFundHierarchicalList().isEmpty()) {
            recursiveMethodCallToTravellTreeNode(existParentEntity.getFundHierarchicalList(), fundMasterBean, dtocompositeCode,
                    dto, mapForAllLevels, orgId, langId, empId);
        }
    }

    public void recursiveMethodCallToTravellTreeNode(final Set<AccountFundMasterEntity> listOfExistParentEntity,
            final AccountFundMasterBean fundMasterBean,
            final String dtocompositeCode,
            final AccountFundDto dto, final Map<Integer, Integer> mapForAllLevels, final Long orgId, final int langId,
            final Long empId) {
        TbAcCodingstructureDetEntity codingStructerDetEntity = null;
        Set<AccountFundMasterEntity> set = null;
        for (final AccountFundMasterEntity entity : listOfExistParentEntity) {
            set = entity.getFundHierarchicalList();
            final AccountFundMasterEntity childEntity = new AccountFundMasterEntity();
            childEntity.setFundCode(dto.getChildCode());
            if (!entity.getFundHierarchicalList().contains(childEntity)
                    && dto.getChildParentCode().equals(entity.getFundCompositecode())) {
                childEntity.setFundDesc(dto.getChildDesc());
                childEntity.setFundCode(dto.getChildCode());
                childEntity.setFundStatusCpdId(dto.getChildFundStatus());
                childEntity.setFundCompositecode(dto.getChildFinalCode());
                childEntity.setFundParentId(entity);
                childEntity.setOrgid(orgId);
                childEntity.setUserId(empId);
                codingStructerDetEntity = new TbAcCodingstructureDetEntity();
                codingStructerDetEntity
                        .setCodcofdetId(Long.valueOf(mapForAllLevels.get(Integer.parseInt(dto.getChildLevelCode().toString()))));
                childEntity.setTbAcCodingstructureDet(codingStructerDetEntity);
                childEntity.setLmoddate(new Date());
                set.add(childEntity);
            } else if (entity.getFundHierarchicalList().contains(childEntity)) {
                for (final AccountFundMasterEntity existEntity : entity.getFundHierarchicalList()) {
                    if (existEntity.getFundCompositecode().equals(dto.getChildFinalCode())) {
                        if (dto.getChildDesc() != null) {
                            existEntity.setFundDesc(dto.getChildDesc());
                            existEntity.setFundStatusCpdId(dto.getChildFundStatus());
                        }
                    }
                }
            }
            entity.setFundHierarchicalList(set);
            if (!entity.getFundHierarchicalList().isEmpty()) {
                recursiveMethodCallToTravellTreeNode(entity.getFundHierarchicalList(), fundMasterBean, dtocompositeCode, dto,
                        mapForAllLevels, orgId, langId, empId);
            }
        }

    }

    @Override
    @Transactional
    public List<AccountFundMasterBean> findAllParentFunds(
            final Long orgid) {
        final List<AccountFundMasterEntity> listOfEntity = accountFundMasterDao
                .findAllParentFunds(orgid);
        final List<AccountFundMasterBean> listOfBean = new ArrayList<>();
        Boolean isParent = false;
        if ((listOfEntity != null) && !listOfEntity.isEmpty()) {
            for (final AccountFundMasterEntity entity : listOfEntity) {
                if (entity.getFundParentId() == null) {
                    isParent = true;
                } else {
                    isParent = false;
                }
                listOfBean.add(tbAcFundMasterServiceMapper
                        .mapTbAcFundMasterEntityToTbAcFundMaster(
                                entity, isParent));
            }
        }
        return listOfBean;
    }

    @Override
    @Transactional
    public AccountFundMasterBean getDetailsUsingFundId(
            final AccountFundMasterBean tbAcFundMaster) {

        System.out.println("In service");

        final AccountFundMasterBean fundBean = new AccountFundMasterBean();
        final AccountFundMasterEntity parentEntity = accountFundMasterDao
                .getParentDetailsUsingFundId(tbAcFundMaster);
        final List<AccountFundDto> listOfDto = new ArrayList<>();
        fundBean.setParentCode(parentEntity.getFundCode());
        fundBean.setParentDesc(parentEntity.getFundDesc());
        fundBean.setParentFinalCode(parentEntity
                .getFundCompositecode());
        fundBean.setParentLevel(parentEntity
                .getTbAcCodingstructureDet()
                .getCodDescription());
        fundBean.setFundId(parentEntity.getFundId());
        if ((parentEntity.getFundHierarchicalList() != null)
                && !parentEntity.getFundHierarchicalList()
                        .isEmpty()) {
            addFund(listOfDto,
                    parentEntity.getFundHierarchicalList(),
                    parentEntity.getFundCode());
        }

        Collections.sort(listOfDto,
                AccountFundDto.fundLevelComparator);

        fundBean.setListDto(listOfDto);
        return fundBean;
    }

    @Override
    @Transactional(readOnly=true)
    public Boolean isExist(final String fundCode, final Long orgId) {

        return accountFundMasterDao.isExist(fundCode, orgId);
    }

    public void addFund(
            final List<AccountFundDto> funds,
            final Set<AccountFundMasterEntity> fundHierarchicalList,
            final String pCode) {
        if ((fundHierarchicalList != null)
                && !fundHierarchicalList.isEmpty()) {
            AccountFundDto dto = null;
            for (final AccountFundMasterEntity entry : fundHierarchicalList) {
                dto = new AccountFundDto();
                dto.setChildCode(entry.getFundCode());
                dto.setChildFunId(entry.getFundId());
                dto.setChildFundStatus(entry.getFundStatusCpdId());
                dto.setChildParentCode(pCode);
                dto.setChildDesc(entry.getFundDesc());
                dto.setChildFinalCode(entry
                        .getFundCompositecode());

                if (entry.getTbAcCodingstructureDet() != null) {
                    dto.setChildLevelCode(entry
                            .getTbAcCodingstructureDet()
                            .getCodLevel());
                    final Long codLevel = entry
                            .getTbAcCodingstructureDet()
                            .getCodLevel();
                    if ((codLevel != null) && (codLevel > 1l)) {
                        final Long k = codLevel - 1;
                        dto.setChildParentLevelCode(k);
                    }
                }
                funds.add(dto);
                if ((entry.getFundHierarchicalList() != null)
                        && !entry.getFundHierarchicalList()
                                .isEmpty()) {
                    addFund(funds,
                            entry.getFundHierarchicalList(),
                            entry.getFundCode());

                }

            }
        }

    }

    @Override
    @Transactional
    public Map<Long, String> getFundMasterLastLevels(final Long orgId) throws Exception {

        List<AccountFundMasterEntity> fundList = null;
        final LookUp lookup = CommonMasterUtility
                .getValueFromPrefixLookUp(
                        PrefixConstants.ACCOUNT_MASTERS.FUND_CPD_VALUE,
                        MainetConstants.CMD);
        if (lookup != null) {
            fundList = accountFundMasterDao.getLastLevels(
                    orgId, lookup.getLookUpId());
        }
        final Map<Long, String> map = new LinkedHashMap<>();
        if ((fundList != null) && !fundList.isEmpty()) {
            for (final AccountFundMasterEntity fund : fundList) {
                map.put(fund.getFundId(),
                        fund.getFundCompositecode()
                                + MainetConstants.SEPARATOR
                                + fund.getFundDesc());
            }
        }

        return map;
    }

    @Override
    @Transactional(readOnly=true)
    public String getFundCode(final Long fundId) {

        final String fundMasterCode = tbAcFundMasterJpaRepository.getFundCode(fundId);

        return fundMasterCode;

    }

    @Override
    @Transactional(readOnly=true)
    public String getFundCodeDesc(final Long fundId) {
        String fundCodeDesc = "";
        final List<Object[]> fundMasterCode = tbAcFundMasterJpaRepository.getFundCodeDesc(fundId);
        for (Object[] objects : fundMasterCode) {
            if (objects[0] != null && objects[1] != null) {
                fundCodeDesc = objects[0].toString() + MainetConstants.SEPARATOR + objects[1].toString();
            }
        }
        return fundCodeDesc;
    }

    public Long getActiveStatusId() {
        final LookUp lookUpFieldStatus = CommonMasterUtility.getLookUpFromPrefixLookUpValue(MainetConstants.MASTER.A,
                PrefixConstants.LookUp.ACN, UserSession.getCurrent().getLanguageId(), UserSession.getCurrent().getOrganisation());
        final Long activeStatusId = lookUpFieldStatus.getLookUpId();
        return activeStatusId;
    }

    @Override
    @Transactional
    public Map<Long, String> getFundMasterStatusLastLevels(final Long orgId, final Organisation organisation, final int langId)
            throws Exception {

        List<AccountFundMasterEntity> fundList = null;
        final LookUp lookup = CommonMasterUtility
                .getValueFromPrefixLookUp(
                        PrefixConstants.ACCOUNT_MASTERS.FUND_CPD_VALUE,
                        MainetConstants.CMD);
        if (lookup != null) {
            fundList = accountFundMasterDao.getLastLevels(
                    orgId, lookup.getLookUpId());
        }
        final Map<Long, String> map = new LinkedHashMap<>();
        if ((fundList != null) && !fundList.isEmpty()) {
            for (final AccountFundMasterEntity fund : fundList) {

                final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
                final Long lookUpStatusId = statusLookup.getLookUpId();
                if (lookUpStatusId.equals(fund.getFundStatusCpdId())) {
                    map.put(fund.getFundId(),
                            fund.getFundCompositecode()
                                    + MainetConstants.SEPARATOR
                                    + fund.getFundDesc());
                }
            }
        }
        return map;
    }

}
