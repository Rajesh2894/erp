/*
 * Created on 16 Jul 2016 ( Time 14:47:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.integration.acccount.service;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.TreeMap;
import java.util.stream.Collectors;

import javax.annotation.Resource;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;

import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.audit.service.AuditService;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.exception.FrameworkException;
import com.abm.mainet.common.integration.acccount.dao.SecondaryheadMasterDao;
import com.abm.mainet.common.integration.acccount.domain.AccountFieldMasterEntity;
import com.abm.mainet.common.integration.acccount.domain.AccountFunctionMasterEntity;
import com.abm.mainet.common.integration.acccount.domain.AccountFundMasterEntity;
import com.abm.mainet.common.integration.acccount.domain.AccountHeadSecondaryAccountCodeMasterEntity;
import com.abm.mainet.common.integration.acccount.domain.AccountHeadSecondaryAccountCodeMasterHistEntity;
import com.abm.mainet.common.integration.acccount.domain.TbAcCodingstructureMasEntity;
import com.abm.mainet.common.integration.acccount.domain.TbSacheadAccMapEntity;
import com.abm.mainet.common.integration.acccount.dto.AccountSecondaryHeadMasterExportDto;
import com.abm.mainet.common.integration.acccount.dto.SecondaryheadMaster;
import com.abm.mainet.common.integration.acccount.dto.TbSacheadAccMapDTO;
import com.abm.mainet.common.integration.acccount.hrms.soap.jaxws.client.AccountHead;
import com.abm.mainet.common.integration.acccount.mapper.TbAcSecondaryheadMasterServiceMapper;
import com.abm.mainet.common.integration.acccount.repository.AcPrimaryCodeMasterJpaRepository;
import com.abm.mainet.common.integration.acccount.repository.AccountFundMasterJpaRepository;
import com.abm.mainet.common.integration.acccount.repository.SecondaryheadMasterJpaRepository;
import com.abm.mainet.common.integration.acccount.repository.TbAcFieldMasterJpaRepository;
import com.abm.mainet.common.integration.acccount.repository.TbAcFunctionMasterJpaRepository;
import com.abm.mainet.common.integration.acccount.repository.TbSacheadAccMapJpaRepository;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.SeqGenFunctionUtility;
import com.fasterxml.jackson.databind.util.BeanUtil;

/**
 * Implementation of TbAcSecondaryheadMasterService
 */
@Component
@Transactional
public class SecondaryheadMasterServiceImpl implements SecondaryheadMasterService {

    @Resource
    private SecondaryheadMasterJpaRepository tbAcSecondaryheadMasterJpaRepository;

    @Resource
    private TbAcSecondaryheadMasterServiceMapper tbAcSecondaryheadMasterServiceMapper;

    @Resource
    private TbAcCodingstructureMasService tbAcCodingstructureMasService;

    @Autowired
    private TbAcCodingstructureDetService tbAcCodingstructureDet;

    @Autowired
    private SeqGenFunctionUtility seqGenFunctionUtility;

    @Resource
    private SecondaryheadMasterDao tbAcSecondaryheadMasterDao;

    @Resource
    private TbAcFunctionMasterJpaRepository tbAcFunctionMasterJpaRepository;

    @Resource
    private TbAcFieldMasterJpaRepository tbAcFieldMasterJpaRepository;

    @Resource
    private AccountFundMasterJpaRepository tbAcFundMasterJpaRepository;

    @Resource
    private AcPrimaryCodeMasterJpaRepository acPrimaryCodeMasterJpaRepository;

    @Resource
    private AuditService auditService;

    @Resource
    AccountHeadProvisionService accountHeadProvisionService;
    
    @Autowired
    TbSacheadAccMapJpaRepository tbSacheadAccMapJpaRepository;

    private static final Logger LOGGER = Logger.getLogger(SecondaryheadMasterServiceImpl.class);
    private static final String DATE_COVERT_EXCEPTION = "Exception while converting date to XMLGregorianCalendar :";

    @Override
    @Transactional(readOnly = true)
    public SecondaryheadMaster findBySacHeadId(final Long sacHeadId, final Long orgId) {
        final AccountHeadSecondaryAccountCodeMasterEntity tbAcSecondaryheadMasterEntity = tbAcSecondaryheadMasterJpaRepository
                .findBySacHeadId(sacHeadId, orgId);
        return tbAcSecondaryheadMasterServiceMapper
                .mapTbAcSecondaryheadMasterEntityToTbAcSecondaryheadMaster(tbAcSecondaryheadMasterEntity);
    }

    @Override
    @Transactional(readOnly = true)
    public List<SecondaryheadMaster> findAll(final Long orgId) {
        final Iterable<AccountHeadSecondaryAccountCodeMasterEntity> entities = tbAcSecondaryheadMasterJpaRepository
                .findAll(orgId);
        final List<SecondaryheadMaster> beans = new ArrayList<>();
        for (final AccountHeadSecondaryAccountCodeMasterEntity tbAcSecondaryheadMasterEntity : entities) {
            beans.add(tbAcSecondaryheadMasterServiceMapper
                    .mapTbAcSecondaryheadMasterEntityToTbAcSecondaryheadMaster(tbAcSecondaryheadMasterEntity));
        }
        return beans;
    }

    @Override
    @Transactional
    public SecondaryheadMaster save(final SecondaryheadMaster tbAcSecondaryheadMaster) {
        return update(tbAcSecondaryheadMaster);
    }

    // public excelUploadSacHeadData(DTO dto) {
    //
    // //BussinessLogic
    //
    // SecondaryheadMaster oldSacHeadDTO = new SecondaryheadMaster();
    // oldSacHeadDTO.setOrgid(dto.getORGID());
    // saveSecondaryHeadData(oldSacHeadDTO,organisation, langId);

    // }
    @Override
    @Transactional
    public SecondaryheadMaster saveSecondaryHeadData(final SecondaryheadMaster tbAcSecondaryheadMaster,
            final Organisation organisation, final int langId) {
        AccountHeadSecondaryAccountCodeMasterEntity tbAcSecondaryheadMasterEntity = null;
        AccountHeadSecondaryAccountCodeMasterHistEntity accountHeadSecondaryAccountCodeMasterHistEntity = null;
        if (tbAcSecondaryheadMaster.getSacHeadId() != null) {
            tbAcSecondaryheadMasterEntity = tbAcSecondaryheadMasterJpaRepository
                    .findOne(tbAcSecondaryheadMaster.getSacHeadId());
            tbAcSecondaryheadMasterEntity.setUpdatedDate(new Date());
            tbAcSecondaryheadMasterEntity.setUpdatedBy(tbAcSecondaryheadMaster.getUserId());
            if ((tbAcSecondaryheadMaster.getSacHeadCodeDesc() != null)
                    && !tbAcSecondaryheadMaster.getSacHeadCodeDesc().isEmpty()) {
                tbAcSecondaryheadMasterEntity.setSacHeadDesc(tbAcSecondaryheadMaster.getSacHeadCodeDesc());
            } else {
                tbAcSecondaryheadMasterEntity.setSacHeadDesc(tbAcSecondaryheadMaster.getSacHeadDesc());
            }
            if (tbAcSecondaryheadMaster.getSacLeddgerTypeCpdId() != null) {
                tbAcSecondaryheadMasterEntity.setSacLeddgerTypeCpdId(tbAcSecondaryheadMaster.getSacLeddgerTypeCpdId());
            } else {
                tbAcSecondaryheadMasterEntity.setSacLeddgerTypeCpdId(tbAcSecondaryheadMasterEntity.getSacLeddgerTypeCpdId());
            }
            if (tbAcSecondaryheadMaster.getSacStatusCpdId() != null) {
                tbAcSecondaryheadMasterEntity.setSacStatusCpdId(tbAcSecondaryheadMaster.getSacStatusCpdId());
            } else {
                tbAcSecondaryheadMasterEntity
                        .setSacStatusCpdId(CommonMasterUtility
                                .getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
                                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, organisation)
                                .getLookUpId());
            }

            tbAcSecondaryheadMasterEntity.setLgIpMacUpd(tbAcSecondaryheadMaster.getLgIpMac());
            tbAcSecondaryheadMasterEntity.setUpdatedBy(tbAcSecondaryheadMaster.getUserId());
            tbAcSecondaryheadMasterEntity.setOldAliasLendgerCode(tbAcSecondaryheadMaster.getOldAliasLendgerCode());
            tbAcSecondaryheadMasterEntity.setOldSacHeadCode(tbAcSecondaryheadMaster.getOldSacHeadCode());
            tbAcSecondaryheadMasterEntity.setStatusReason(tbAcSecondaryheadMaster.getStatusReason());
            final StringBuilder builder1 = generateEditAccountHeadCode(tbAcSecondaryheadMaster,
                    tbAcSecondaryheadMasterEntity);
            tbAcSecondaryheadMasterEntity.setAcHeadCode(builder1.toString());
            
            LookUp fundTypeLevel = null;
            try {
            	fundTypeLevel= CommonMasterUtility.getValueFromPrefixLookUp(MainetConstants.BUDGET_CODE.OBJECT_WISE_STATUS,
                        MainetConstants.BUDGET_CODE.FUND_FIELD_DEPT_STATUS_PREFIX,
                        organisation);
            }catch (Exception e) {
            	LOGGER.info("Exception----------->"+e);
			}
            
            if(fundTypeLevel!=null)
            tbAcSecondaryheadMasterJpaRepository.updateBudgetCodeDesc(tbAcSecondaryheadMasterEntity.getAcHeadCode(),tbAcSecondaryheadMaster.getSacHeadId(),tbAcSecondaryheadMaster.getOrgid());
            
            
        } else {
            final long lookUpId = CommonMasterUtility.lookUpIdByLookUpCodeAndPrefix(
                    PrefixConstants.ACCOUNT_MASTERS.SECONDARY_MASTER.AHS, MainetConstants.CMD, organisation.getOrgid());

            final TbAcCodingstructureMasEntity configurationMasterEntity = tbAcCodingstructureMasService
                    .findConfigurationMasterEntiry(lookUpId, organisation.getOrgid(),
                            PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE);
            tbAcSecondaryheadMaster.setCodcofdetId(tbAcCodingstructureDet
                    .findById(configurationMasterEntity.getCodcofId(), organisation.getOrgid()).getCodcofdetId());
            tbAcSecondaryheadMasterEntity = new AccountHeadSecondaryAccountCodeMasterEntity();
            tbAcSecondaryheadMasterServiceMapper.mapTbAcSecondaryheadMasterToTbAcSecondaryheadMasterEntity(
                    tbAcSecondaryheadMaster, tbAcSecondaryheadMasterEntity);

            if ((tbAcSecondaryheadMaster.getSecondaryStatus() != null)
                    && !tbAcSecondaryheadMaster.getSecondaryStatus().isEmpty()) {
                if (tbAcSecondaryheadMaster.getSecondaryStatus().equals(MainetConstants.MASTER.Y)) {
                    final String getSequence = seqGenFunctionUtility.generateSequenceNo(
                            PrefixConstants.ACCOUNT_MASTERS.SECONDARY_MASTER.SECONDARY_SEQ_DEPARTMENT_TYPE,
                            MainetConstants.SECONDARY_MASTER.SECONDARY_SEQ_TABLE_NAME,
                            MainetConstants.SECONDARY_MASTER.SECONDARY_CODE_SEQ_FIELD_NAME,
                            tbAcSecondaryheadMaster.getOrgid(),
                            MainetConstants.SECONDARY_MASTER.SECONDARY_SEQ_CONTINUE_VALUE,
                            tbAcSecondaryheadMaster.getPacHeadId()).toString();

                    final int i = getSequence.length();
                    final int getSequenceLenth = ("000" + getSequence).length();

                    final String secondaryAccountCode = ("000" + getSequence).substring(i - 1, getSequenceLenth);
                    tbAcSecondaryheadMasterEntity.setSacHeadCode(secondaryAccountCode);
                }
            }

            tbAcSecondaryheadMasterEntity.setLmoddate(new Date());

            tbAcSecondaryheadMasterEntity.setSacLeddgerTypeCpdId(tbAcSecondaryheadMaster.getSacLeddgerTypeCpdId());
            tbAcSecondaryheadMasterEntity.setSacHeadDesc(tbAcSecondaryheadMaster.getSacHeadDesc());
            if (tbAcSecondaryheadMaster.getSacStatusCpdId() != null) {
                tbAcSecondaryheadMasterEntity.setSacStatusCpdId(tbAcSecondaryheadMaster.getSacStatusCpdId());
            } else {
                tbAcSecondaryheadMasterEntity
                        .setSacStatusCpdId(CommonMasterUtility
                                .getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
                                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, organisation)
                                .getLookUpId());
            }
            tbAcSecondaryheadMasterEntity.setUserId(tbAcSecondaryheadMaster.getUserId());
            tbAcSecondaryheadMasterEntity.setLgIpMac(tbAcSecondaryheadMaster.getLgIpMac());
        }
        if (tbAcSecondaryheadMasterEntity.getOrgid() == null) {
            tbAcSecondaryheadMasterEntity.setOrgid(organisation.getOrgid());
        }

        if (tbAcSecondaryheadMaster.getFundId() != null) {
            final AccountFundMasterEntity fundEntiry = new AccountFundMasterEntity();
            fundEntiry.setFundId(tbAcSecondaryheadMaster.getFundId());
            tbAcSecondaryheadMasterEntity.setTbAcFundMaster(fundEntiry);
        }

        if (tbAcSecondaryheadMaster.getFieldId() != null) {
            final AccountFieldMasterEntity fieldEntiry = new AccountFieldMasterEntity();
            fieldEntiry.setFieldId(tbAcSecondaryheadMaster.getFieldId());
            tbAcSecondaryheadMasterEntity.setTbAcFieldMaster(fieldEntiry);
        }

        if (tbAcSecondaryheadMaster.getFunctionId() != null) {
            final AccountFunctionMasterEntity funcEntiry = new AccountFunctionMasterEntity();
            funcEntiry.setFunctionId(tbAcSecondaryheadMaster.getFunctionId());
            tbAcSecondaryheadMasterEntity.setTbAcFunctionMaster(funcEntiry);
        }
        if (tbAcSecondaryheadMaster.getSacHeadId() == null) {
            final StringBuilder builder = generateAccountHeadCode(tbAcSecondaryheadMaster,
                    tbAcSecondaryheadMasterEntity);
            tbAcSecondaryheadMasterEntity.setAcHeadCode(builder.toString());
        }
        AccountHeadSecondaryAccountCodeMasterEntity finalEntity = tbAcSecondaryheadMasterJpaRepository
                .save(tbAcSecondaryheadMasterEntity);

        if ((tbAcSecondaryheadMaster.getSacHeadId() != null) && (tbAcSecondaryheadMaster.getSacHeadId() > 0L)) {
            accountHeadSecondaryAccountCodeMasterHistEntity = new AccountHeadSecondaryAccountCodeMasterHistEntity();
            accountHeadSecondaryAccountCodeMasterHistEntity.sethStatus(MainetConstants.CommonConstants.CHAR_U);
            if ((finalEntity.getTbAcCodingstructureDet() != null)
                    && (Long.valueOf(finalEntity.getTbAcCodingstructureDet().getCodcofdetId()) != null)) {
                accountHeadSecondaryAccountCodeMasterHistEntity
                        .setTbAcCodingstructureDet(finalEntity.getTbAcCodingstructureDet().getCodcofdetId());
            }
            if ((finalEntity.getTbAcFundMaster() != null) && (finalEntity.getTbAcFundMaster().getFundId() != null)) {
                accountHeadSecondaryAccountCodeMasterHistEntity
                        .setTbAcFundMaster(finalEntity.getTbAcFundMaster().getFundId());
            }
            if ((finalEntity.getTbAcFieldMaster() != null) && (finalEntity.getTbAcFieldMaster().getFieldId() != null)) {
                accountHeadSecondaryAccountCodeMasterHistEntity
                        .setTbAcFieldMaster(finalEntity.getTbAcFieldMaster().getFieldId());
            }
            if ((finalEntity.getTbAcFunctionMaster() != null)
                    && (finalEntity.getTbAcFunctionMaster().getFunctionId() != null)) {
                accountHeadSecondaryAccountCodeMasterHistEntity
                        .setTbAcFunctionMaster(finalEntity.getTbAcFunctionMaster().getFunctionId());
            }
            if ((finalEntity.getTbAcPrimaryheadMaster() != null)
                    && (finalEntity.getTbAcPrimaryheadMaster().getPrimaryAcHeadId() != null)) {
                accountHeadSecondaryAccountCodeMasterHistEntity
                        .setTbAcPrimaryheadMaster(finalEntity.getTbAcPrimaryheadMaster().getPrimaryAcHeadId());
            }
            accountHeadSecondaryAccountCodeMasterHistEntity.setOldAliasLendgerCode(finalEntity.getOldAliasLendgerCode());
            accountHeadSecondaryAccountCodeMasterHistEntity.setOldSacHeadCode(finalEntity.getOldSacHeadCode());
            accountHeadSecondaryAccountCodeMasterHistEntity.setStatusReason(tbAcSecondaryheadMaster.getStatusReason());
            updateAccountHeadDataIntoPropertyTaxTableByUsingSoapWS(finalEntity);
            try {
                auditService.createHistory(finalEntity, accountHeadSecondaryAccountCodeMasterHistEntity);
            } catch (Exception ex) {
                LOGGER.error("Could not make audit entry for " + finalEntity, ex);
            }
        } else {
            accountHeadSecondaryAccountCodeMasterHistEntity = new AccountHeadSecondaryAccountCodeMasterHistEntity();
            accountHeadSecondaryAccountCodeMasterHistEntity.sethStatus(MainetConstants.CommonConstants.CHAR_C);
            if ((finalEntity.getTbAcCodingstructureDet() != null)
                    && (Long.valueOf(finalEntity.getTbAcCodingstructureDet().getCodcofdetId()) != null)) {
                accountHeadSecondaryAccountCodeMasterHistEntity
                        .setTbAcCodingstructureDet(finalEntity.getTbAcCodingstructureDet().getCodcofdetId());
            }
            if ((finalEntity.getTbAcFundMaster() != null) && (finalEntity.getTbAcFundMaster().getFundId() != null)) {
                accountHeadSecondaryAccountCodeMasterHistEntity
                        .setTbAcFundMaster(finalEntity.getTbAcFundMaster().getFundId());
            }
            if ((finalEntity.getTbAcFieldMaster() != null) && (finalEntity.getTbAcFieldMaster().getFieldId() != null)) {
                accountHeadSecondaryAccountCodeMasterHistEntity
                        .setTbAcFieldMaster(finalEntity.getTbAcFieldMaster().getFieldId());
            }
            if ((finalEntity.getTbAcFunctionMaster() != null)
                    && (finalEntity.getTbAcFunctionMaster().getFunctionId() != null)) {
                accountHeadSecondaryAccountCodeMasterHistEntity
                        .setTbAcFunctionMaster(finalEntity.getTbAcFunctionMaster().getFunctionId());
            }
            if ((finalEntity.getTbAcPrimaryheadMaster() != null)
                    && (finalEntity.getTbAcPrimaryheadMaster().getPrimaryAcHeadId() != null)) {
                accountHeadSecondaryAccountCodeMasterHistEntity
                        .setTbAcPrimaryheadMaster(finalEntity.getTbAcPrimaryheadMaster().getPrimaryAcHeadId());
            }
            insertAccountHeadDataIntoPropertyTaxTableByUsingSoapWS(finalEntity);
            try {
                auditService.createHistory(finalEntity, accountHeadSecondaryAccountCodeMasterHistEntity);
            } catch (Exception ex) {
                LOGGER.error("Could not make audit entry for " + finalEntity, ex);
            }
        }

        return tbAcSecondaryheadMaster;
    }

    private void insertAccountHeadDataIntoPropertyTaxTableByUsingSoapWS(
            AccountHeadSecondaryAccountCodeMasterEntity finalEntity) {
        // TODO insertAccountHeadDataIntoPropertyTaxTableByUsingSoapWS

        try {
            AccountHead accountHead = new AccountHead();
            accountHead.setAccHeadId(finalEntity.getSacHeadId());
            accountHead.setModifiedIn(finalEntity.getUserId().toString());
            accountHead.setCreatedBy(finalEntity.getUserId().toString());
            if ((finalEntity.getTbAcFunctionMaster() != null)
                    && (finalEntity.getTbAcFunctionMaster().getFunctionId() != null)) {
                // accountHead.setFunctionCode(finalEntity.getTbAcFunctionMaster().getFunctionId().toString());
                String functionCompositeCode = tbAcFunctionMasterJpaRepository
                        .getFunctionCode(finalEntity.getTbAcFunctionMaster().getFunctionId());
                // String functionMasterCode = functionCompositeCode.replace(MainetConstants.HYPHEN, MainetConstants.BLANK);
                accountHead.setFunctionCode(functionCompositeCode);
            }
            // accountHead.setSheetId("SheetId661268621");
            if (finalEntity.getLmoddate() != null) {
                GregorianCalendar cal = new GregorianCalendar();
                cal.setTime(finalEntity.getLmoddate());
                accountHead.setCreatedAt(DatatypeFactory.newInstance().newXMLGregorianCalendar(cal));
            }
            accountHead.setMetadata(finalEntity.getLgIpMac());
            accountHead.setSheetName(finalEntity.getSacHeadId().toString());
            accountHead.setAccHeadName(finalEntity.getAcHeadCode());
            if (finalEntity.getUpdatedBy() != null) {
                accountHead.setModifiedBy(finalEntity.getUpdatedBy().toString());
            }
            // accountHead.setCaption("Caption1915891949");
            accountHead.setAccDesc(finalEntity.getSacHeadDesc());
            // accountHead.setAssignedTo("AssignedTo933357387");
            if (finalEntity.getUpdatedDate() != null) {
                GregorianCalendar cal = new GregorianCalendar();
                cal.setTime(finalEntity.getUpdatedDate());
                accountHead.setModifiedAt(DatatypeFactory.newInstance().newXMLGregorianCalendar(cal));
            }
            // accountHead.setModifiedAt(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-05-11T14:48:31.722+05:30"));
            // accountHead.setTenant("Tenant900746245");
            accountHead.setAccHeadCode(finalEntity.getSacHeadCode());
            accountHead.setULBCode(finalEntity.getOrgid().toString());
            // accountHead.setProcessInstance("ProcessInstance588319032");
            // accountHead.setSheetMetadataName("SheetMetadataName-736835570");
            accountHead.setSACLEDTYPE(finalEntity.getSacLeddgerTypeCpdId());
            accountHead.setSTATUSCPDID(finalEntity.getSacStatusCpdId());
            accountHeadProvisionService.createAccountHead(accountHead);

        } catch (DatatypeConfigurationException ex) {
            throw new FrameworkException(DATE_COVERT_EXCEPTION + ex);
        }
    }

    private void updateAccountHeadDataIntoPropertyTaxTableByUsingSoapWS(
            AccountHeadSecondaryAccountCodeMasterEntity finalEntity) {
        // TODO updateAccountHeadDataIntoPropertyTaxTableByUsingSoapWS

        try {
            AccountHead accountHead = new AccountHead();
            accountHead.setAccHeadId(finalEntity.getSacHeadId());
            accountHead.setModifiedIn(finalEntity.getUserId().toString());
            accountHead.setCreatedBy(finalEntity.getUserId().toString());
            if ((finalEntity.getTbAcFunctionMaster() != null)
                    && (finalEntity.getTbAcFunctionMaster().getFunctionId() != null)) {
                // accountHead.setFunctionCode(finalEntity.getTbAcFunctionMaster().getFunctionId().toString());
                String functionCompositeCode = tbAcFunctionMasterJpaRepository
                        .getFunctionCode(finalEntity.getTbAcFunctionMaster().getFunctionId());
                // String functionMasterCode = functionCompositeCode.replace(MainetConstants.HYPHEN, MainetConstants.BLANK);
                accountHead.setFunctionCode(functionCompositeCode);
            }
            // accountHead.setSheetId("SheetId661268621");
            if (finalEntity.getLmoddate() != null) {
                GregorianCalendar cal = new GregorianCalendar();
                cal.setTime(finalEntity.getLmoddate());
                accountHead.setCreatedAt(DatatypeFactory.newInstance().newXMLGregorianCalendar(cal));
            }
            accountHead.setMetadata(finalEntity.getLgIpMac());
            accountHead.setSheetName(finalEntity.getSacHeadId().toString());
            accountHead.setAccHeadName(finalEntity.getAcHeadCode());
            if (finalEntity.getUpdatedBy() != null) {
                accountHead.setModifiedBy(finalEntity.getUpdatedBy().toString());
            }
            // accountHead.setCaption("Caption1915891949");
            accountHead.setAccDesc(finalEntity.getSacHeadDesc());
            // accountHead.setAssignedTo("AssignedTo933357387");
            if (finalEntity.getUpdatedDate() != null) {
                GregorianCalendar cal = new GregorianCalendar();
                cal.setTime(finalEntity.getUpdatedDate());
                accountHead.setModifiedAt(DatatypeFactory.newInstance().newXMLGregorianCalendar(cal));
            }
            // accountHead.setModifiedAt(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-05-11T14:48:31.722+05:30"));
            // accountHead.setTenant("Tenant900746245");
            accountHead.setAccHeadCode(finalEntity.getSacHeadCode());
            accountHead.setULBCode(finalEntity.getOrgid().toString());
            // accountHead.setProcessInstance("ProcessInstance588319032");
            // accountHead.setSheetMetadataName("SheetMetadataName-736835570");
            accountHead.setSACLEDTYPE(finalEntity.getSacLeddgerTypeCpdId());
            accountHead.setSTATUSCPDID(finalEntity.getSacStatusCpdId());
            accountHeadProvisionService.updateAccountHead(accountHead);

        } catch (DatatypeConfigurationException ex) {
            throw new FrameworkException(DATE_COVERT_EXCEPTION + ex);
        }
    }

    private StringBuilder generateAccountHeadCode(final SecondaryheadMaster tbAcSecondaryheadMaster,
            final AccountHeadSecondaryAccountCodeMasterEntity tbAcSecondaryheadMasterEntity) {

        // String fundCode = MainetConstants.BLANK;
        // String fieldCode = MainetConstants.BLANK;
        String functionMasterCode = MainetConstants.BLANK;
        String primaryHeadCode = MainetConstants.BLANK;
        String sacHeadCode = MainetConstants.BLANK;
        String sacHeadDesc = MainetConstants.BLANK;
        /*
         * if (tbAcSecondaryheadMaster.getFundId() != null) { final String fundCompositeCode = tbAcFundMasterJpaRepository
         * .getFundCode(tbAcSecondaryheadMaster.getFundId()); fundCode = fundCompositeCode.replace(MainetConstants.HYPHEN,
         * MainetConstants.BLANK); } if (tbAcSecondaryheadMaster.getFieldId() != null) { final String fieldCompositeCode =
         * tbAcFieldMasterJpaRepository .getFieldCode(tbAcSecondaryheadMaster.getFieldId()); fieldCode =
         * fieldCompositeCode.replace(MainetConstants.HYPHEN, MainetConstants.BLANK); }
         */
        if (tbAcSecondaryheadMaster.getFunctionId() != null) {
            final String functionCompositeCode = tbAcFunctionMasterJpaRepository
                    .getFunctionCode(tbAcSecondaryheadMaster.getFunctionId());
            functionMasterCode = functionCompositeCode.replace(MainetConstants.HYPHEN, MainetConstants.BLANK);
        }
        if (tbAcSecondaryheadMaster.getPacHeadId() != null) {
            final String primaryCompositeCode = acPrimaryCodeMasterJpaRepository
                    .findByPrimaryHeadCode(tbAcSecondaryheadMaster.getPacHeadId());
            primaryHeadCode = primaryCompositeCode.replace(MainetConstants.HYPHEN, MainetConstants.BLANK);
        }
        if ((tbAcSecondaryheadMasterEntity.getSacHeadCode() != null)
                && !tbAcSecondaryheadMasterEntity.getSacHeadCode().isEmpty()) {
            sacHeadCode = tbAcSecondaryheadMasterEntity.getSacHeadCode();
        }
        if ((tbAcSecondaryheadMaster.getSacHeadDesc() != null) && !tbAcSecondaryheadMaster.getSacHeadDesc().isEmpty()) {
            sacHeadDesc = tbAcSecondaryheadMaster.getSacHeadDesc();
        }
        final StringBuilder builder = new StringBuilder();
        builder.append(tbAcSecondaryheadMaster.getFunctionId() == null ? MainetConstants.BLANK
                : functionMasterCode + MainetConstants.SEPARATOR)
                .append(tbAcSecondaryheadMaster.getPacHeadId() == null ? MainetConstants.BLANK
                        : primaryHeadCode + MainetConstants.SEPARATOR)
                .append(((sacHeadCode == null) || sacHeadCode.isEmpty()) ? MainetConstants.BLANK
                        : sacHeadCode + MainetConstants.SEPARATOR)
                .append(((sacHeadDesc == null) || sacHeadDesc.isEmpty()) ? MainetConstants.BLANK : sacHeadDesc);
        return builder;
    }

    private StringBuilder generateEditAccountHeadCode(final SecondaryheadMaster tbAcSecondaryheadMaster,
            final AccountHeadSecondaryAccountCodeMasterEntity tbAcSecondaryheadMasterEntity) {

        // String fundCode = MainetConstants.BLANK;
        // String fieldCode = MainetConstants.BLANK;
        String functionMasterCode = MainetConstants.BLANK;
        String primaryHeadCode = MainetConstants.BLANK;
        String sacHeadCode = MainetConstants.BLANK;
        String sacHeadDesc = MainetConstants.BLANK;
        /*
         * if (tbAcSecondaryheadMasterEntity.getTbAcFundMaster() != null) { if
         * ((tbAcSecondaryheadMasterEntity.getTbAcFundMaster().getFundCompositecode() != null) &&
         * !tbAcSecondaryheadMasterEntity.getTbAcFundMaster().getFundCompositecode().isEmpty()) { final String fundCompositeCode =
         * tbAcSecondaryheadMasterEntity.getTbAcFundMaster() .getFundCompositecode(); fundCode =
         * fundCompositeCode.replace(MainetConstants.HYPHEN, MainetConstants.BLANK); } } if
         * (tbAcSecondaryheadMasterEntity.getTbAcFieldMaster() != null) { if
         * ((tbAcSecondaryheadMasterEntity.getTbAcFieldMaster().getFieldCompcode() != null) &&
         * !tbAcSecondaryheadMasterEntity.getTbAcFieldMaster().getFieldCompcode().isEmpty()) { final String fieldCompositeCode =
         * tbAcSecondaryheadMasterEntity.getTbAcFieldMaster().getFieldCompcode(); fieldCode =
         * fieldCompositeCode.replace(MainetConstants.HYPHEN, MainetConstants.BLANK); } }
         */
        /*if (tbAcSecondaryheadMasterEntity.getTbAcFunctionMaster() != null) {
            if ((tbAcSecondaryheadMasterEntity.getTbAcFunctionMaster().getFunctionCompcode() != null)
                    && !tbAcSecondaryheadMasterEntity.getTbAcFunctionMaster().getFunctionCompcode().isEmpty()) {
                final String functionCompositeCode = tbAcSecondaryheadMasterEntity.getTbAcFunctionMaster()
                        .getFunctionCompcode();
                functionMasterCode = functionCompositeCode.replace(MainetConstants.HYPHEN, MainetConstants.BLANK);
            }
        }*/
        
        if (tbAcSecondaryheadMaster.getFunctionId() != null) {
            final String functionCompositeCode = tbAcFunctionMasterJpaRepository
                    .getFunctionCode(tbAcSecondaryheadMaster.getFunctionId());
            functionMasterCode = functionCompositeCode.replace(MainetConstants.HYPHEN, MainetConstants.BLANK);
        }
        
        if (tbAcSecondaryheadMasterEntity.getTbAcPrimaryheadMaster() != null) {
            if ((tbAcSecondaryheadMasterEntity.getTbAcPrimaryheadMaster().getPrimaryAcHeadCompcode() != null)
                    && !tbAcSecondaryheadMasterEntity.getTbAcPrimaryheadMaster().getPrimaryAcHeadCompcode().isEmpty()) {
                final String primaryCompositeCode = tbAcSecondaryheadMasterEntity.getTbAcPrimaryheadMaster()
                        .getPrimaryAcHeadCompcode();
                primaryHeadCode = primaryCompositeCode.replace(MainetConstants.HYPHEN, MainetConstants.BLANK);
            }
        }
        if ((tbAcSecondaryheadMasterEntity.getSacHeadCode() != null)
                && !tbAcSecondaryheadMasterEntity.getSacHeadCode().isEmpty()) {
            sacHeadCode = tbAcSecondaryheadMasterEntity.getSacHeadCode();
        }
        if ((tbAcSecondaryheadMaster.getSacHeadCodeDesc() != null)
                && !tbAcSecondaryheadMaster.getSacHeadCodeDesc().isEmpty()) {
            sacHeadDesc = tbAcSecondaryheadMaster.getSacHeadCodeDesc();
        } else {
            sacHeadDesc = tbAcSecondaryheadMaster.getSacHeadDesc();
        }
        final StringBuilder builder = new StringBuilder();
        builder.append(((functionMasterCode == null) || functionMasterCode.isEmpty()) ? MainetConstants.BLANK
                : functionMasterCode + MainetConstants.SEPARATOR)
                .append(((primaryHeadCode == null) || primaryHeadCode.isEmpty()) ? MainetConstants.BLANK
                        : primaryHeadCode + MainetConstants.SEPARATOR)
                .append(((sacHeadCode == null) || sacHeadCode.isEmpty()) ? MainetConstants.BLANK
                        : sacHeadCode + MainetConstants.SEPARATOR)
                .append(((sacHeadDesc == null) || sacHeadDesc.isEmpty()) ? MainetConstants.BLANK : sacHeadDesc);
        return builder;
    }

    @Override
    @Transactional
    public SecondaryheadMaster update(final SecondaryheadMaster tbAcSecondaryheadMaster) {
        final AccountHeadSecondaryAccountCodeMasterEntity tbAcSecondaryheadMasterEntity = tbAcSecondaryheadMasterJpaRepository
                .findOne(tbAcSecondaryheadMaster.getSacHeadId());
        tbAcSecondaryheadMasterServiceMapper.mapTbAcSecondaryheadMasterToTbAcSecondaryheadMasterEntity(
                tbAcSecondaryheadMaster, tbAcSecondaryheadMasterEntity);
        final AccountHeadSecondaryAccountCodeMasterEntity tbAcSecondaryheadMasterEntitySaved = tbAcSecondaryheadMasterJpaRepository
                .save(tbAcSecondaryheadMasterEntity);
        return tbAcSecondaryheadMasterServiceMapper
                .mapTbAcSecondaryheadMasterEntityToTbAcSecondaryheadMaster(tbAcSecondaryheadMasterEntitySaved);
    }

    @Override
    @Transactional
    public void delete(final Long sacHeadId) {
        tbAcSecondaryheadMasterJpaRepository.delete(sacHeadId);
    }

    public SecondaryheadMasterJpaRepository getTbAcSecondaryheadMasterJpaRepository() {
        return tbAcSecondaryheadMasterJpaRepository;
    }

    public void setTbAcSecondaryheadMasterJpaRepository(
            final SecondaryheadMasterJpaRepository tbAcSecondaryheadMasterJpaRepository) {
        this.tbAcSecondaryheadMasterJpaRepository = tbAcSecondaryheadMasterJpaRepository;
    }

    public TbAcSecondaryheadMasterServiceMapper getTbAcSecondaryheadMasterServiceMapper() {
        return tbAcSecondaryheadMasterServiceMapper;
    }

    public void setTbAcSecondaryheadMasterServiceMapper(
            final TbAcSecondaryheadMasterServiceMapper tbAcSecondaryheadMasterServiceMapper) {
        this.tbAcSecondaryheadMasterServiceMapper = tbAcSecondaryheadMasterServiceMapper;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.account.service.TbAcSecondaryheadMasterService# getLastLevels(java.lang.Long)
     */
    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getSecondaryHeadCodeLastLevels(final Long orgId) {
        final Map<Long, String> map = new TreeMap<>();
        List<AccountHeadSecondaryAccountCodeMasterEntity> secondaryList = null;

        secondaryList = tbAcSecondaryheadMasterJpaRepository.getLevelCode();

        if ((secondaryList != null) && !secondaryList.isEmpty()) {
            String value = null;
            for (final AccountHeadSecondaryAccountCodeMasterEntity function : secondaryList) {
                value = function.getSacHeadDesc();
                map.put(function.getSacHeadId(), value);
            }
        }
        return map;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findAllById(final Long primaryAcHeadId) {
        final List<AccountHeadSecondaryAccountCodeMasterEntity> secondaryList = tbAcSecondaryheadMasterJpaRepository
                .findAllById(primaryAcHeadId);
        final Map<Long, String> mapSecondary = new TreeMap<>();
        if ((secondaryList != null) && !secondaryList.isEmpty()) {
            String value = null;
            for (final AccountHeadSecondaryAccountCodeMasterEntity secondaryCode : secondaryList) {
                value = secondaryCode.getSacHeadCode() + MainetConstants.HYPHEN + secondaryCode.getSacHeadDesc();
                mapSecondary.put(secondaryCode.getSacHeadId(), value);
            }
        }
        return mapSecondary;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findPrimarySecondaryHead(final Long orgid) {
        final Map<Long, String> mapSecondary = new LinkedHashMap<>();
        final List<Object[]> secondaryList = tbAcSecondaryheadMasterJpaRepository.findPrimarySecondaryHead(orgid);
        if ((secondaryList != null) && !secondaryList.isEmpty()) {
            for (final Object[] secondaryCodeArray : secondaryList) {
                if ((secondaryCodeArray[0] != null) && (secondaryCodeArray[1] != null)
                        && (secondaryCodeArray[2] != null) && (secondaryCodeArray[3] != null)) {
                    mapSecondary.put(Long.valueOf(secondaryCodeArray[0].toString()),
                            secondaryCodeArray[1].toString() + MainetConstants.SEPARATOR
                                    + secondaryCodeArray[2].toString() + MainetConstants.SEPARATOR
                                    + secondaryCodeArray[3].toString());
                }
            }
        }
        return mapSecondary;
    }

    @Override
    @Transactional(readOnly = true)
    public String findByPacHeadId(final Long sacHeadId, final Long orgId) {
        final String primaryHeadCompositeCode = tbAcSecondaryheadMasterJpaRepository.findByPacHeadId(sacHeadId, orgId);
        return primaryHeadCompositeCode;
    }

    @Override
    @Transactional(readOnly = true)
    public String findBysacHeadCodeDesc(final Long sacHeadId, final Long orgId) {
        final List<Object[]> secondaryHeadCodeDesc = tbAcSecondaryheadMasterJpaRepository
                .findBysacHeadCodeDesc(sacHeadId, orgId);
        String sacHeadCodeDesc = null;
        for (final Object[] objects : secondaryHeadCodeDesc) {
            if ((objects[0] != null) && (objects[1] != null) && (objects[2] != null)) {
                sacHeadCodeDesc = objects[2].toString();
            }
        }
        return sacHeadCodeDesc;
    }

    @Override
    public Map<Long, String> findPrimarySecondaryHeadForJournalVoucher(final Long orgid) {
        final Map<Long, String> mapSecondary = new TreeMap<>();
        return mapSecondary;
    }

    @Override
    @Transactional(readOnly = true)
    public String findByPrimarySacHeadCodeDesc(final Long sacHeadId) {
        final List<Object[]> secondaryHeadCodeDesc = tbAcSecondaryheadMasterJpaRepository
                .findByPrimarySacHeadCodeDesc(sacHeadId);
        String sacHeadCodeDesc = null;
        for (final Object[] objects : secondaryHeadCodeDesc) {
            if ((objects[0] != null) && (objects[1] != null) && (objects[2] != null)) {
                sacHeadCodeDesc = objects[0].toString().replaceAll("-","") + MainetConstants.SEPARATOR + objects[1].toString()
                        + MainetConstants.SEPARATOR + objects[2].toString();
            }
        }
        return sacHeadCodeDesc;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findStatusPrimarySecondaryHeadData(final Long orgid, final Organisation organisation,
            final int langId) {
        final Map<Long, String> mapSecondary = new LinkedHashMap<>();
        final List<Object[]> secondaryList = tbAcSecondaryheadMasterJpaRepository
                .findStatusPrimarySecondaryHeadData(orgid);
        if ((secondaryList != null) && !secondaryList.isEmpty()) {
            for (final Object[] secondaryCodeArray : secondaryList) {
                final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
                final LookUp oTLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
                        PrefixConstants.ACCOUNT_MASTERS.SECONDARY_MASTER.SECONDARY_OTHER_CPD_VALUE,
                        PrefixConstants.ACCOUNT_MASTERS.SECONDARY_MASTER.SECONDARY_LOOKUPCODE, langId, organisation);
                final Long lookUpStatusId = statusLookup.getLookUpId();
                final Long lookUpOTId = oTLookup.getLookUpId();
                Long statusPac = null;
                Long statusSac = null;
                Long statusOT = null;
                if (secondaryCodeArray[4] != null) {
                    statusPac = Long.valueOf(secondaryCodeArray[4].toString());
                    if (secondaryCodeArray[5] != null) {
                        statusSac = Long.valueOf(secondaryCodeArray[5].toString());
                        if (secondaryCodeArray[6] != null) {
                            statusOT = Long.valueOf(secondaryCodeArray[6].toString());
                            if (lookUpStatusId.equals(statusPac) && lookUpStatusId.equals(statusSac)
                                    && (lookUpOTId.equals(statusOT))) {
                                if ((secondaryCodeArray[0] != null) && (secondaryCodeArray[1] != null)
                                        && (secondaryCodeArray[2] != null) && (secondaryCodeArray[3] != null)) {
                                    mapSecondary.put(Long.valueOf(secondaryCodeArray[0].toString()),
                                            secondaryCodeArray[1].toString() + MainetConstants.SEPARATOR
                                                    + secondaryCodeArray[2].toString() + MainetConstants.SEPARATOR
                                                    + secondaryCodeArray[3].toString());
                                }
                            }
                        }
                    }
                }
            }
        }
        return mapSecondary;
    }
    
    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findStatusPrimarySecondaryHeadDataDeposit(final Long orgid, final Organisation organisation,
            final int langId) {
        final Map<Long, String> mapSecondary = new LinkedHashMap<>();
        final List<Object[]> secondaryList = tbAcSecondaryheadMasterJpaRepository
                .findStatusPrimarySecondaryHeadDataForDeposit(orgid);
        if ((secondaryList != null) && !secondaryList.isEmpty()) {
            for (final Object[] secondaryCodeArray : secondaryList) {
                final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
                final LookUp oTLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
                        PrefixConstants.ACCOUNT_MASTERS.SECONDARY_MASTER.SECONDARY_OTHER_CPD_VALUE,
                        PrefixConstants.ACCOUNT_MASTERS.SECONDARY_MASTER.SECONDARY_LOOKUPCODE, langId, organisation);
                final Long lookUpStatusId = statusLookup.getLookUpId();
                final Long lookUpOTId = oTLookup.getLookUpId();
                Long statusPac = null;
                Long statusSac = null;
                Long statusOT = null;
                if (secondaryCodeArray[4] != null) {
                    statusPac = Long.valueOf(secondaryCodeArray[4].toString());
                    if (secondaryCodeArray[5] != null) {
                        statusSac = Long.valueOf(secondaryCodeArray[5].toString());
                        if (secondaryCodeArray[6] != null) {
                            statusOT = Long.valueOf(secondaryCodeArray[6].toString());
                            if (lookUpStatusId.equals(statusPac) && lookUpStatusId.equals(statusSac)
                                    && (lookUpOTId.equals(statusOT))) {
                            	if((secondaryCodeArray[7] != null)) {
                            		 mapSecondary.put(Long.valueOf(secondaryCodeArray[0].toString()),
                                             secondaryCodeArray[7].toString());
                            		
                            	}else if ((secondaryCodeArray[0] != null) && (secondaryCodeArray[1] != null)
                                        && (secondaryCodeArray[2] != null) && (secondaryCodeArray[3] != null)) {
                                    mapSecondary.put(Long.valueOf(secondaryCodeArray[0].toString()),
                                            secondaryCodeArray[1].toString() + MainetConstants.SEPARATOR
                                                    + secondaryCodeArray[2].toString() + MainetConstants.SEPARATOR
                                                    + secondaryCodeArray[3].toString());
                                }
                            }
                        }
                    }
                }
            }
        }
        return mapSecondary;
    }
    
    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findStatusPrimarySecondaryHeadDataFuntId(final Long orgid, final Organisation organisation,
            final int langId,final Long functionId) {
        final Map<Long, String> mapSecondary = new LinkedHashMap<>();
        final List<Object[]> secondaryList = tbAcSecondaryheadMasterJpaRepository
                .findStatusPrimarySecondaryHeadDataFuntId(orgid,functionId);
        if ((secondaryList != null) && !secondaryList.isEmpty()) {
            for (final Object[] secondaryCodeArray : secondaryList) {
                final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
                final LookUp oTLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
                        PrefixConstants.ACCOUNT_MASTERS.SECONDARY_MASTER.SECONDARY_OTHER_CPD_VALUE,
                        PrefixConstants.ACCOUNT_MASTERS.SECONDARY_MASTER.SECONDARY_LOOKUPCODE, langId, organisation);
                final Long lookUpStatusId = statusLookup.getLookUpId();
                final Long lookUpOTId = oTLookup.getLookUpId();
                Long statusPac = null;
                Long statusSac = null;
                Long statusOT = null;
                if (secondaryCodeArray[4] != null) {
                    statusPac = Long.valueOf(secondaryCodeArray[4].toString());
                    if (secondaryCodeArray[5] != null) {
                        statusSac = Long.valueOf(secondaryCodeArray[5].toString());
                        if (secondaryCodeArray[6] != null) {
                            statusOT = Long.valueOf(secondaryCodeArray[6].toString());
                            if (lookUpStatusId.equals(statusPac) && lookUpStatusId.equals(statusSac)
                                    && (lookUpOTId.equals(statusOT))) {
                                if ((secondaryCodeArray[0] != null) && (secondaryCodeArray[1] != null)
                                        && (secondaryCodeArray[2] != null) && (secondaryCodeArray[3] != null)) {
                                    mapSecondary.put(Long.valueOf(secondaryCodeArray[0].toString()),
                                            secondaryCodeArray[1].toString() + MainetConstants.SEPARATOR
                                                    + secondaryCodeArray[2].toString() + MainetConstants.SEPARATOR
                                                    + secondaryCodeArray[3].toString());
                                }
                            }
                        }
                    }
                }
            }
        }
        return mapSecondary;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.account.service.TbAcSecondaryheadMasterService# getLastLevels(java.lang.Long)
     */
    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getSecondaryHeadCodeOnlyLastLevels(final Long orgId) {
        final Map<Long, String> map = new TreeMap<>();
        List<AccountHeadSecondaryAccountCodeMasterEntity> secondaryList = null;

        secondaryList = tbAcSecondaryheadMasterJpaRepository.getLevelCode();

        if ((secondaryList != null) && !secondaryList.isEmpty()) {
            for (final AccountHeadSecondaryAccountCodeMasterEntity sacHead : secondaryList) {
                if ((sacHead.getSacHeadId() != null)
                        && ((sacHead.getSacHeadCode() != null) && !sacHead.getSacHeadCode().isEmpty())) {
                    map.put(sacHead.getSacHeadId(), sacHead.getSacHeadCode());
                }
            }
        }
        return map;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findPrimarySecondaryHeadDepTypes(final Long depTypeId, final Long statusId,
            final Long orgId) {
        final Map<Long, String> mapPrimarySecondaryHead = new LinkedHashMap<>();
        final List<Object[]> secondaryHeadList = tbAcSecondaryheadMasterJpaRepository
                .findPrimarySecondaryHeadDepTypes(depTypeId, statusId, orgId);
        if ((secondaryHeadList != null) && !secondaryHeadList.isEmpty()) {
            for (final Object[] secondaryCodeArray : secondaryHeadList) {
                if ((secondaryCodeArray[0] != null) && (secondaryCodeArray[1] != null)
                        && (secondaryCodeArray[2] != null) && (secondaryCodeArray[3] != null)) {
                    mapPrimarySecondaryHead.put(Long.valueOf(secondaryCodeArray[0].toString()),
                            secondaryCodeArray[1].toString() + MainetConstants.SEPARATOR
                                    + secondaryCodeArray[2].toString() + MainetConstants.SEPARATOR
                                    + secondaryCodeArray[3].toString());
                }
            }
        }
        return mapPrimarySecondaryHead;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findBudgetHeadDepTypes(final Long depTypeId, final Long cpdDepositType,
            final Long statusId, final Long orgId) {
        final Map<Long, String> mapBudgetHead = new LinkedHashMap<>();
        final List<Object[]> budgetHeadList = tbAcSecondaryheadMasterJpaRepository.findBudgetHeadDepTypes(depTypeId,
                cpdDepositType, statusId, orgId);
        if ((budgetHeadList != null) && !budgetHeadList.isEmpty()) {
            for (final Object[] budgetCodeArray : budgetHeadList) {
                if ((budgetCodeArray[0] != null)
                        && ((budgetCodeArray[1] != null) && !budgetCodeArray[1].toString().isEmpty())) {
                    mapBudgetHead.put((Long) budgetCodeArray[0], budgetCodeArray[1].toString());
                }
            }
        }
        return mapBudgetHead;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findAccountHeadDepTypes(final Long depTypeId, final Long depSubTypeId, final Long statusId,
            final Long orgId) {
        final Map<Long, String> mapBudgetHead = new LinkedHashMap<>();
        final List<Object[]> budgetHeadList = tbAcSecondaryheadMasterJpaRepository.findAccountHeadDepTypes(depTypeId,
                depSubTypeId, statusId, orgId);
        if ((budgetHeadList != null) && !budgetHeadList.isEmpty()) {
            for (final Object[] budgetCodeArray : budgetHeadList) {
                if ((budgetCodeArray[0] != null)
                        && ((budgetCodeArray[1] != null) && !budgetCodeArray[1].toString().isEmpty())) {
                    mapBudgetHead.put((Long) budgetCodeArray[0], budgetCodeArray[1].toString());
                }
            }
        }
        return mapBudgetHead;
    }

    @Override
    @Transactional
    public List<SecondaryheadMaster> findByAllGridSearchData(final Long fundId, final Long fieldId,
            final Long pacHeadId, final Long functionId, final Long sacHeadId, final Long ledgerTypeId,
            final Long defaultOrgId) {
        final Iterable<AccountHeadSecondaryAccountCodeMasterEntity> entities = tbAcSecondaryheadMasterDao
                .findByAllGridSearchData(fundId, fieldId, pacHeadId, functionId, sacHeadId, ledgerTypeId, defaultOrgId);
        final List<SecondaryheadMaster> beans = new ArrayList<>();
        if (entities != null) {
            for (final AccountHeadSecondaryAccountCodeMasterEntity tbAcSecondaryheadMasterEntity : entities) {
                beans.add(tbAcSecondaryheadMasterServiceMapper
                        .mapTbAcSecondaryheadMasterEntityToTbAcSecondaryheadMaster(tbAcSecondaryheadMasterEntity));
            }
        }
        return beans;
    }

    @Override
    @Transactional(readOnly = true)
    public List<LookUp> findAccountHeadsByOrgId(final Long orgId) {

        final List<Object[]> list = tbAcSecondaryheadMasterJpaRepository.findAccountHeadsByOrgId(orgId);
        if ((list == null) || list.isEmpty()) {
            LOGGER.error("No Record found from TB_AC_SECONDARYHEAD_MASTER for orgId=" + orgId);
        }
        return prepareAccountHeadLookUps(list);
    }

    private List<LookUp> prepareAccountHeadLookUps(final List<Object[]> list) {
        final List<LookUp> acHeadlookUps = new ArrayList<>();
        for (final Object[] acHeadArray : list) {
            final LookUp lookUp = new LookUp();
            lookUp.setLookUpId((long) acHeadArray[0]);
            lookUp.setDescLangFirst((String) acHeadArray[1]);
            acHeadlookUps.add(lookUp);
        }
        return acHeadlookUps;
    }

    @Override
    @Transactional
    public List<Object[]> findSacHeadIdDescAllData(final Long orgId, final Long statusId) {
        final List<Object[]> budgetHeadList = tbAcSecondaryheadMasterJpaRepository.findSacHeadIdDescAllData(statusId,
                orgId);
        return budgetHeadList;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findExpenditureHeadMap(final Long orgId) {

        Organisation organisation = new Organisation();
        organisation.setOrgid(orgId);
        final List<Object[]> resultList = tbAcSecondaryheadMasterJpaRepository.findExpenditureHeadsByOrgId(orgId);
        final Map<Long, String> expenditureHeadMap = new LinkedHashMap<>();

        Long cpdIdStatus = CommonMasterUtility
                .getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, organisation)
                .getLookUpId();

        if ((resultList != null) && !resultList.isEmpty()) {
            for (final Object[] objects : resultList) {
                if (objects[2] != null) {
                    if (cpdIdStatus.equals(Long.valueOf((objects[2]).toString()))) {
                        expenditureHeadMap.put((Long) objects[0], headDesc((String) objects[1]));
                    }
                }
            }
        } else {
            LOGGER.error("No Expenditure Heads found from query");
        }
        return expenditureHeadMap;
    }

    @Override
    @Transactional
    public Map<Long, String> findExpenditureHeadMapForView(final Long orgId) {

        Organisation organisation = new Organisation();
        organisation.setOrgid(orgId);
        final List<Object[]> resultList = tbAcSecondaryheadMasterJpaRepository.findAccountHeadsByOrgId(orgId);
        // final List<Object[]> resultList = tbAcSecondaryheadMasterJpaRepository.findExpenditureHeadsByOrgId(orgId);
        final Map<Long, String> expenditureHeadMap = new LinkedHashMap<>();
        if ((resultList != null) && !resultList.isEmpty()) {
            for (final Object[] objects : resultList) {
                expenditureHeadMap.put((Long) objects[0], headDesc((String) objects[1]));
            }
        } else {
            LOGGER.error("No Expenditure Heads found from query");
        }
        return expenditureHeadMap;
    }

    @Override
    @Transactional
    public Map<Long, String> getAcHeadCodeInReceieptEntry(final Long activeStatusId, final Long orgId) {

        Long depRecCategoryTypeId = CommonMasterUtility.lookUpIdByLookUpCodeAndPrefix(
                PrefixConstants.AccountBillEntry.DP, PrefixConstants.TbAcVendormaster.SAM, orgId);
        Long advRecCategoryTypeId = CommonMasterUtility.lookUpIdByLookUpCodeAndPrefix(
                PrefixConstants.StandardAccountHeadMapping.AD, PrefixConstants.TbAcVendormaster.SAM, orgId);

        final Map<Long, String> acHeadCodeMap = new HashMap<>();
        final List<Object[]> acHeadList = tbAcSecondaryheadMasterJpaRepository
                .findAcHeadCodeInReceieptEntry(activeStatusId, orgId);

        if (acHeadList != null) {
            for (final Object[] objects : acHeadList) {
                int strPacCodeValue;
                strPacCodeValue = Integer.parseInt(String.valueOf(objects[2].toString().charAt(0)));
                if ((Integer.parseInt(MainetConstants.Common_Constant.NUMBER.ONE) == strPacCodeValue)
                        || (Integer.parseInt(MainetConstants.Common_Constant.NUMBER.THREE) == strPacCodeValue)
                        || (Integer.parseInt(MainetConstants.Common_Constant.NUMBER.FOUR) == strPacCodeValue)) {
                    if (objects[3] == null) {
                        acHeadCodeMap.put((Long) objects[0], objects[1].toString());
                    } else if ((!objects[3].equals(advRecCategoryTypeId))
                            && (!objects[3].equals(depRecCategoryTypeId))) {
                        acHeadCodeMap.put((Long) objects[0], objects[1].toString());
                    }
                }
            }
        }
        return acHeadCodeMap;

    }

    private String headDesc(final String desc) {
        return desc == null ? MainetConstants.BLANK : desc;
    }

    @Override
    @Transactional
    public String getAccountHeadCodeInReceieptDetEntry(final Long sacHeadId) {
        final String acHeadCode = tbAcSecondaryheadMasterJpaRepository.getAccountHeadCodeInReceieptDetEntry(sacHeadId);
        return acHeadCode;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findDeductionHeadMap(final Long orgId) {

        Organisation org = new Organisation();
        org.setOrgid(orgId);
        LookUp lookUpSacStatus = CommonMasterUtility.getValueFromPrefixLookUp(MainetConstants.MASTER.A,
                PrefixConstants.ACN, org);
        Long lookUpId = lookUpSacStatus.getLookUpId();

        final List<Object[]> resultList = tbAcSecondaryheadMasterJpaRepository.findDeductionHeadsByOrgId(lookUpId,
                orgId);
        final Map<Long, String> deductionHeadMap = new LinkedHashMap<>();
        if ((resultList != null) && !resultList.isEmpty()) {
            for (final Object[] objects : resultList) {
                deductionHeadMap.put((Long) objects[0], headDesc((String) objects[1]));
            }
        } else {
            LOGGER.error("No Deduction Heads found from query");
        }
        return deductionHeadMap;
    }

    @Override
    @Transactional
    public Long vendorIdWiseGetFunctionIdValue(final Long VmVendorid) {
        // TODO Auto-generated method stub
        final Long functionId = tbAcSecondaryheadMasterJpaRepository.vendorIdWiseGetFunctionIdValue(VmVendorid);
        return functionId;
    }

    @Override
    @Transactional(readOnly = true)
    public List<AccountHeadSecondaryAccountCodeMasterEntity> getSecondaryHeadcodesForTax(final Long orgId) {
        return tbAcSecondaryheadMasterJpaRepository.getSecondaryHeadcodesForTax(orgId);
    }

    @Override
    @Transactional(readOnly = true)
    public String findByAccountHead(Long accountHeadId) {
        return tbAcSecondaryheadMasterJpaRepository.findByAccountHead(accountHeadId);

    }

    @Override
    @Transactional(readOnly = true)
    public List<LookUp> findAccountHeadsByOrgIdBankBook(Long orgId) {
        final List<Object[]> list = tbAcSecondaryheadMasterJpaRepository.findAccountHeadsByOrgIdBankBook(orgId);
        if ((list == null) || list.isEmpty()) {
            LOGGER.error("No Record found from TB_AC_SECONDARYHEAD_MASTER for orgId=" + orgId);
        }
        return prepareAccountHeadLookUps(list);

    }

    @Override
    @Transactional
    public List<AccountHeadSecondaryAccountCodeMasterEntity> getSacHeadCode(final Long orgId) {
        return tbAcSecondaryheadMasterJpaRepository.getSacHeadCode(orgId);
    }

    @Override
    @Transactional
    public Map<Long, String> getAllFinincialYear(Long orgId, int langId) {
        final List<Object[]> finYears = tbAcSecondaryheadMasterJpaRepository.getAllFinincialYear();
        Organisation org = new Organisation();
        org.setOrgid(orgId);
        final LookUp sliLivePrefix = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
                MainetConstants.BUG_HEAD_OPENING_BALANCE_MASTER.SLI_PREFIX_LIVE_VALUE,
                MainetConstants.BUG_HEAD_OPENING_BALANCE_MASTER.SLI_PREFIX_VALUE, langId, org);
        Date sliDate = null;
        if (sliLivePrefix.getOtherField() != null && !sliLivePrefix.getOtherField().isEmpty()) {
            final String sliLivePrefixDate = sliLivePrefix.getOtherField();
            final DateFormat formatter = new SimpleDateFormat(MainetConstants.DATE_FORMAT);
            try {
                sliDate = formatter.parse(sliLivePrefixDate);
            } catch (final ParseException e) {

                LOGGER.error("Go-live date not set in (DD/MM/YYYY) format in other value of SLI prefix", e);
                throw new IllegalArgumentException(
                        MainetConstants.AccountBudgetOpenBalance.SLI_PREFIX_LIVE_DATE + sliLivePrefixDate, e);
            }
        }
        // it will filter the list according to the sli date
        List<Object[]> financialYear = null;
        Map<Long, String> finYearMap = null;
        if (sliLivePrefix.getOtherField() != null && !sliLivePrefix.getOtherField().isEmpty()) {
            /*financialYear = finYears.stream().filter(c -> c[1] != null && Integer
                    .parseInt(new SimpleDateFormat(MainetConstants.INTEGER_DATE_FORMAT).format((Date) c[1])) >= (Integer
                            .parseInt(sliLivePrefix.getOtherField().replaceAll(MainetConstants.operator.FORWARD_SLACE,
                                    MainetConstants.CommonConstant.BLANK))))
                    .collect(Collectors.toList());*/
        	//#95904
            financialYear = finYears.stream().filter(c -> {
				try {
					return c[1] != null && new SimpleDateFormat(MainetConstants.DATE_FORMATS).parse(c[1].toString()).getTime() 
			        >=new SimpleDateFormat(MainetConstants.DATE_FORMAT).parse(sliLivePrefix.getOtherField()).getTime();
				} catch (ParseException e1) {
					  LOGGER.error("Can not parse the date ", e1);
				}
				return false;
				
			}).collect(Collectors.toList());
        }
        if (financialYear != null) {
            DateFormat formatter;
            formatter = new SimpleDateFormat(MainetConstants.YEAR_FORMAT);
            finYearMap = new LinkedHashMap<>();
            String frmdate;
            String todate;
            String date;
            if ((financialYear != null) && !financialYear.isEmpty()) {
                for (final Object[] obj : financialYear) {
                    frmdate = formatter.format(obj[1]);
                    todate = formatter.format(obj[2]);
                    if (!frmdate.isEmpty() && !todate.isEmpty()) {
                        date = MainetConstants.WHITE_SPACE + frmdate + MainetConstants.HYPHEN + todate
                                + MainetConstants.WHITE_SPACE;
                        finYearMap.put((Long) obj[0], date);
                    }
                }
            }
        } else {
            DateFormat formatter;
            formatter = new SimpleDateFormat(MainetConstants.YEAR_FORMAT);
            finYearMap = new LinkedHashMap<>();
            String frmdate;
            String todate;
            String date;
            if ((finYears != null) && !finYears.isEmpty()) {
                for (final Object[] obj : finYears) {
                    frmdate = formatter.format(obj[1]);
                    todate = formatter.format(obj[2]);
                    if (!frmdate.isEmpty() && !todate.isEmpty()) {
                        date = MainetConstants.WHITE_SPACE + frmdate + MainetConstants.HYPHEN + todate
                                + MainetConstants.WHITE_SPACE;
                        finYearMap.put((Long) obj[0], date);
                    }
                }
            }
        }

        return finYearMap;
    }

    @Override
    @Transactional(readOnly = true)
    public List<LookUp> findAccountHeadsByOrgIdCashHead(Long orgId, Long sacHeadId) {
        final List<Object[]> list = tbAcSecondaryheadMasterJpaRepository.findAccountHeadsByOrgIdBankBook(orgId);
        if ((list == null) || list.isEmpty()) {
            LOGGER.error("No Record found from TB_AC_SECONDARYHEAD_MASTER for orgId=" + orgId);
        }
        return prepareAccountHeadLookUps(list);
    }

    @Override
    @Transactional
    public Map<Long, String> getSecondaryHeadcodesForIncomeAndExpenditure(final Long orgId) {
        List<AccountHeadSecondaryAccountCodeMasterEntity> sacHeadList = tbAcSecondaryheadMasterJpaRepository
                .getSecondaryHeadcodesForIncomeAndExpenditure(orgId);
        Map<Long, String> acHeadMap = new LinkedHashMap<>();
        if (sacHeadList != null) {
            for (AccountHeadSecondaryAccountCodeMasterEntity accountHeadSecondaryAccountCodeMasterEntity : sacHeadList) {
                acHeadMap.put(accountHeadSecondaryAccountCodeMasterEntity.getSacHeadId(),
                        accountHeadSecondaryAccountCodeMasterEntity.getAcHeadCode());
            }
        }
        return acHeadMap;
    }

    @Override
    @Transactional
    public Long getSacHeadIdByBudgetCodeId(Long prBudgetCodeid, Long orgId) {
        // TODO Auto-generated method stub
        return tbAcSecondaryheadMasterJpaRepository.getSacHeadIdByBudgetCodeId(prBudgetCodeid, orgId);
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getAcHeadCodeInReceieptCategoryTypeEntry(Long activeStatusId, Long orgId,
            String recCategoryType) {
        // TODO Auto-generated method stub
        Long accountTypeId = null;
        if (recCategoryType.equals("P")) {
            accountTypeId = CommonMasterUtility.lookUpIdByLookUpCodeAndPrefix(PrefixConstants.AccountBillEntry.DP,
                    PrefixConstants.TbAcVendormaster.SAM, orgId);
        } else if (recCategoryType.equals("A")) {
            accountTypeId = CommonMasterUtility.lookUpIdByLookUpCodeAndPrefix(
                    PrefixConstants.StandardAccountHeadMapping.AD, PrefixConstants.TbAcVendormaster.SAM, orgId);
        }
        Map<Long, String> newReceiptcatoryTypeMap = new LinkedHashMap<>();
        List<Object[]> receieptCategoryType = tbAcSecondaryheadMasterJpaRepository
                .getAcHeadCodeInReceieptCategoryType(accountTypeId, activeStatusId, orgId);
        for (Object[] objects : receieptCategoryType) {
            if (objects[0] != null && objects[1] != null) {
                newReceiptcatoryTypeMap.put((Long) objects[0], (String) objects[1]);
            }
        }
        return newReceiptcatoryTypeMap;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getDirectAcHeadCodeByOrgId(Long orgId) {
        Map<Long, String> acHeadMap = new LinkedHashMap<>();
        final List<Object[]> list = tbAcSecondaryheadMasterJpaRepository.findAccountHeadsByOrgId(orgId);
        if ((list == null) || list.isEmpty()) {
            LOGGER.error("No Record found from TB_AC_SECONDARYHEAD_MASTER for orgId=" + orgId);
        } else {
            for (Object[] objects : list) {
                if (objects[0] != null && objects[1] != null) {
                    acHeadMap.put((Long) objects[0], (String) objects[1]);
                }
            }
        }
        return acHeadMap;
    }

    @Override
    @Transactional(readOnly = true)
    public String vendorIdWiseGetAccountHeadCodeValue(Long vmVendorid) {
        // TODO Auto-generated method stub
        String acHeadCode = tbAcSecondaryheadMasterJpaRepository.vendorIdWiseGetAcHeadCodeValue(vmVendorid);
        return acHeadCode;
    }

    @Override
    @Transactional(readOnly = true)
    public List<AccountHeadSecondaryAccountCodeMasterEntity> getSecondaryHeadcodesForWorks(final Long orgId) {
        return tbAcSecondaryheadMasterJpaRepository.getSecondaryHeadcodesForWorks(orgId);
    }

    @Override
    @Transactional(readOnly = true)
    public List<LookUp> findAccountHeadsByOrgIdAndStatusId(final Long orgId, final Integer langId) {
        Organisation organisation = new Organisation();
        organisation.setOrgid(orgId);
        final LookUp lookUpStatus = CommonMasterUtility.getLookUpFromPrefixLookUpValue(MainetConstants.MASTER.A,
                PrefixConstants.ACN, langId, organisation);
        final Long statusId = lookUpStatus.getLookUpId();
        List<Object[]> list = null;
        if (statusId != null && orgId != null) {
            list = tbAcSecondaryheadMasterJpaRepository.findAccountHeadsByOrgIdAndStatusId(organisation.getOrgid(),
                    statusId);
            if ((list != null) && !list.isEmpty()) {
                return prepareAccountHeadLookUps(list);

            }
            LOGGER.error("No Record found from TB_AC_SECONDARYHEAD_MASTER for orgId=" + organisation.getOrgid());
        } else {
            LOGGER.error("orgId is null  or status id is null ");

        }
        return null;
    }

    @Override
    @Transactional(readOnly = true)
    public List<Object[]> findByLedgerHeadTypeAndAccountHead(final Long orgId, final Long statusCpdId,
            final Long sacLedType, final Long cpdIdAcheadTypes) {
        return tbAcSecondaryheadMasterJpaRepository.findByLedgerHeadTypeAndAccountHead(orgId, statusCpdId, sacLedType,
                cpdIdAcheadTypes);
    }

    @Override
    public void saveSecondaryHeadExportData(AccountSecondaryHeadMasterExportDto accountSecondaryHeadMasterExportDto,
            Organisation defaultOrg, int langId) {

        SecondaryheadMaster secondaryheadMaster = new SecondaryheadMaster();
        secondaryheadMaster.setOrgid(accountSecondaryHeadMasterExportDto.getOrgid());
        secondaryheadMaster.setUserId(accountSecondaryHeadMasterExportDto.getUserId());
        secondaryheadMaster.setLangId(accountSecondaryHeadMasterExportDto.getLangId());
        secondaryheadMaster.setLmoddate(accountSecondaryHeadMasterExportDto.getLmoddate());
        secondaryheadMaster.setLgIpMac(accountSecondaryHeadMasterExportDto.getLgIpMac());
        secondaryheadMaster.setPacHeadId(Long.parseLong(accountSecondaryHeadMasterExportDto.getPrimaryHead()));
        secondaryheadMaster.setFunctionId(Long.parseLong(accountSecondaryHeadMasterExportDto.getFunction()));
        secondaryheadMaster.setSacLeddgerTypeCpdId(Long.parseLong(accountSecondaryHeadMasterExportDto.getLedgerType()));
        secondaryheadMaster.setSacHeadDesc(accountSecondaryHeadMasterExportDto.getDescription());
        secondaryheadMaster.setOldSacHeadCode(accountSecondaryHeadMasterExportDto.getOldSachHeadCode());
        secondaryheadMaster.setSecondaryStatus(accountSecondaryHeadMasterExportDto.getSecondaryStatus());
        saveSecondaryHeadData(secondaryheadMaster, defaultOrg, langId);
    }

    @Override
    @Transactional(readOnly = true)
    public List<AccountHeadSecondaryAccountCodeMasterEntity> getActiveSacHeadCodeDeatails(Long orgId, Long activeStatusId) {
        return tbAcSecondaryheadMasterJpaRepository.getActiveSacHeadCodeDeatails(orgId, activeStatusId);
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getTaxMasBillDeductionAcHeadAllDetails(Long orgid, Long taxMasLookUpId) {
        Map<Long, String> taxMasBillDedDetailsMap = new LinkedHashMap<>();
        List<Object[]> taxMasBillDedDetailsList = tbAcSecondaryheadMasterJpaRepository
                .getTaxMasBillDeductionAcHeadAllDetails(orgid, taxMasLookUpId);
        for (Object[] objects : taxMasBillDedDetailsList) {
            if (objects[0] != null && objects[1] != null) {
                taxMasBillDedDetailsMap.put((Long) objects[0], (String) objects[1]);
            }
        }
        return taxMasBillDedDetailsMap;
    }
    
    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getTaxMasBillDeductionAcHeadAllDetails(Long orgid, Long taxMasLookUpId,Long taxMasLookUpSubId) {
        Map<Long, String> taxMasBillDedDetailsMap = new LinkedHashMap<>();
        List<Object[]> taxMasBillDedDetailsList = tbAcSecondaryheadMasterJpaRepository
                .getTaxMasBillDeductionAcHeadAllDetails(orgid, taxMasLookUpId,taxMasLookUpSubId);
        for (Object[] objects : taxMasBillDedDetailsList) {
            if (objects[0] != null && objects[1] != null) {
                taxMasBillDedDetailsMap.put((Long) objects[0], (String) objects[1]);
            }
        }
        return taxMasBillDedDetailsMap;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getSecondaryHeadDesc(Long orgId) {

        Map<Long, String> secHeadDescMap = new HashMap<>();
        List<AccountHeadSecondaryAccountCodeMasterEntity> secHeadDescList = tbAcSecondaryheadMasterJpaRepository
                .getSecondaryHeadDesc(orgId);
        for (AccountHeadSecondaryAccountCodeMasterEntity secHeadMasterEntity : secHeadDescList) {
            if (secHeadMasterEntity.getSacHeadId() != null && secHeadMasterEntity.getSacHeadDesc() != null) {
                secHeadDescMap.put(secHeadMasterEntity.getSacHeadId(), secHeadMasterEntity.getSacHeadDesc());
            }
        }
        return secHeadDescMap;
    }
    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getAcHeadCode(Long orgId) {

        Map<Long, String> secHeadDescMap = new HashMap<>();
        List<AccountHeadSecondaryAccountCodeMasterEntity> secHeadDescList = tbAcSecondaryheadMasterJpaRepository
                .getSecondaryHeadDesc(orgId);
        for (AccountHeadSecondaryAccountCodeMasterEntity secHeadMasterEntity : secHeadDescList) {
            if (secHeadMasterEntity.getSacHeadId() != null && secHeadMasterEntity.getSacHeadDesc() != null) {
                secHeadDescMap.put(secHeadMasterEntity.getSacHeadId(), secHeadMasterEntity.getAcHeadCode());
            }
        }
        return secHeadDescMap;
    }
    /*
     * (non-Javadoc)
     * @see
     * com.abm.mainet.common.integration.acccount.service.SecondaryheadMasterService#getTaxMasBillPaymentsAcHeadAllDetails(java.
     * lang.Long, java.lang.Long)
     */
    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getTaxMasBillPaymentsAcHeadAllDetails(Long orgId, Long taxMasLookUpId) {
        List<Object[]> taxMasBillDedDetailsList = tbAcSecondaryheadMasterJpaRepository
                .getTaxMasBillPaymentAcHeadAllDetails(orgId, taxMasLookUpId);
        if (taxMasBillDedDetailsList == null || taxMasBillDedDetailsList.isEmpty()) {
            throw new FrameworkException(
                    "Secondary head id and code not found for taxLookUpId:" + taxMasLookUpId + ", orgId: " + orgId);
        }
        // taxMasBillDedDetailsList will always have only one record
        Object[] objects = taxMasBillDedDetailsList.get(0);
        Map<Long, String> taxMasBillDedDetailsMap = new LinkedHashMap<>();
        // headId and headCode will never be null
        if (objects[0] != null && objects[1] != null) {
            taxMasBillDedDetailsMap.put((Long) objects[0], (String) objects[1]);
        }
        return taxMasBillDedDetailsMap;
    }

    /*
     * (non-Javadoc)
     * @see
     * com.abm.mainet.common.integration.acccount.service.SecondaryheadMasterService#getTaxMasBillDeductionAcHeadDescAllDetails(
     * java.lang.Long, java.lang.Long)
     */
    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getTaxMasBillDeductionAcHeadDescAllDetails(Long orgId, Long taxMasLookUpId) {
        Map<Long, String> taxMasBillDedDetailsMap = new LinkedHashMap<>();
        List<Object[]> taxMasBillDedDetailsList = tbAcSecondaryheadMasterJpaRepository
                .getTaxMasBillDeductionAcHeadDescAllDetails(orgId, taxMasLookUpId);

        if (taxMasBillDedDetailsList == null || taxMasBillDedDetailsList.isEmpty()) {
            throw new FrameworkException(
                    "Budget head id and code not found for taxLookUpId:" + taxMasLookUpId + ", orgId: " + orgId);
        } else {
            for (Object[] objects : taxMasBillDedDetailsList) {
                // headId and headCode will never be null
                if (objects[0] != null && objects[1] != null) {
                    taxMasBillDedDetailsMap.put((Long) objects[0], (String) objects[1]);
                }
            }
        }
        return taxMasBillDedDetailsMap;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findStatusWiseObjectHeadData(Organisation organisation, int langId) {

        Map<Long, String> sacHeadMap = new LinkedHashMap<>();
        Long orgId = organisation.getOrgid();
        final LookUp lookUpStatus = CommonMasterUtility.getLookUpFromPrefixLookUpValue(MainetConstants.MASTER.A,
                PrefixConstants.ACN, langId, organisation);
        final Long statusId = lookUpStatus.getLookUpId();
        List<Object[]> list = null;
        if (statusId != null && orgId != null) {
            list = tbAcSecondaryheadMasterJpaRepository.findAccountHeadsByOrgIdAndStatusId(organisation.getOrgid(),
                    statusId);
            if ((list != null) && !list.isEmpty()) {
                for (Object[] objects : list) {
                    if (objects[0] != null && objects[1] != null) {
                        sacHeadMap.put((Long) objects[0], (String) objects[1]);
                    }
                }
            }
        }
        return sacHeadMap;
    }

    @Override
    @Transactional(readOnly = true)
    public boolean checkDupFunPriDescExist(SecondaryheadMaster secondaryheadMaster,
            Long activeStatusId) {
        boolean isValidationError = false;
        if (secondaryheadMaster.getOrgid() != null && activeStatusId != null && secondaryheadMaster.getFunctionId() != null
                && secondaryheadMaster.getPacHeadId() != null && secondaryheadMaster.getSacLeddgerTypeCpdId() != null
                && (secondaryheadMaster.getSacHeadDesc() != null && !secondaryheadMaster.getSacHeadDesc().isEmpty())) {
            List<AccountHeadSecondaryAccountCodeMasterEntity> deatails = tbAcSecondaryheadMasterJpaRepository.getDupDetails(
                    secondaryheadMaster.getOrgid(), activeStatusId, secondaryheadMaster.getFunctionId(),
                    secondaryheadMaster.getPacHeadId(), secondaryheadMaster.getSacLeddgerTypeCpdId());
            if (deatails != null && !deatails.isEmpty()) {
                for (AccountHeadSecondaryAccountCodeMasterEntity accountHeadSecondaryAccountCodeMasterEntity : deatails) {
                    if (accountHeadSecondaryAccountCodeMasterEntity.getSacHeadDesc().trim()
                            .equalsIgnoreCase(secondaryheadMaster.getSacHeadDesc().trim())) {
                        isValidationError = true;
                        break;
                    }
                }
            }
        }
        return isValidationError;
    }

    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> findExpenditureHeadMapAccountTypeIsOthers(Long orgId) {
        Organisation organisation = new Organisation();
        organisation.setOrgid(orgId);
        final List<Object[]> resultList = tbAcSecondaryheadMasterJpaRepository
                .findExpenditureHeadsByOrgIdAccountTypeOthers(orgId);
        final Map<Long, String> expenditureHeadMap = new LinkedHashMap<>();

        Long cpdIdStatus = CommonMasterUtility
                .getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
                        PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, organisation)
                .getLookUpId();

        if ((resultList != null) && !resultList.isEmpty()) {
            for (final Object[] objects : resultList) {
                if (objects[2] != null) {
                    if (cpdIdStatus.equals(Long.valueOf((objects[2]).toString()))) {
                        expenditureHeadMap.put((Long) objects[0], headDesc((String) objects[1]));
                    }
                }
            }
        } else {
            LOGGER.error("No Expenditure Heads found from query");
        }
        return expenditureHeadMap;
    }

    @Override
    @Transactional(readOnly = true)
    public List<LookUp> findExpenditureAccountHeadOnly(final Long orgId, final Integer langId, String cpdValue) {
        Organisation organisation = new Organisation();
        organisation.setOrgid(orgId);
        final Long coaLookupId = CommonMasterUtility.getLookUpFromPrefixLookUpValue(cpdValue,
                PrefixConstants.COA, langId, organisation).getLookUpId();
        List<Object[]> list = null;
        if (coaLookupId != null && coaLookupId != null) {
            list = tbAcSecondaryheadMasterJpaRepository.findExpenditureAccountHeadOnly(orgId,
                    coaLookupId);
            if ((list != null) && !list.isEmpty()) {
                return prepareAccountHeadLookUps(list);

            }
            LOGGER.error("No Record found from TB_AC_SECONDARYHEAD_MASTER for orgId=" + organisation.getOrgid());
        } else {
            LOGGER.error("orgId is null  or status id is null ");

        }
        return null;
    }

    @Override
    @Transactional(readOnly = true)
    public String findSacHeadCodeBySacHeadId(Long sacHeadId) {
        String sacHeadCode = null;
        if (sacHeadId != null) {
            sacHeadCode = tbAcSecondaryheadMasterJpaRepository.findSacHeadCodeBySacHeadId(sacHeadId);
        } else {
            LOGGER.error("orgId is null  or status id is null ");
        }
        return sacHeadCode;
    }

    // Task #6674 11. Set Bill type as Advance Adjustment by default as well as keep it disabled so a user will not change it.
    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getDeductionHeadForAdvAdjustment(Long orgId, Long AdvanceId) {
        List<Object[]> sacHeadadv = tbAcSecondaryheadMasterJpaRepository
                .getDeductionHeadForAdvAdjustment(orgId, AdvanceId);
        Map<Long, String> acHeadLookUp = null;
        if (sacHeadadv != null && !sacHeadadv.isEmpty()) {
            acHeadLookUp = sacHeadadv.stream().parallel()
                    .collect(Collectors.toMap(l -> Long.parseLong(l[0].toString()), l -> l[1].toString()));
        }
        return acHeadLookUp;

    }
    
    
    @Override
    @Transactional(readOnly = true)
    public Map<Long, String> getTaxMasBillDeductionTaxId(Long orgid, Long taxMasLookUpId) {
        Map<Long, String> taxMasBillDedDetailsMap = new LinkedHashMap<>();
        List<Object[]> taxMasBillDedDetailsList = tbAcSecondaryheadMasterJpaRepository
                .getTaxMasBillDeductionTaxId(orgid, taxMasLookUpId);
        for (Object[] objects : taxMasBillDedDetailsList) {
            if (objects[0] != null && objects[2] != null) {
                taxMasBillDedDetailsMap.put((Long) objects[0],  objects[2].toString());
            }
        }
        return taxMasBillDedDetailsMap;
    }
    
    @Override
    @Transactional
    public Long getSacHeadIdByBudgetId(Long prBudgetCodeid, Long orgId) {
        // TODO Auto-generated method stub
        return tbAcSecondaryheadMasterJpaRepository.getSacHeadIdByBudgetId(prBudgetCodeid, orgId);
    }
    
 @Override
    @Transactional(readOnly = true)
    public AccountHeadSecondaryAccountCodeMasterEntity findOne(final Long orgId,final Long sacHeadId) {
        return tbAcSecondaryheadMasterJpaRepository.findBySacHeadId(sacHeadId,orgId);
    }

@Override
public Map<Long, String> oldSecondaryHeadDescMap(Long orgId) {

    Map<Long, String> secHeadDescMap = new HashMap<>();
    List<AccountHeadSecondaryAccountCodeMasterEntity> secHeadDescList = tbAcSecondaryheadMasterJpaRepository
            .getSecondaryHeadDesc(orgId);
    for (AccountHeadSecondaryAccountCodeMasterEntity secHeadMasterEntity : secHeadDescList) {
        if (secHeadMasterEntity.getSacHeadId() != null && secHeadMasterEntity.getSacHeadDesc() != null) {
            secHeadDescMap.put(secHeadMasterEntity.getSacHeadId(), secHeadMasterEntity.getOldSacHeadCode());
        }
    }
    return secHeadDescMap;
}
	@Override
	public void saveSecondaryHeadBankMapDataBatch(List<TbSacheadAccMapDTO> tbSacheadAccMapDTOs) {
	    try {
	        List<TbSacheadAccMapEntity> entities = new ArrayList<>();
	
	        for (TbSacheadAccMapDTO tbSacheadAccMapDTO : tbSacheadAccMapDTOs) {
	            TbSacheadAccMapEntity entity = new TbSacheadAccMapEntity();
	            BeanUtils.copyProperties(tbSacheadAccMapDTO, entity);
	            entities.add(entity);
	        }
	
	        tbSacheadAccMapJpaRepository.save(entities);
	    } catch (Exception e) {
	        LOGGER.error("Error while saving Mapping" + e);
	    }
	}
	
	public boolean doesCombinationExist(Long sacHeadId, Long baAccountId) {
		Optional<Long> result = Optional.ofNullable(tbSacheadAccMapJpaRepository.doesCombinationExist(sacHeadId, baAccountId));
	    
	    // Used map to check if the result is present and equal to 1, then return true
	    return result.map(count -> count.equals(1L)).orElse(false);
    }

}
