/*
 * Created on 21 Mar 2016 ( Time 19:07:04 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.formbuilder.ui.controller;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.domain.ScrutinyServiceDto;
import com.abm.mainet.common.dto.JsonViewObject;
import com.abm.mainet.common.dto.ReadExcelData;
import com.abm.mainet.common.exception.FrameworkException;
import com.abm.mainet.common.formbuilder.dto.FormBuilder;
import com.abm.mainet.common.formbuilder.dto.FormBuilderValueDTO;
import com.abm.mainet.common.formbuilder.dto.FormBuilderValueResponse;
import com.abm.mainet.common.formbuilder.service.IFormBuilderService;
import com.abm.mainet.common.formbuilder.service.IFormBuilderUtilityService;
import com.abm.mainet.common.formbuilder.ui.model.FormBuilderUtilityModel;
import com.abm.mainet.common.integration.dms.client.FileNetApplicationClient;
import com.abm.mainet.common.integration.dms.domain.AttachDocs;
import com.abm.mainet.common.integration.dms.fileUpload.FileUploadUtility;
import com.abm.mainet.common.integration.dms.service.IAttachDocsService;
import com.abm.mainet.common.integration.dms.service.IFileUploadService;
import com.abm.mainet.common.master.dto.BankMasterDTO;
import com.abm.mainet.common.master.dto.BankMasterUploadDTO;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.service.ServiceMasterService;
import com.abm.mainet.common.ui.controller.AbstractFormController;
import com.abm.mainet.common.upload.excel.WriteExcelData;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;

/**
 * Spring MVC controller for 'FormBuilder' management.
 */
@Controller
@RequestMapping("/FormBuilderUtility.html")
public class FormBuilderUtilityController extends AbstractFormController<FormBuilderUtilityModel> {

    private static final Logger LOGGER = LoggerFactory.getLogger(FormBuilderUtilityController.class);

    @Resource
    private IFileUploadService fileUploadService;

    @Autowired
    private IAttachDocsService attachDocsService;

    @Autowired
    private TbDepartmentService departmentService;

    @Autowired
    private IFormBuilderService formBuilderService;

    @Autowired
    private IFormBuilderUtilityService formBuilderUtilityService;
    
    @Autowired
    private ServiceMasterService serviceMasterService;

    @RequestMapping
    public ModelAndView index(HttpServletRequest request) {
        this.sessionCleanup(request);
        fileUploadService.sessionCleanUpForFileUpload();
        this.getModel().setCommonHelpDocs("FormBuilderUtility.html");
        long deptId = departmentService.findDepartmentByCode(MainetConstants.SolidWasteManagement.SHORT_CODE).getDpDeptid();
        List<ScrutinyServiceDto> serviceList = formBuilderService.findAllServiceListData(
                Long.valueOf(ApplicationSession.getInstance().getSuperUserOrganization().getOrgid()),
                null, deptId);
        request.setAttribute(MainetConstants.CommonMasterUi.SERVICE_LIST, serviceList);
        return index();
    }

    @RequestMapping(params = "searchData")
    public @ResponseBody void searchData(final Model model,
            final HttpServletRequest httpServletRequest,
            @RequestParam(value = "serviceCode") final String serviceCode) {
        long deptId = departmentService.findDepartmentByCode(MainetConstants.SolidWasteManagement.SHORT_CODE).getDpDeptid();
        long orgid = UserSession.getCurrent().getOrganisation().getOrgid();
        this.getModel().setScrutinyServiceList(formBuilderService.findAllServiceListData(
                Long.valueOf(UserSession.getCurrent().getOrganisation().getOrgid()), serviceCode, deptId));

        this.getModel().setScrutinyValueList(formBuilderUtilityService.searchFormValue(orgid, serviceCode));

    }

    @RequestMapping(params = "gridValueData")
    public @ResponseBody FormBuilderValueResponse gridValueData(final HttpServletRequest request, final Model model) {

        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));

        final List<FormBuilderValueDTO> list = this.getModel().getScrutinyValueList();
        final FormBuilderValueResponse response = new FormBuilderValueResponse();
        final int dataSize = list.size();
        response.setRows(list);
        response.setTotal(dataSize);
        response.setRecords(dataSize);
        response.setPage(page);

        model.addAttribute("list", list);

        return response;
    }

    @RequestMapping(params = "edit")
    public ModelAndView formForUpdate(final Model model, @RequestParam("serviceCode") final String serviceCode,
            @RequestParam("referenceId") final Long referenceId,
            @RequestParam("mode") final String mode) {
        // --- Search the entity by its primary key and stores it in the model
        fileUploadService.sessionCleanUpForFileUpload();
        getModel().populateScrutinyViewData(referenceId, serviceCode, UserSession.getCurrent());
        this.getModel().setMode(mode);
        this.getModel().setAttachDocsList(attachDocsService.findByCode(UserSession.getCurrent().getOrganisation().getOrgid(),
                MainetConstants.SolidWasteManagement.SURVEY_DOC 
                        + MainetConstants.DOUBLE_BACK_SLACE + referenceId));

        List<AttachDocs> geotagDocs = attachDocsService.findByCode(UserSession.getCurrent().getOrganisation().getOrgid(),
                MainetConstants.SolidWasteManagement.GEO_TAG_DOC 
                        + MainetConstants.DOUBLE_BACK_SLACE + referenceId);
        this.getModel().setGeoTagDocsList(geotagDocs);
        if (CollectionUtils.isNotEmpty(geotagDocs)) {
            AttachDocs docs = geotagDocs.get(geotagDocs.size() - 1);
            if (docs != null) {
                final String outputPath = MainetConstants.DirectoryTree.DEFAULT_CACHE_FOLDER + MainetConstants.FILE_PATH_SEPARATOR
                        + MainetConstants.CommonMasterUi.SHOW_DOCS;
                final String filePath = Utility.downloadedFileUrl(
                        docs.getAttPath() + MainetConstants.FILE_PATH_SEPARATOR + docs.getAttFname(), outputPath,
                        FileNetApplicationClient.getInstance());
                this.getModel().setFilePath(filePath);
            }
        }

        return new ModelAndView("FormBuilderUtility/Form", MainetConstants.CommonConstants.COMMAND, getModel());
    }

    @RequestMapping(params = "add")
    public ModelAndView formForCreate(final Model model, @RequestParam("serviceCode") final String serviceCode,
            @RequestParam("mode") final String mode) {
        // --- Search the entity by its primary key and stores it in the model
        fileUploadService.sessionCleanUpForFileUpload();
        getModel().populateScrutinyViewData(0L, serviceCode, UserSession.getCurrent());
        this.getModel().setMode(mode);

        return new ModelAndView("FormBuilderUtility/Form", MainetConstants.CommonConstants.COMMAND, getModel());
    }

    @RequestMapping(params = "saveScrutinyValue", method = RequestMethod.POST)
    public ModelAndView saveScrutinyValue(final HttpServletRequest httpServletRequest) {
        bindModel(httpServletRequest);

        final FormBuilderUtilityModel model = getModel();
        try {
            if (model.saveScrutinyLabels()) {
                return jsonResult(JsonViewObject.successResult(getModel().getSuccessMessage()));
            } else {
                return jsonResult(JsonViewObject.failureResult(getModel().getSuccessMessage()));
            }
        } catch (final Exception ex) {
            ex.printStackTrace();
            LOGGER.error("Exception Occur in saveScrutinyValue() ScrutinyLabelController ", ex);
            return jsonResult(JsonViewObject.failureResult(ex));
        }
    }

    @RequestMapping(params = "getCoordinates", method = RequestMethod.POST)
    public @ResponseBody double[] fetchCoordinate(HttpServletRequest httpRequest) {
        double[] coordinates = new double[2];
        if ((FileUploadUtility.getCurrent().getFileMap().entrySet() != null)
                && !FileUploadUtility.getCurrent().getFileMap().entrySet().isEmpty()) {
            for (final Map.Entry<Long, Set<File>> entry : FileUploadUtility.getCurrent().getFileMap().entrySet()) {
                final Iterator<File> setFilesItr = entry.getValue().iterator();
                while (setFilesItr.hasNext()) {
                    final File file = setFilesItr.next();
                    javaxt.io.Image image = new javaxt.io.Image(file.getPath());
                    double[] coord = image.getGPSCoordinate();
                    if (coord != null) {
                        coordinates[0] = coord[0];
                        coordinates[1] = coord[1];
                    }
                }
            }
        }
        return coordinates;
    }
    
    
    @RequestMapping(params = "ExcelTemplateData")
	public void exportAccountDepositExcelData(final HttpServletResponse response, 
			final HttpServletRequest request, @RequestParam("serviceCode") final String serviceCode) {

		try {
			String serviceName = serviceMasterService.getServiceByShortName(serviceCode,
					getApplicationSession().getSuperUserOrganization().getOrgid()).getSmServiceName();
			 List<FormBuilder> formLevels = formBuilderService.findAllFormBuilderLabelData(serviceCode, 
					 getApplicationSession().getSuperUserOrganization().getOrgid());
			 List<String> labels = new ArrayList<>();
			 formLevels.forEach( l -> {
				 labels.add(l.getSlLabel());
			 });
			WriteExcelData<?> data = new WriteExcelData<>(
					serviceName + MainetConstants.XLSX_EXT, request, response);

			data.getExpotedExcelSheetFormBuilder(labels);
			
		} catch (Exception ex) {
			throw new FrameworkException(ex.getMessage());
		}
	}
    
	@RequestMapping(params = "loadExcelData", method = RequestMethod.POST)
	public ModelAndView loadValidateAndLoadExcelData(BankMasterDTO bean, final BindingResult bindingResult, final Model model,
			final RedirectAttributes redirectAttributes, final HttpServletRequest httpServletRequest) throws Exception {
		bindModel(httpServletRequest);

		try {
			String serviceName = serviceMasterService.getServiceByShortName(this.getModel().getServiceCode(),
					getApplicationSession().getSuperUserOrganization().getOrgid()).getSmServiceName();
			 List<FormBuilder> formLevels = formBuilderService.findAllFormBuilderLabelData(this.getModel().getServiceCode(), 
					 getApplicationSession().getSuperUserOrganization().getOrgid());
			 List<String> labels = new ArrayList<>();
			 List<Long> labelsIds = new ArrayList<>();
			 formLevels.forEach( l -> {
				 labels.add(l.getSlLabel());
				 labelsIds.add(l.getSlLabelId());
			 });
			 final String filePath = getUploadedFinePath();
			 ReadExcelData<BankMasterUploadDTO> data = new ReadExcelData<>(filePath, BankMasterUploadDTO.class);
				data.parseExcelList1(serviceName,labels,labelsIds);
				
				//List<String> errlist = data.getErrorList();
				//data.getParseData();
				if(formBuilderUtilityService.saveFormBuilder(data.getRowValue()))
				{
					 return jsonResult(JsonViewObject.successResult(getModel().getSuccessMessage()));

				}
				else {
					 return defaultMyResult();
				}
			
		} catch (Exception ex) {
			throw new FrameworkException(ex.getMessage());
		}
	}
	
	private String getUploadedFinePath() {
		String filePath = null;
		for (final Map.Entry<Long, Set<File>> entry : FileUploadUtility.getCurrent().getFileMap().entrySet()) {
			Set<File> list = entry.getValue();
			for (final File file : list) {
				filePath = file.toString();
				break;
			}
		}
		return filePath;
	}
	
	

}
