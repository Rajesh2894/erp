/*
 * Created on 9 Dec 2015 ( Time 12:12:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.service;

import java.util.List;
import java.util.Map;

import javax.jws.WebService;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.abm.mainet.common.domain.LocationMasEntity;
import com.abm.mainet.common.domain.LocationOperationWZMapping;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.dto.WardZoneDescDTO;
import com.abm.mainet.common.integration.acccount.dto.VendorBillApprovalDTO;
import com.abm.mainet.common.integration.dms.client.FileNetApplicationClient;
import com.abm.mainet.common.integration.dms.domain.AttachDocs;
import com.abm.mainet.common.master.dto.LocOperationWZMappingDto;
import com.abm.mainet.common.master.dto.LocationMasterUploadDto;
import com.abm.mainet.common.master.dto.TbLocationMas;
import com.abm.mainet.common.master.dto.WardZoneDTO;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * Business Service Interface for entity TbLocationMas.
 */

@WebService
@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
@Produces(MediaType.APPLICATION_JSON)
public interface ILocationMasService {

    /**
     * it is used to fetch location details by primary key location id.
     * @param locId
     * @return TbLocationMas DTO
     */
    @POST
    @ApiOperation(value = "Fetch Location master details by Location Id", notes = "Fetch Location master details by Location Id", response = TbLocationMas.class)
    @Path("/locId/{locId}")
    TbLocationMas findById(@ApiParam(value = "get Location", required = true) @PathParam("locId") Long locId);

    @GET
    @Path("/deptId/{deptId}/orgId/{orgId}")
    @ApiOperation(value = "fetch All Location details by department Id and OrgId", notes = "Fetch All Location details by department Id and orgId", response = TbLocationMas.class)
    List<TbLocationMas> getlocationByDeptId(
            @ApiParam(value = "fetch location by deptid and org id") @PathParam("deptId") Long deptId,
            @ApiParam(value = "fetch location by deptid and org id") @PathParam("orgId") Long orgId);

    @POST
    @Path("/orgId/{orgId}")
    @ApiOperation(value = "Fetch All Location details by OrgId", notes = "Fetch All Location details by OrgId", response = TbLocationMas.class)
    List<TbLocationMas> fillAllActiveLocationByOrgId(
            @ApiParam("get locations by orgId") @PathParam("orgId") final Long orgId);

    @GET
    @Path("/locCategory/{locCategory}/orgId/{orgId}")
    @ApiOperation(value = "Fetch All Location details by Location category and Org Id", notes = "Fetch All Location details by Location category and Org Id", response = TbLocationMas.class)
    List<TbLocationMas> findlAllLocationByLocationCategoryAndOrgId(
            @ApiParam("get locations by location Category and org id") @PathParam("locCategory") final Long locCategory,
            @ApiParam("get locations by location Category and org id") @PathParam("orgId") final Long orgId);

    boolean createLocationMas(TbLocationMas entity, Organisation organisation, FileNetApplicationClient fileNetApplicationClient);

    boolean createLocationMasEdit(TbLocationMas entity, Organisation organisation,
            FileNetApplicationClient fileNetApplicationClient);

    LocationMasEntity createDefaultLocationMas(LocationMasEntity entity, Organisation organisation);

    List<TbLocationMas> fillAllLocationMasterDetails(Organisation org);

    List<Object[]> getLocationNameByOrgId(Long orgId);

    LocOperationWZMappingDto findOperLocationAndDeptId(Long locId, Long deptId);

    boolean findByLocationList(Long locId);

    void delete(String flag, Long userId, Long locId);

    @POST
    @Path("/pinCode/{pinCode}")
    @ApiOperation(value = "Fetch All Location details by pinCode", notes = "Fetch All Location details by pinCode", response = TbLocationMas.class)
    List<TbLocationMas> getlocationByPinCode(
            @ApiParam(value = "get Location", required = true) @PathParam("pinCode") Long pinCode);

    List<LocationMasEntity> findByOrgAndDepartmentAndWardZone(Long orgId, Long deptId, Long codIdOperLevel1,
            Long codIdOperLevel2, Long codIdOperLevel3, Long codIdOperLevel4, Long codIdOperLevel5);

    List<LocationOperationWZMapping> findByDepartmentWardZoneAndBlock(Long deptId, Long wardID, Long zoneID, Long blockId);

    Long getRevenueLocationId(long areaDivision1, Long orgId);

    Long fetchEmployeeLocation(Long empId, Long orgId);

    List<LocationMasEntity> getlocationByOrgId(Long orgId);

    LocationMasEntity findbyLocationId(Long locId);

    List<Long> findLocations(Long orgId, Long deptId, Long fLevel, Long sLevel, Long tLevel, Long foLevel, Long fiLevel);

    List<WardZoneDTO> findlocationByOrgId(Long orgId);

    LocationOperationWZMapping findbyLocationAndDepartment(Long locationId, Long deptId);

    int validateLocationNameAndArea(String locName, String locArea, Long orgId);

    Long getcodIdRevLevel1ByLocId(final Long locId, final Long orgId);

    List<LocationMasEntity> findAllLocationWithOperationWZMapping(Long orgId, Long deptId);

    String getLocationNameById(Long locId, Long orgId);

    AttachDocs fetchLocationImage(Long orgid, Long locId);

    List<LocationMasEntity> findWZMappedLocationByOrgIdAndDeptId(Long orgId, Long deptId);

    TbLocationMas findByLocationName(String locName, final Long orgId);

    @GET
    @Path("/operationalWard/{orgId}/{deptId}/{locId}")
    @ApiOperation(value = "Fetch All operational ward details by OrgId,DeparmentId and Location Id", notes = "Fetch All operational ward details by OrgId,DeparmentId and Location Id", response = WardZoneDescDTO.class)
    List<WardZoneDescDTO> fetchOperationalWard(
            @PathParam("orgId") final Long orgId, @PathParam("deptId") final Long deptId, @PathParam("locId") final Long locId);

    @GET
    @Path("/revenueWard/{orgId}/{deptId}/{locId}")
    @ApiOperation(value = "Fetch revenue ward details by OrgId,DeparmentId and Location Id", notes = "Fetch revenue ward details by OrgId,DeparmentId and Location Id", response = WardZoneDescDTO.class)
    List<WardZoneDescDTO> fetchRevenueWard(
            @PathParam("orgId") final Long orgId, @PathParam("deptId") final Long deptId, @PathParam("locId") final Long locId);

    @GET
    @Path("/electoralWard/{orgId}/{deptId}/{locId}")
    @ApiOperation(value = "Fetch Electoral details by OrgId,DeparmentId and Location Id", notes = "Fetch Electoral details by OrgId,DeparmentId and Location Id", response = WardZoneDescDTO.class)
    List<WardZoneDescDTO> fetchElectoralWard(
            @PathParam("orgId") final Long orgId, @PathParam("deptId") final Long deptId, @PathParam("locId") final Long locId);

    List<Object[]> getdefaultLocWithOtherLocByOrgId(String empName, Long orgId);

    List<TbLocationMas> getAllLocationByOrgId(Long orgId);

    void saveLocationMasterExcelData(List<LocationMasterUploadDto> locationMasterUploadDtoList,
            TbLocationMas tbLocationMas, Organisation org);

    List<TbLocationMas> findAllLocationsForOrg(Organisation org);

    List<LocationMasterUploadDto> exportAllLocationsForOrg(Organisation org);

    @POST
    @ApiOperation(value = "Fetch Ward and zone By OrgId and loc", notes = "Fetch Ward and Zone By OrgId and loc", response = Object.class)
    @Path("/getWardAndZoneByOrgIdLocationDept/orgId/{orgId}/loc/{loc}")
    Map<String, String> getWardAndZoneByOrgIdLocationDept(@PathParam("orgId") Long orgId, @PathParam("loc") Long loc);

	Long getFieldIdWithWard(Long deptId, Long wardID, Long orgId);
	
	List<Long> getlocationListByFieldIdAndOrgId(final long areaDivision1, final Long orgId);
    
    
    List<Long> getOperLocationIdBasedOnLocIdDeptIdOrgId(final long locId, final Long deptId, final Long orgId);

	Map<Long, String> getBudgetExpenditure(VendorBillApprovalDTO billApprovalDTO);

	void inactiveRemovedYearDetails(TbLocationMas tbLocationMas, List<Long> removeYearIdList);
	
	public List<LocationOperationWZMapping> findByLocationWZList(final Long locId) ;
	
	Long findFieldIdByLocationId(Long locId, Long orgId);

	List<Object[]> getLocationNameAndLocCodeByOrgId(Long orgId);
	
}
