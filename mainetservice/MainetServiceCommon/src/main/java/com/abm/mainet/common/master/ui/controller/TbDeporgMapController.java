/*
 * Created on 27 Jul 2015 ( Time 17:55:42 )

 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.domain.Employee;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbDeporgMap;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.master.service.TbDeporgMapService;
import com.abm.mainet.common.master.service.TbOrganisationService;
import com.abm.mainet.common.master.ui.model.TbDepartmentListItem;
import com.abm.mainet.common.master.ui.model.TbDeporgMapResponse;
import com.abm.mainet.common.service.IEmployeeService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.UserSession;

/**
 * Spring MVC controller for 'TbDeporgMap' management.
 */
@Controller
@RequestMapping("/DepartmentOrgMap.html")
public class TbDeporgMapController extends AbstractController {

    // --- Variables names ( to be used in JSP with Expression Language )
    private static final String MAIN_ENTITY_NAME = "tbDeporgMap";

    // --- JSP pages names ( View name in the MVC model )
    private static final String JSP_FORM = "tbDeporgMap/form";
    private static final String JSP_CHILD_FORM = "tbDeporgMap/deptform";

    // --- SAVE ACTION ( in the HTML form )
    private static final String SAVE_ACTION_CREATE = "DepartmentOrgMap.html?create";
    private static final String SAVE_ACTION_UPDATE = "DepartmentOrgMap.html?update";

    // --- Main entity service
    @Resource
    private TbDeporgMapService tbDeporgMapService; // Injected by Spring
    // --- Other service(s)
    @Resource
    private TbDepartmentService tbDepartmentService; // Injected by Spring

    @Resource
    private TbOrganisationService tbOrganisationService;

    @Resource
    private IEmployeeService employeeService;

    List<TbDeporgMap> tbDeporgMapList = new ArrayList<>();
    List<TbDeporgMap> tbDeporgMapDBList = new ArrayList<>();

    // --------------------------------------------------------------------------------------
    /**
     * Default constructor
     */
    public TbDeporgMapController() {
        super(TbDeporgMapController.class, MAIN_ENTITY_NAME);
        log("TbDeporgMapController created.");
    }

    // --------------------------------------------------------------------------------------
    // Spring MVC model management
    // --------------------------------------------------------------------------------------
    /**
     * Populates the combo-box "items" for the referenced entity "TbDepartment"
     * @param model
     */
    private void populateListOfTbDepartmentItems(final Model model) {
        final List<TbDepartment> list = tbDepartmentService.findAll();
        final List<TbDepartmentListItem> items = new LinkedList<>();
        for (final TbDepartment tbDepartment : list) {
            items.add(new TbDepartmentListItem(tbDepartment));
        }
        model.addAttribute(MainetConstants.TbDeporgMap.LIST_OF_TBDEPART_ITEMS, items);
    }

    /**
     * Populates the Spring MVC model with the given entity and eventually other useful data
     * @param model
     * @param tbDeporgMap
     */
    private void populateModel(final Model model, final TbDeporgMap tbDeporgMap, final FormMode formMode) {
        // --- Main entity
        model.addAttribute(MAIN_ENTITY_NAME, tbDeporgMap);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbDeporgMap);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            // --- Other data useful in this screen in "create" mode (all fields)
            populateListOfTbDepartmentItems(model);
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
            // --- Other data useful in this screen in "update" mode (only non-pk fields)
            populateListOfTbDepartmentItems(model);
        }
    }

    // --------------------------------------------------------------------------------------
    // Request mapping
    // --------------------------------------------------------------------------------------
    /**
     * Shows a list with all the occurrences of TbDeporgMap found in the database
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping()
    public String list(final Model model) {
        log("Action 'list'");
        helpDoc("DepartmentOrgMap.html", model);
        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        tbDeporgMapList = tbDeporgMapService.getDepartmentData(orgId);
        populateModel(model, new TbDeporgMap(), FormMode.CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, new TbDeporgMap());
        return JSP_FORM;
    }

    /**
     * Shows a form page in order to create a new TbDeporgMap
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping(params = "form")
    public String formForCreate(final Model model) {
        log("Action 'formForCreate'");
        // --- Populates the model with a new instance
        final TbDeporgMap tbDeporgMap = new TbDeporgMap();
        populateModel(model, tbDeporgMap, FormMode.CREATE);
        return JSP_FORM;
    }

    /**
     * Shows a form page in order to update an existing TbDeporgMap
     * @param model Spring MVC model
     * @param mapId primary key element
     * @return
     */
    @RequestMapping(params = "formForUpdate")
    public String formForUpdate(final Model model, @RequestParam("mapId") final Long mapId) {
        log("Action 'formForUpdate'");
        // --- Search the entity by its primary key and stores it in the model
        final TbDeporgMap tbDeporgMap = tbDeporgMapService.findById(mapId);
        populateModel(model, tbDeporgMap, FormMode.UPDATE);
        return JSP_FORM;
    }

    /**
     * 'CREATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbDeporgMap entity to be created
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "create") // GET or POST
    public ModelAndView create(@Valid final TbDeporgMap tbDeporgMap, final BindingResult bindingResult, final Model model,
            final HttpServletRequest httpServletRequest) {
        log("Action 'create'");
        try {
            tbDeporgMap.setOrgid(UserSession.getCurrent().getOrganisation().getOrgid());
            tbDeporgMap.setUserId(UserSession.getCurrent().getEmployee().getEmpId());
            tbDeporgMap.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));

            final TbDeporgMap tbDeporgMapCreated = tbDeporgMapService.createDepOrgData(tbDeporgMap, tbDeporgMapList);
            model.addAttribute(MAIN_ENTITY_NAME, tbDeporgMapCreated);

            return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                    MainetConstants.COMMON_STATUS.SUCCESS);
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbDeporgMap.error.create", e);
            populateModel(model, tbDeporgMap, FormMode.CREATE);
            return new ModelAndView(JSP_FORM);
        }
    }

    /**
     * 'UPDATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbDeporgMap entity to be updated
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "update") // GET or POST
    public ModelAndView update(@Valid final TbDeporgMap tbDeporgMap, final BindingResult bindingResult, final Model model,
            final HttpServletRequest httpServletRequest) {
        log("Action 'update'");
        try {
            if (!bindingResult.hasErrors()) {
                // --- Perform database operations
                final TbDeporgMap tbDeporgMapSaved = tbDeporgMapService.update(tbDeporgMap);
                model.addAttribute(MAIN_ENTITY_NAME, tbDeporgMapSaved);
                log("Action 'update' : update done - redirect");
                return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                        MainetConstants.COMMON_STATUS.SUCCESS);
            } else {
                log("Action 'update' : binding errors");
                populateModel(model, tbDeporgMap, FormMode.UPDATE);
                return new ModelAndView(JSP_FORM);
            }
        } catch (final Exception e) {
            messageHelper.addException(model, "tbDeporgMap.error.update", e);
            log("Action 'update' : Exception - " + e.getMessage());
            populateModel(model, tbDeporgMap, FormMode.UPDATE);
            return new ModelAndView(JSP_FORM);
        }
    }

    /**
     * 'DELETE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param redirectAttributes
     * @param mapId primary key element
     * @return
     */
    @RequestMapping(params = "delete") // GET or POST
    public @ResponseBody String delete(@RequestParam("mapId") final Long mapId) {
        log("Action 'delete'");
        String message = MainetConstants.COMMON_STATUS.FAILURE;
        final UserSession userSession = UserSession.getCurrent();
        final Long orgId = userSession.getOrganisation().getOrgid();
        tbDeporgMapService.deleteMap(mapId, userSession);
        tbDeporgMapList.clear();
        tbDeporgMapList = tbDeporgMapService.getDepartmentData(orgId);
        message = MainetConstants.COMMON_STATUS.SUCCESS;
        return message;
    }

    @RequestMapping(params = "addChildForm")
    public String addChildForm(final Model model) {
        log("Action 'add Child Form'");
        // --- Populates the model with a new instance

        final TbDepartment department = new TbDepartment();
        final List<Long> deptIdLst = new ArrayList<>();
        final Organisation org = UserSession.getCurrent().getOrganisation();
        for (final TbDeporgMap depOrgMap : tbDeporgMapList) {
            deptIdLst.add(depOrgMap.getDpDeptid());
        }

        final List<TbDepartment> deptList = tbDepartmentService.findNonMappedDept(deptIdLst, org.getOrgid());
        model.addAttribute(MainetConstants.CHEQUE_DISHONOUR.DEPT_LIST, deptList);
        model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, department);
        model.addAttribute(MAIN_ENTITY_NAME, department);
        if (deptList.size() == 0) {
            if (UserSession.getCurrent().getLanguageId() == 1) {
                model.addAttribute(MainetConstants.TbDeporgMap.ERROR_MSG,
                        ApplicationSession.getInstance().getMessage("master.orgDeptMap.valmsg.allempmapped")
                                + MainetConstants.WHITE_SPACE + org.getONlsOrgname());
            } else {
                model.addAttribute(MainetConstants.TbDeporgMap.ERROR_MSG,
                        ApplicationSession.getInstance().getMessage("master.orgDeptMap.valmsg.allempmapped")
                                + MainetConstants.WHITE_SPACE + org.getONlsOrgnameMar());
            }

        }
        return JSP_CHILD_FORM;
    }

    @RequestMapping(params = "createChildData") // GET or POST
    public @ResponseBody String createChildData(@RequestParam("dpDeptid") final Long dpDeptid,
            @RequestParam("dpDeptdesc") final String dpDeptdesc,
            @RequestParam("dpNameMar") final String dpNameMar, final Model model, final HttpServletRequest httpServletRequest) {
        log("Action 'create child data'");

        final TbDeporgMap tbDeporgMap = new TbDeporgMap();
        tbDeporgMap.setOrgid(UserSession.getCurrent().getOrganisation().getOrgid());
        tbDeporgMap.setUserId(UserSession.getCurrent().getEmployee().getEmpId());
        tbDeporgMap.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
        TbDeporgMap tbDeporgMapSaved = new TbDeporgMap();

        try {
            int counter = 0;
            final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
            if (tbDeporgMapList.size() > 0) {
                for (final TbDeporgMap tbDeporgData : tbDeporgMapList) {
                    if (tbDeporgData.getDpDeptid().longValue() == dpDeptid.longValue()) {
                        counter++;
                        break;
                    } else {
                        counter = 0;
                    }
                }
            }
            if (counter == 0) {
                tbDeporgMap.setDpDeptid(dpDeptid);
                tbDeporgMap.setDpDeptdesc(dpDeptdesc);
                tbDeporgMap.setDpDeptdescReg(dpNameMar);
                tbDeporgMap.setDeptStatus(MainetConstants.MASTER.A);
                tbDeporgMapList.add(tbDeporgMap);
                tbDeporgMapSaved = tbDeporgMapService.createDepOrgData(tbDeporgMap, tbDeporgMapList);
            }
            tbDeporgMapList = tbDeporgMapService.getDepartmentData(orgId);
            model.addAttribute(MainetConstants.CommonMasterUi.TB_DEPORG_MAP, tbDeporgMapSaved);
            return MainetConstants.CommonMasterUi.TB_DEPORG_MAP;

        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbCustbanksMas.error.create", e);
            return JSP_FORM;
        }
    }

    @RequestMapping(params = "getDepartmentData") // GET or POST
    public @ResponseBody void getDepartmentData(@RequestParam("organisationId") final Long organisationId, final Model model,
            final HttpServletRequest httpServletRequest) {
        tbDeporgMapList = tbDeporgMapService.getDepartmentData(organisationId);
    }

    @RequestMapping(params = "getChildGridData")
    public @ResponseBody TbDeporgMapResponse getChildGridData(final HttpServletRequest request, final Model model) {
        log("Action 'Get child grid Data'");

        final TbDeporgMapResponse response = new TbDeporgMapResponse();
        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
        final int dataSize = tbDeporgMapList.size();
        response.setRows(tbDeporgMapList);
        response.setTotal(dataSize);
        response.setRecords(dataSize);
        response.setPage(page);
        model.addAttribute(MainetConstants.COMMON_ENTITY_FIELD_CONSTANT.LIST, tbDeporgMapList);
        return response;
    }

    @RequestMapping(params = "checkEmpExists")
    public @ResponseBody boolean checkEmpExists(@RequestParam("mapId") final Long mapId) {
        final TbDeporgMap bean = tbDeporgMapService.findById(mapId);
        boolean exist = true;
        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        final List<Employee> empList = employeeService.findAllEmployeeByDept(orgId, bean.getDpDeptid());
        if (empList.size() == 0) {
            exist = false;
        }
        return exist;
    }

    @RequestMapping(params = "checkDeptOfficeLocation")
    public @ResponseBody boolean checkDeptOfficeLocation(@RequestParam("deptId") final Long deptId) {
        boolean isLocationMapped = false;
        isLocationMapped = tbDeporgMapService.validateActualLocationMapping(deptId);
        return isLocationMapped;
    }
}
