/*
 * Created on 6 Jun 2016 ( Time 15:25:35 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.integration.acccount.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.integration.acccount.dao.AccountHeadPrimaryAccountCodeMasterDao;
import com.abm.mainet.common.integration.acccount.domain.AccountHeadPrimaryAccountCodeMasterEntity;
import com.abm.mainet.common.integration.acccount.domain.TbAcCodingstructureDetEntity;
import com.abm.mainet.common.integration.acccount.dto.AccountBudgetOpenBalanceMasterDto;
import com.abm.mainet.common.integration.acccount.dto.AccountHeadPrimaryAccountCodeMasterBean;
import com.abm.mainet.common.integration.acccount.dto.AccountHeadPrimaryAccountCodeMasterDTO;
import com.abm.mainet.common.integration.acccount.repository.AcPrimaryCodeMasterJpaRepository;
import com.abm.mainet.common.integration.acccount.repository.SecondaryheadMasterJpaRepository;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;

@Component
@Transactional
public class AccountHeadPrimaryAccountCodeMasterServiceImpl implements AccountHeadPrimaryAccountCodeMasterService {

	@Resource
	private AcPrimaryCodeMasterJpaRepository acPrimaryCodeMasterJpaRepository;

	@Resource
	private AccountHeadPrimaryAccountCodeMasterDao accountHeadPrimaryAccountCodeMasterDao;

	@Resource
	private SecondaryheadMasterJpaRepository tbAcSecondaryheadMasterJpaRepository;

	// for saving the new Records in Heirarchial Manner

	@Override
	@Transactional
	public void create(final AccountHeadPrimaryAccountCodeMasterBean masterBean,
			final TbAcCodingstructureDetEntity detailEntity, final Long orgId, final int langId, final Long empId)
			throws Exception {

		final List<Object[]> codcofDetIdForAllLvl = accountHeadPrimaryAccountCodeMasterDao
				.getCodCofigurationDetIdUsingLevel(masterBean.getCodconfigId());
		final Map<Integer, Integer> mapForAllLevels = new HashMap<>();

		if ((codcofDetIdForAllLvl != null) && !codcofDetIdForAllLvl.isEmpty()) {
			for (final Object[] obj : codcofDetIdForAllLvl) {
				mapForAllLevels.put(Integer.valueOf(obj[MainetConstants.ENGLISH].toString()),
						Integer.valueOf(obj[MainetConstants.EMPTY_LIST].toString()));
			}
		}

		final AccountHeadPrimaryAccountCodeMasterEntity accountPrimayHeadCodeEntity = fillDataForParentLevel(masterBean,
				orgId, langId, empId, mapForAllLevels);

		acPrimaryCodeMasterJpaRepository.save(accountPrimayHeadCodeEntity);
	}

	private AccountHeadPrimaryAccountCodeMasterEntity fillDataForParentLevel(
			final AccountHeadPrimaryAccountCodeMasterBean primaryAcCodeMasterBean, final Long orgId, final int langId,
			final Long empId, final Map<Integer, Integer> mapForAllLevels) {
		TbAcCodingstructureDetEntity entity;
		final AccountHeadPrimaryAccountCodeMasterEntity primaryHeadMasterEntity = new AccountHeadPrimaryAccountCodeMasterEntity();
		if (primaryAcCodeMasterBean.getExistingParentCodePrimaryId() != null) {
			primaryHeadMasterEntity.setPrimaryAcHeadId(primaryAcCodeMasterBean.getExistingParentCodePrimaryId());
		}

		entity = new TbAcCodingstructureDetEntity();
		entity.setCodcofdetId(Long.valueOf(mapForAllLevels.get(1)));
		primaryHeadMasterEntity.setTbAcCodingstructureDet(entity);
		primaryHeadMasterEntity.setLmoddate(new Date());
		primaryAcCodeMasterBean.setParentLevel("1");

		AccountHeadPrimaryAccountCodeMasterEntity childEntity = null;
		final Set<AccountHeadPrimaryAccountCodeMasterEntity> set = new HashSet<>();
		AccountHeadPrimaryAccountCodeMasterEntity parentEntity = null;
		final List<AccountHeadPrimaryAccountCodeMasterDTO> list = new ArrayList<>(primaryAcCodeMasterBean.getListDto());
		ArrayList<AccountHeadPrimaryAccountCodeMasterDTO> newList = null;
		for (final AccountHeadPrimaryAccountCodeMasterDTO dto : list) {

			childEntity = new AccountHeadPrimaryAccountCodeMasterEntity();
			if (dto.getChildParentCode().equals(primaryAcCodeMasterBean.getParentCode())
					&& dto.getChildParentLevel().equals(primaryAcCodeMasterBean.getParentLevel())) {

				childEntity.setPrimaryAcHeadDesc(dto.getChildDesc());
				childEntity.setPrimaryAcHeadCode(dto.getChildCode());
				childEntity.setPrimaryAcHeadCompcode(dto.getChildFinalCode());

				childEntity.setPacStatusCpdId(dto.getChildPrimaryStatus());

				childEntity.setPrimaryAcHeadParentId(primaryHeadMasterEntity);
				childEntity.setOrgid(orgId);
				childEntity.setUserId(empId);
				entity = new TbAcCodingstructureDetEntity();
				entity.setCodcofdetId(Long.valueOf(mapForAllLevels.get(Integer.parseInt(dto.getChildLevel()))));
				childEntity.setTbAcCodingstructureDet(entity);
				childEntity.setLmoddate(new Date());
				parentEntity = new AccountHeadPrimaryAccountCodeMasterEntity();
				parentEntity.setPrimaryAcHeadId(childEntity.getPrimaryAcHeadId());
				newList = new ArrayList<>(primaryAcCodeMasterBean.getListDto());
				childEntity.setPrimaryAcHeadHierarchicalList(
						addRecordsRecursively(newList, dto.getChildCode(), dto.getChildLevel(), dto.getChildFinalCode(),
								childEntity.getPrimaryAcHeadId(), orgId, langId, empId, childEntity, mapForAllLevels));
				set.add(childEntity);
			}
		}
		primaryHeadMasterEntity.setPrimaryAcHeadHierarchicalList(set);

		return primaryHeadMasterEntity;

	}

	public Set<AccountHeadPrimaryAccountCodeMasterEntity> addRecordsRecursively(
			final ArrayList<AccountHeadPrimaryAccountCodeMasterDTO> list, final String parentCode,
			final String parentLevel, final String parentFinalCode, final Long parentId, final Long orgId,
			final int langId, final Long empId, final AccountHeadPrimaryAccountCodeMasterEntity parentEntity,
			final Map<Integer, Integer> mapForAllLevels) {
		final Set<AccountHeadPrimaryAccountCodeMasterEntity> set = new HashSet<>();
		AccountHeadPrimaryAccountCodeMasterEntity childEntity = null;
		TbAcCodingstructureDetEntity entity = null;
		AccountHeadPrimaryAccountCodeMasterEntity parentEntity1 = null;
		String[] strArray = null;
		String childParentFinalCode = null;
		for (final AccountHeadPrimaryAccountCodeMasterDTO dto : list) {

			childEntity = new AccountHeadPrimaryAccountCodeMasterEntity();

			if (dto.getChildParentCode().equals(parentCode) && dto.getChildParentLevel().equals(parentLevel)) {

				strArray = dto.getChildFinalCode().split(MainetConstants.HYPHEN);
				childParentFinalCode = null;
				for (int i = 0; i < (strArray.length - 1); i++) {
					if (childParentFinalCode == null) {
						childParentFinalCode = strArray[i];
					} else {
						childParentFinalCode += MainetConstants.HYPHEN + strArray[i];
					}
				}

				if (parentFinalCode.equals(childParentFinalCode)) {
					childEntity.setPrimaryAcHeadDesc(dto.getChildDesc());
					childEntity.setPrimaryAcHeadCode(dto.getChildCode());
					childEntity.setPrimaryAcHeadCompcode(dto.getChildFinalCode());

					childEntity.setPacStatusCpdId(dto.getChildPrimaryStatus());

					childEntity.setPrimaryAcHeadParentId(parentEntity);
					childEntity.setOrgid(orgId);
					childEntity.setUserId(empId);
					entity = new TbAcCodingstructureDetEntity();
					entity.setCodcofdetId(mapForAllLevels.get(Integer.parseInt(dto.getChildLevel())));
					childEntity.setTbAcCodingstructureDet(entity);
					childEntity.setLmoddate(new Date());
					parentEntity1 = new AccountHeadPrimaryAccountCodeMasterEntity();
					parentEntity1.setPrimaryAcHeadId(childEntity.getPrimaryAcHeadId());
					set.add(childEntity);
					if (!set.isEmpty()) {
						childEntity.setPrimaryAcHeadHierarchicalList(addRecordsRecursively(list, dto.getChildCode(),
								dto.getChildLevel(), dto.getChildFinalCode(), childEntity.getPrimaryAcHeadId(), orgId,
								langId, empId, childEntity, mapForAllLevels));
					}
				}
			}
		}

		return set;
	}

	// methods for save added records in the existing records in the DB.
	@Override
	@Transactional
	public void saveEditedData(final AccountHeadPrimaryAccountCodeMasterBean primaryAcCodeMasterBean, final Long orgId,
			final int langId, final Long empId) throws Exception {
		AccountHeadPrimaryAccountCodeMasterEntity existParentEntity;
		existParentEntity = accountHeadPrimaryAccountCodeMasterDao
				.getParentDetailsUsingPrimaryHeadId(primaryAcCodeMasterBean);

		final List<Object[]> codcofDetIdForAllLvl = accountHeadPrimaryAccountCodeMasterDao
				.getCodCofigurationDetIdUsingLevel(primaryAcCodeMasterBean.getCodconfigId());
		final Map<Integer, Integer> mapForAllLevels = new HashMap<>();

		if ((codcofDetIdForAllLvl != null) && !codcofDetIdForAllLvl.isEmpty()) {
			for (final Object[] obj : codcofDetIdForAllLvl) {
				mapForAllLevels.put(Integer.valueOf(obj[MainetConstants.ENGLISH].toString()),
						Integer.valueOf(obj[MainetConstants.EMPTY_LIST].toString()));
			}
		}
		String[] strArray = null;
		String childParentFinalCode = null;
		existParentEntity.setPrimaryAcHeadDesc(primaryAcCodeMasterBean.getParentDesc());
		for (final AccountHeadPrimaryAccountCodeMasterDTO dto : primaryAcCodeMasterBean.getListDto()) {
			strArray = dto.getChildFinalCode().split(MainetConstants.HYPHEN);
			childParentFinalCode = null;
			for (int i = 0; i < (strArray.length - 1); i++) {
				if (childParentFinalCode == null) {
					childParentFinalCode = strArray[i];
				} else {
					childParentFinalCode += MainetConstants.HYPHEN + strArray[i];
				}
			}
			traverseFirstNode(existParentEntity, primaryAcCodeMasterBean, childParentFinalCode, dto, mapForAllLevels,
					orgId, langId, empId);

		}

	}

	private void traverseFirstNode(final AccountHeadPrimaryAccountCodeMasterEntity existParentEntity,
			final AccountHeadPrimaryAccountCodeMasterBean primaryAcCodeMasterBean, final String dtocompositeCode,
			final AccountHeadPrimaryAccountCodeMasterDTO dto, final Map<Integer, Integer> mapForAllLevels,
			final Long orgId, final int langId, final Long empId) {

		TbAcCodingstructureDetEntity codingStructerDetEntity = null;
		final Set<AccountHeadPrimaryAccountCodeMasterEntity> set = existParentEntity.getPrimaryAcHeadHierarchicalList();
		final AccountHeadPrimaryAccountCodeMasterEntity childEntity = new AccountHeadPrimaryAccountCodeMasterEntity();
		childEntity.setPrimaryAcHeadCode(dto.getChildCode());
		if (!existParentEntity.getPrimaryAcHeadHierarchicalList().contains(childEntity)
				&& dto.getChildParentCode().equals(existParentEntity.getPrimaryAcHeadCode())) {
			childEntity.setPrimaryAcHeadDesc(dto.getChildDesc());
			childEntity.setPrimaryAcHeadCode(dto.getChildCode());
			childEntity.setPacStatusCpdId(dto.getChildPrimaryStatus());
			childEntity.setPrimaryAcHeadCompcode(dto.getChildFinalCode());
			childEntity.setPrimaryAcHeadParentId(existParentEntity);
			childEntity.setOrgid(orgId);
			childEntity.setUserId(empId);
			codingStructerDetEntity = new TbAcCodingstructureDetEntity();
			codingStructerDetEntity
					.setCodcofdetId(Long.valueOf(mapForAllLevels.get(Integer.parseInt(dto.getChildLevel()))));
			childEntity.setTbAcCodingstructureDet(codingStructerDetEntity);
			childEntity.setLmoddate(new Date());
			set.add(childEntity);
		} else if (existParentEntity.getPrimaryAcHeadHierarchicalList().contains(childEntity)) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity existEntity : existParentEntity
					.getPrimaryAcHeadHierarchicalList()) {
				if (existEntity.getPrimaryAcHeadCompcode().equals(dto.getChildFinalCode())) {
					if (dto.getChildDesc() != null) {
						existEntity.setPrimaryAcHeadDesc(dto.getChildDesc());
						if (dto.getChildPrimaryStatus() != null) {
							existEntity.setPacStatusCpdId(dto.getChildPrimaryStatus());
						}
					}
				}
			}
		}

		existParentEntity.setPrimaryAcHeadHierarchicalList(set);

		if (!existParentEntity.getPrimaryAcHeadHierarchicalList().isEmpty()) {
			recursiveMethodCallToTravellTreeNode(existParentEntity.getPrimaryAcHeadHierarchicalList(),
					primaryAcCodeMasterBean, dtocompositeCode, dto, mapForAllLevels, orgId, langId, empId);
		}
	}

	public void recursiveMethodCallToTravellTreeNode(
			final Set<AccountHeadPrimaryAccountCodeMasterEntity> listOfExistParentEntity,
			final AccountHeadPrimaryAccountCodeMasterBean primaryAcCodeMasterBean, final String dtocompositeCode,
			final AccountHeadPrimaryAccountCodeMasterDTO dto, final Map<Integer, Integer> mapForAllLevels,
			final Long orgId, final int langId, final Long empId) {
		TbAcCodingstructureDetEntity codingStructerDetEntity = null;
		Set<AccountHeadPrimaryAccountCodeMasterEntity> set = null;
		AccountHeadPrimaryAccountCodeMasterEntity childEntity = null;
		for (final AccountHeadPrimaryAccountCodeMasterEntity entity : listOfExistParentEntity) {
			set = entity.getPrimaryAcHeadHierarchicalList();
			childEntity = new AccountHeadPrimaryAccountCodeMasterEntity();
			childEntity.setPrimaryAcHeadCode(dto.getChildCode());
			childEntity.setPrimaryAcHeadCompcode(dtocompositeCode);
			if (!entity.getPrimaryAcHeadHierarchicalList().contains(childEntity)
					&& dto.getChildParentCode().equals(entity.getPrimaryAcHeadCompcode())) {
				childEntity.setPrimaryAcHeadDesc(dto.getChildDesc());
				childEntity.setPrimaryAcHeadCode(dto.getChildCode());
				childEntity.setPacStatusCpdId(dto.getChildPrimaryStatus());
				childEntity.setPrimaryAcHeadCompcode(dto.getChildFinalCode());
				childEntity.setPrimaryAcHeadParentId(entity);
				childEntity.setOrgid(orgId);
				childEntity.setUserId(empId);
				codingStructerDetEntity = new TbAcCodingstructureDetEntity();
				codingStructerDetEntity
						.setCodcofdetId(Long.valueOf(mapForAllLevels.get(Integer.parseInt(dto.getChildLevel()))));
				childEntity.setTbAcCodingstructureDet(codingStructerDetEntity);
				childEntity.setLmoddate(new Date());
				set.add(childEntity);
			} else if (entity.getPrimaryAcHeadHierarchicalList().contains(childEntity)) {
				for (final AccountHeadPrimaryAccountCodeMasterEntity existEntity : entity
						.getPrimaryAcHeadHierarchicalList()) {
					if (existEntity.getPrimaryAcHeadCompcode().equals(dto.getChildFinalCode())) {
						if (dto.getChildDesc() != null) {
							existEntity.setPrimaryAcHeadDesc(dto.getChildDesc());
							if (dto.getChildPrimaryStatus() != null) {
								existEntity.setPacStatusCpdId(dto.getChildPrimaryStatus());
							}
						}
					}
				}
			}

			entity.setPrimaryAcHeadHierarchicalList(set);
			if (!entity.getPrimaryAcHeadHierarchicalList().isEmpty()) {
				recursiveMethodCallToTravellTreeNode(entity.getPrimaryAcHeadHierarchicalList(), primaryAcCodeMasterBean,
						dtocompositeCode, dto, mapForAllLevels, orgId, langId, empId);
			}
		}

	}

	// for Retriving tree Data Using Parent Code
	@Override
	@Transactional(readOnly=true)
	public AccountHeadPrimaryAccountCodeMasterBean getDetailsUsingFunctionId(
			final AccountHeadPrimaryAccountCodeMasterBean tbAcFunctionMaster) {
		final AccountHeadPrimaryAccountCodeMasterBean fieldBean = new AccountHeadPrimaryAccountCodeMasterBean();
		final AccountHeadPrimaryAccountCodeMasterEntity parentEntity = accountHeadPrimaryAccountCodeMasterDao
				.getParentDetailsUsingPrimaryHeadId(tbAcFunctionMaster);
		final List<AccountHeadPrimaryAccountCodeMasterDTO> listOfDto = new ArrayList<>();
		fieldBean.setParentCode(parentEntity.getPrimaryAcHeadCode());
		fieldBean.setParentDesc(parentEntity.getPrimaryAcHeadDesc());
		fieldBean.setParentFinalCode(parentEntity.getPrimaryAcHeadCompcode());
		fieldBean.setParentLevel(parentEntity.getTbAcCodingstructureDet().getCodDescription());
		fieldBean.setPrimaryAcHeadId(parentEntity.getPrimaryAcHeadId());
		if ((parentEntity.getPrimaryAcHeadHierarchicalList() != null)
				&& !parentEntity.getPrimaryAcHeadHierarchicalList().isEmpty()) {
			addFunction(listOfDto, parentEntity.getPrimaryAcHeadHierarchicalList(),
					parentEntity.getPrimaryAcHeadCode());
		}
		fieldBean.setListDto(listOfDto);
		return fieldBean;
	}

	public void addFunction(final List<AccountHeadPrimaryAccountCodeMasterDTO> fields,
			final Set<AccountHeadPrimaryAccountCodeMasterEntity> fieldHierarchicalList, final String pCode) {
		if ((fieldHierarchicalList != null) && !fieldHierarchicalList.isEmpty()) {
			AccountHeadPrimaryAccountCodeMasterDTO dto = null;
			Long codLevel = null;
			Long codeLvl = null;
			for (final AccountHeadPrimaryAccountCodeMasterEntity entry : fieldHierarchicalList) {
				dto = new AccountHeadPrimaryAccountCodeMasterDTO();
				dto.setChildCode(entry.getPrimaryAcHeadCode());
				dto.setChildFunId(entry.getPrimaryAcHeadId());
				dto.setChildPrimaryStatus(entry.getPacStatusCpdId());
				dto.setChildParentCode(pCode);
				dto.setChildDesc(entry.getPrimaryAcHeadDesc());
				dto.setChildDescReg(entry.getPrimaryAcHeadDescReg());
				dto.setChildFinalCode(entry.getPrimaryAcHeadCompcode());
				if (entry.getTbAcCodingstructureDet() != null) {
					dto.setChildLevel(entry.getTbAcCodingstructureDet().getCodLevel().toString());
					codLevel = entry.getTbAcCodingstructureDet().getCodLevel();
					if ((codLevel != null) && (codLevel > 1l)) {
						codeLvl = codLevel - 1;
						dto.setChildParentLevel(codeLvl.toString());
					}
				}
				fields.add(dto);
				if ((entry.getPrimaryAcHeadHierarchicalList() != null)
						&& !entry.getPrimaryAcHeadHierarchicalList().isEmpty()) {
					addFunction(fields, entry.getPrimaryAcHeadHierarchicalList(), entry.getPrimaryAcHeadCode());
				}

			}
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.account.service.AccountFunctionMasterService#
	 * getAllParentLevelCodes()
	 */
	@Override
	@Transactional(readOnly=true)
	public List<Integer> getAllParentLevelCodes(final Long orgId) {
		return accountHeadPrimaryAccountCodeMasterDao.getAllParentLevelCodes(orgId);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.account.service.AccountFunctionMasterService#
	 * findAllWithOrgId(long)
	 */
	@Override
	@Transactional(readOnly=true)
	public List<AccountHeadPrimaryAccountCodeMasterBean> findAllWithOrgId(final long orgid) {
		final Iterable<AccountHeadPrimaryAccountCodeMasterEntity> entities = accountHeadPrimaryAccountCodeMasterDao
				.findAllWithOrgId(orgid);
		final List<AccountHeadPrimaryAccountCodeMasterBean> beans = new ArrayList<>();
		for (final AccountHeadPrimaryAccountCodeMasterEntity primaryCodeMaster : entities) {
			final AccountHeadPrimaryAccountCodeMasterBean bean = new AccountHeadPrimaryAccountCodeMasterBean();
			bean.setPrimaryAcHeadId(primaryCodeMaster.getPrimaryAcHeadId());
			bean.setPrimaryAcCodeHeadCode(primaryCodeMaster.getPrimaryAcHeadCode());
			bean.setPrimaryAcCodeHeadDesc(primaryCodeMaster.getPrimaryAcHeadDesc());
			bean.setChildDescReg(primaryCodeMaster.getPrimaryAcHeadDescReg());
			beans.add(bean);
		}
		return beans;
	}

	@Override
	@Transactional(readOnly=true)
	public Map<Long, String> getPrimaryHeadCodeLastLevels(final Long orgId) throws Exception {

		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;

		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgId, lookup.getLookUpId());
		}

		final Map<Long, String> map = new LinkedHashMap<>();
		if ((fieldList != null) && !fieldList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {
				map.put(field.getPrimaryAcHeadId(),
						field.getPrimaryAcHeadCompcode() + MainetConstants.SEPARATOR + field.getPrimaryAcHeadDesc());
			}
		}

		return map;
	}

	@Override
	@Transactional(readOnly=true)
	public Map<Long, String> getPrimaryHeadCodeLastLevelsForBank(final Long orgId) throws Exception {

		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;
		final Long activeStatusId = getActiveStatusId();
		final Map<Long, String> map = new LinkedHashMap<>();

		if (activeStatusId != null) {
			final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
					MainetConstants.CMD);
			if (lookup != null) {
				fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastActiveLevels(orgId, lookup.getLookUpId(),
						activeStatusId);
			}

			final Long bankHeadId = getBankAccountHeadId(orgId);
			if ((fieldList != null) && !fieldList.isEmpty()) {
				for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {
					if (field.getCpdIdAccountType() != null) {
						if (field.getCpdIdAccountType().equals(bankHeadId)) {
							map.put(field.getPrimaryAcHeadId(), field.getPrimaryAcHeadCompcode()
									+ MainetConstants.SEPARATOR + field.getPrimaryAcHeadDesc());
						}
					}

				}
			}
		}

		return map;
	}

	// BK

	public Long getBankAccountHeadId(final Long orgId) {

		final Organisation org = new Organisation();
		org.setOrgid(orgId);
		final LookUp lookUpField = CommonMasterUtility.getLookUpFromPrefixLookUpValue(MainetConstants.MASTER.BK,
				MainetConstants.COMMON_PREFIX.SAM, UserSession.getCurrent().getLanguageId(), org);
		final Long bankHeadId = lookUpField.getLookUpId();
		return bankHeadId;
	}

	@Override
	@Transactional(readOnly=true)
	public List<AccountBudgetOpenBalanceMasterDto> getPrimaryHeadCodeAllLastLevelsLiability(final Long orgId) {

		// to be removed in future......

		final List<AccountBudgetOpenBalanceMasterDto> list = new ArrayList<>();
		AccountBudgetOpenBalanceMasterDto dto = null;
		List<Object[]> listOfObjArray = null;
		listOfObjArray = accountHeadPrimaryAccountCodeMasterDao.getPrimaryHeadCodeAllLastLevelsLiability(orgId);
		if ((listOfObjArray != null) && !listOfObjArray.isEmpty()) {
			for (final Object[] objArr : listOfObjArray) {
				dto = new AccountBudgetOpenBalanceMasterDto();
				if (objArr[0] != null) {
					dto.setSacHeadId((Long) objArr[0]);
				}
				if ((objArr[1] != null) && !objArr[1].toString().isEmpty()) {
					dto.setSacHeadCodeOpenBalanceMaster(objArr[1].toString());

				}
				list.add(dto);
			}
		}
		return list;
	}

	@Override
	@Transactional(readOnly=true)
	public List<AccountBudgetOpenBalanceMasterDto> getPrimaryHeadCodeAllLastLevelsAsset(final Long orgId) {

		// to be removed in future......

		final List<AccountBudgetOpenBalanceMasterDto> list = new ArrayList<>();
		AccountBudgetOpenBalanceMasterDto dto = null;
		List<Object[]> listOfObjArray = null;
		listOfObjArray = accountHeadPrimaryAccountCodeMasterDao.getPrimaryHeadCodeAllLastLevelsAsset(orgId);
		if ((listOfObjArray != null) && !listOfObjArray.isEmpty()) {
			for (final Object[] objArr : listOfObjArray) {
				dto = new AccountBudgetOpenBalanceMasterDto();
				if (objArr[0] != null) {
					dto.setSacHeadId((Long) objArr[0]);
				}
				if ((objArr[1] != null) && !objArr[1].toString().isEmpty()) {
					dto.setSacHeadCodeOpenBalanceMaster(objArr[1].toString());
				}
				list.add(dto);
			}
		}
		return list;
	}

	@Override
	@Transactional(readOnly=true)
	public Map<Long, String> getPrimaryHeadCodeLastLevelsWithOutBankAndVendor(final Long orgId) {
		// to be removed in future......

		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastLevelsWithOutbankAndVendor(orgId,
					lookup.getLookUpId());
		}
		final Map<Long, String> map = new LinkedHashMap<>();
		if ((fieldList != null) && !fieldList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {
				map.put(field.getPrimaryAcHeadId(),
						field.getPrimaryAcHeadCompcode() + MainetConstants.SEPARATOR + field.getPrimaryAcHeadDesc());
			}
		}
		return map;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.account.service.
	 * AccountHeadPrimaryAccountCodeMasterService#getMenuMasterList(java.lang.
	 * String)
	 */
	@Override
	@Transactional(readOnly=true)
	public Set<AccountHeadPrimaryAccountCodeMasterEntity> getParentMenuList(final Long orgId) {
		final Set<AccountHeadPrimaryAccountCodeMasterEntity> parentSet = accountHeadPrimaryAccountCodeMasterDao
				.getParentDetails(orgId);
		return parentSet;
	}

	/*
	 * (non-Javadoc) create super parent
	 * 
	 * @see com.abm.mainetservice.account.service.
	 * AccountHeadPrimaryAccountCodeMasterService#createParent(com.abm.mainetservice
	 * .account .bean.AccountHeadPrimaryAccountCodeMasterBean,
	 * com.abm.mainetservice.account.entity.TbAcCodingstructureDetEntity,
	 * java.lang.Long, int, java.lang.Long)
	 */
	@Override
	@Transactional
	public void createParent(final AccountHeadPrimaryAccountCodeMasterBean primaryHeadBean, final Long orgId,
			final int langId, final Long empId) {

		Map<Integer, Integer> mapForAllLevel = new HashMap<>();
		mapForAllLevel = getMapForAllLevels(primaryHeadBean.getCodconfigId());
		final AccountHeadPrimaryAccountCodeMasterEntity primaryHeadMasterEntity = new AccountHeadPrimaryAccountCodeMasterEntity();

		if (primaryHeadBean.getCpdIdAcHeadTypes() != null) {
		}
		primaryHeadMasterEntity.setPrimaryAcHeadDesc(primaryHeadBean.getParentDesc());
		primaryHeadMasterEntity.setPrimaryAcHeadCode(primaryHeadBean.getParentCode());
		primaryHeadMasterEntity.setPrimaryAcHeadDescReg(primaryHeadBean.getParentDescReg());
		primaryHeadMasterEntity.setPrimaryAcHeadCompcode(primaryHeadBean.getParentCode());
		primaryHeadMasterEntity.setPrimaryAcHeadParentId(null);
		final Long headOther = primaryHeadBean.getCpdOtherAcHeadTypes();
		final Long headId = getHeadCpdId(headOther, orgId);
		primaryHeadMasterEntity.setCpdIdAcHeadTypes(headId);
		primaryHeadMasterEntity.setOrgid(orgId);
		primaryHeadMasterEntity.setUserId(empId);
		primaryHeadMasterEntity.setLgIpMac(primaryHeadBean.getIpMacAddress());

		primaryHeadMasterEntity.setPacStatusCpdId(primaryHeadBean.getPacStatusCpdId());

		TbAcCodingstructureDetEntity codingStrucureDetEntity = null;
		codingStrucureDetEntity = new TbAcCodingstructureDetEntity();
		codingStrucureDetEntity.setCodcofdetId(Long.valueOf(mapForAllLevel.get(MainetConstants.NUMBER_ONE)));// super
																												// parent
																												// level
																												// will
																												// be 1
																												// always
		primaryHeadMasterEntity.setTbAcCodingstructureDet(codingStrucureDetEntity);
		primaryHeadMasterEntity.setLmoddate(new Date());

		acPrimaryCodeMasterJpaRepository.save(primaryHeadMasterEntity);
	}

	@Override
	@Transactional
	public void createChild(final AccountHeadPrimaryAccountCodeMasterBean primaryHeadBean, final Long orgId,
			final int langId, final Long empId) {

		AccountHeadPrimaryAccountCodeMasterEntity existingParentEntity;
		existingParentEntity = accountHeadPrimaryAccountCodeMasterDao
				.getParentDetailsUsingPrimaryHeadId(primaryHeadBean);

		existingParentEntity.setPacStatusCpdId(primaryHeadBean.getPacStatusCpdId());
		
		Map<Integer, Integer> mapForAllLevel = new HashMap<>();
		mapForAllLevel = getMapForAllLevels(primaryHeadBean.getCodconfigId());
		final int level = primaryHeadBean.getHiddenCodeLevel().intValue();

		String[] strArray = null;
		String childParentFinalCode = null;
		if (!primaryHeadBean.isNewRecord()) {
			if(primaryHeadBean.getHiddenCodeLevel() == 1) {
				existingParentEntity.setPrimaryAcHeadDesc(primaryHeadBean.getParentDesc());
				existingParentEntity.setPrimaryAcHeadDescReg(primaryHeadBean.getChildDescReg());
				existingParentEntity.setBudgetCheckFlag(primaryHeadBean.getBudgetCheckFlag());
			}
		}
		for (final AccountHeadPrimaryAccountCodeMasterDTO dto : primaryHeadBean.getListDto()) {
			strArray = dto.getChildFinalCode().split(MainetConstants.HYPHEN);
			childParentFinalCode = primaryHeadBean.getHiddenParentCode();
			for (int i = 0; i < (strArray.length - 1); i++) {
				if (childParentFinalCode == null) {
					childParentFinalCode = strArray[i];
				} else {
					childParentFinalCode += MainetConstants.HYPHEN + strArray[i];
				}
			}

			traverseFirstNodeForChild(existingParentEntity, primaryHeadBean, childParentFinalCode, dto, mapForAllLevel,
					orgId, langId, empId, level);

		}

	}

	private void traverseFirstNodeForChild(final AccountHeadPrimaryAccountCodeMasterEntity existingParentEntity,
			final AccountHeadPrimaryAccountCodeMasterBean primaryBean, final String dtocompositeCode,
			final AccountHeadPrimaryAccountCodeMasterDTO dto, final Map<Integer, Integer> mapForAllLevel,
			final Long orgId, final int langId, final Long empId, final int level) {

		TbAcCodingstructureDetEntity codingStructerDetEntity = null;
		final Set<AccountHeadPrimaryAccountCodeMasterEntity> set = existingParentEntity
				.getPrimaryAcHeadHierarchicalList();
		final AccountHeadPrimaryAccountCodeMasterEntity childEntity = new AccountHeadPrimaryAccountCodeMasterEntity();

		childEntity.setPrimaryAcHeadCode(dto.getChildCode());

		if (!existingParentEntity.getPrimaryAcHeadHierarchicalList().contains(childEntity)
				&& primaryBean.getHiddenParentCode().equals(existingParentEntity.getPrimaryAcHeadCode())) {
			childEntity.setPrimaryAcHeadDesc(dto.getChildDesc());
			childEntity.setPrimaryAcHeadCode(dto.getChildCode());
			childEntity.setPrimaryAcHeadDescReg(dto.getChildDescReg());
			childEntity.setPacStatusCpdId(getActiveStatusId());

			childEntity.setPrimaryAcHeadCompcode(dto.getChildFinalCode());

			childEntity.setCpdIdAcHeadTypes(primaryBean.getCpdIdAcHeadTypes());

			childEntity.setPrimaryAcHeadParentId(existingParentEntity);
			childEntity.setOrgid(orgId);
			childEntity.setUserId(empId);
			childEntity.setLgIpMac(primaryBean.getIpMacAddress());
			codingStructerDetEntity = new TbAcCodingstructureDetEntity();
			codingStructerDetEntity.setCodcofdetId(Long.valueOf(mapForAllLevel.get(level)));
			childEntity.setTbAcCodingstructureDet(codingStructerDetEntity);
			childEntity.setLmoddate(new Date());
			set.add(childEntity);
		} else if (existingParentEntity.getPrimaryAcHeadHierarchicalList().contains(childEntity)) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity existEntity : existingParentEntity
					.getPrimaryAcHeadHierarchicalList()) {
				if (existEntity.getPrimaryAcHeadCompcode().equals(dto.getChildFinalCode())) {
					if (dto.getChildDesc() != null) {
						existEntity.setPrimaryAcHeadDesc(dto.getChildDesc());
						existEntity.setPrimaryAcHeadDescReg(dto.getChildDescReg());
						if (primaryBean.getHiddenCodeLevel().equals(primaryBean.getNoOfLevel())) {
							
							existEntity.setPacStatusCpdId(dto.getChildPrimaryStatus());
							if(dto.getBudgetCheckFlag() != null && !dto.getBudgetCheckFlag().isEmpty()) {
								existEntity.setBudgetCheckFlag(dto.getBudgetCheckFlag());
							}
						}
						existEntity.setLgIpMacUpd(primaryBean.getIpMacAddress());

					}
				}
			}
		}

		existingParentEntity.setPrimaryAcHeadHierarchicalList(set);

		if (!existingParentEntity.getPrimaryAcHeadHierarchicalList().isEmpty()) {
			recursiveMethodCallToTravellTree(existingParentEntity.getPrimaryAcHeadHierarchicalList(), primaryBean,
					dtocompositeCode, dto, mapForAllLevel, orgId, langId, empId, level);
		}
	}

	public void recursiveMethodCallToTravellTree(
			final Set<AccountHeadPrimaryAccountCodeMasterEntity> listOfExistParentEntity,
			final AccountHeadPrimaryAccountCodeMasterBean primaryMasterBean, final String dtocompositeCode,
			final AccountHeadPrimaryAccountCodeMasterDTO dto, final Map<Integer, Integer> mapForAllLevels,
			final Long orgId, final int langId, final Long empId, final int level) {
		TbAcCodingstructureDetEntity codingStructerDetEntity = null;
		Set<AccountHeadPrimaryAccountCodeMasterEntity> set = null;
		AccountHeadPrimaryAccountCodeMasterEntity childEntity = null;
		for (final AccountHeadPrimaryAccountCodeMasterEntity entity : listOfExistParentEntity) {
			set = entity.getPrimaryAcHeadHierarchicalList();
			childEntity = new AccountHeadPrimaryAccountCodeMasterEntity();
			childEntity.setPrimaryAcHeadCode(dto.getChildCode());
			childEntity.setPrimaryAcHeadCompcode(dtocompositeCode);
			childEntity.setPacStatusCpdId(getActiveStatusId());
			if (!entity.getPrimaryAcHeadHierarchicalList().contains(childEntity)
					&& primaryMasterBean.getHiddenParentCode().equals(entity.getPrimaryAcHeadCompcode())) {
				childEntity.setPrimaryAcHeadDesc(dto.getChildDesc());
				childEntity.setPrimaryAcHeadCode(dto.getChildCode());
				childEntity.setPacStatusCpdId(getActiveStatusId());
				childEntity.setCpdIdAcHeadTypes(primaryMasterBean.getCpdIdAcHeadTypes());
				childEntity.setPrimaryAcHeadCompcode(dto.getChildFinalCode());
				childEntity.setPrimaryAcHeadParentId(entity);
				childEntity.setOrgid(orgId);
				childEntity.setUserId(empId);
				childEntity.setLgIpMac(primaryMasterBean.getIpMacAddress());
				codingStructerDetEntity = new TbAcCodingstructureDetEntity();
				codingStructerDetEntity.setCodcofdetId(Long.valueOf(mapForAllLevels.get(level)));
				childEntity.setTbAcCodingstructureDet(codingStructerDetEntity);
				childEntity.setLmoddate(new Date());
				set.add(childEntity);
			} else if (entity.getPrimaryAcHeadHierarchicalList().contains(childEntity)) {
				for (final AccountHeadPrimaryAccountCodeMasterEntity existEntity : entity
						.getPrimaryAcHeadHierarchicalList()) {
					if (existEntity.getPrimaryAcHeadCompcode().equals(dto.getChildFinalCode())) {
						if (dto.getChildDesc() != null) {
							existEntity.setPrimaryAcHeadDesc(dto.getChildDesc());
							if (primaryMasterBean.getHiddenCodeLevel().equals(primaryMasterBean.getNoOfLevel())) {
								existEntity.setPacStatusCpdId(dto.getChildPrimaryStatus());
							}
							existEntity.setLgIpMacUpd(primaryMasterBean.getIpMacAddress());
						}
					}
				}
			}

			entity.setPrimaryAcHeadHierarchicalList(set);
			if (!entity.getPrimaryAcHeadHierarchicalList().isEmpty()) {
				recursiveMethodCallToTravellTree(entity.getPrimaryAcHeadHierarchicalList(), primaryMasterBean,
						dtocompositeCode, dto, mapForAllLevels, orgId, langId, empId, level);
			}
		}

	}

	public Long getActiveStatusId() {
		final LookUp lookUpFieldStatus = CommonMasterUtility.getLookUpFromPrefixLookUpValue(MainetConstants.MASTER.A,
				PrefixConstants.LookUp.ACN, UserSession.getCurrent().getLanguageId(),
				UserSession.getCurrent().getOrganisation());
		final Long activeStatusId = lookUpFieldStatus.getLookUpId();
		return activeStatusId;
	}

	public Long getHeadCpdId(final Long cpdOther, final Long orgid) {
		final Long headCpdId = CommonMasterUtility.lookUpIdByPrefixAndOtherField(MainetConstants.COMMON_PREFIX.COA,
				cpdOther, orgid);
		return headCpdId;
	}

	public Map<Integer, Integer> getMapForAllLevels(final Long codcongigId) {
		final List<Object[]> codcofDetIdForAllLvl = accountHeadPrimaryAccountCodeMasterDao
				.getCodCofigurationDetIdUsingLevel(codcongigId);
		final Map<Integer, Integer> mapForAllLevels = new HashMap<>();

		if ((codcofDetIdForAllLvl != null) && !codcofDetIdForAllLvl.isEmpty()) {
			for (final Object[] obj : codcofDetIdForAllLvl) {
				mapForAllLevels.put(Integer.valueOf(obj[MainetConstants.ENGLISH].toString()),
						Integer.valueOf(obj[MainetConstants.EMPTY_LIST].toString()));
			}
		}
		return mapForAllLevels;
	}

	/*
	 * (non-Javadoc) #find All Composite Code by OrgId(long)
	 * 
	 * @see com.abm.mainetservice.account.service.
	 * AccountHeadPrimaryAccountCodeMasterService
	 */
	@Override
	@Transactional(readOnly=true)
	public List<AccountHeadPrimaryAccountCodeMasterEntity> findAllComppositeCodeOrgId(final long orgid) {

		final List<AccountHeadPrimaryAccountCodeMasterEntity> compList = accountHeadPrimaryAccountCodeMasterDao
				.findAllCopositeCodeOrgId(orgid);
		return compList;
	}

	@Override
	@Transactional
	public Map<Long, String> getPrimaryHeadCodeStatusLastLevels(final Organisation organisation, final int langId)
			throws Exception {

		final Long orgId = organisation.getOrgid();

		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgId, lookup.getLookUpId());
		}
		final Map<Long, String> map = new LinkedHashMap<>();
		if ((fieldList != null) && !fieldList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {

				final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
				final Long lookUpStatusId = statusLookup.getLookUpId();
				if (lookUpStatusId.equals(field.getPacStatusCpdId())) {
					map.put(field.getPrimaryAcHeadId(), field.getPrimaryAcHeadCompcode() + MainetConstants.SEPARATOR
							+ field.getPrimaryAcHeadDesc());
				}
			}
		}
		return map;
	}

	@Override
	@Transactional
	public Map<Long, String> getPrimaryHeadStatusWiseAndAcTypeSubTypeLastLevels(final Organisation organisation,
			final int langId) throws Exception {

		final Long orgId = organisation.getOrgid();

		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgId, lookup.getLookUpId());
		}
		final Map<Long, String> map = new LinkedHashMap<>();
		if ((fieldList != null) && !fieldList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {

				final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
				final Long lookUpStatusId = statusLookup.getLookUpId();
				if (lookUpStatusId.equals(field.getPacStatusCpdId())) {
					if ((field.getCpdIdAccountType() == null) && (field.getCpdIdPayMode() == null)) {
						map.put(field.getPrimaryAcHeadId(), field.getPrimaryAcHeadCompcode() + MainetConstants.SEPARATOR
								+ field.getPrimaryAcHeadDesc());
					} else {
						final LookUp statusLookup1 = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
								PrefixConstants.ACCOUNT_MASTERS.INACTIVE_STATUS_CPD_VALUE,
								PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
						final Long lookUpStatusId1 = statusLookup1.getLookUpId();
						if (field.getCpdIdBanktype() != null) {
							if (lookUpStatusId1.equals(field.getCpdIdBanktype())) {
								map.put(field.getPrimaryAcHeadId(), field.getPrimaryAcHeadCompcode()
										+ MainetConstants.SEPARATOR + field.getPrimaryAcHeadDesc());
							}
						}
					}
				}
			}
		}
		return map;
	}

	@Override
	@Transactional(readOnly=true)
	public List<AccountBudgetOpenBalanceMasterDto> getPrimaryHeadCodeAllStatusLastLevelsLiability(final Long orgId,
			final Organisation organisation, final int langId) {

		// to be removed in future......

		final List<AccountBudgetOpenBalanceMasterDto> list = new ArrayList<>();
		AccountBudgetOpenBalanceMasterDto dto = null;
		List<Object[]> listOfObjArray = null;
		listOfObjArray = accountHeadPrimaryAccountCodeMasterDao.getPrimaryHeadCodeAllLastLevelsLiability(orgId);
		if ((listOfObjArray != null) && !listOfObjArray.isEmpty()) {
			for (final Object[] objArr : listOfObjArray) {
				dto = new AccountBudgetOpenBalanceMasterDto();

				final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
				final Long lookUpStatusId = statusLookup.getLookUpId();
				Long pacStatus = null;
				Long sacStatus = null;
				if (objArr[2] != null && objArr[3] != null) {
					sacStatus = Long.valueOf(objArr[2].toString());
					pacStatus = Long.valueOf(objArr[3].toString());
					if (lookUpStatusId.equals(sacStatus)) {
						if (lookUpStatusId.equals(pacStatus)) {
							if (objArr[0] != null) {
								dto.setSacHeadId((Long) objArr[0]);
							}
							if ((objArr[1] != null) && !objArr[1].toString().isEmpty()) {
								dto.setSacHeadCodeOpenBalanceMaster(objArr[1].toString());

							}
						}
					}
				}
				list.add(dto);
			}
		}
		return list;
	}

	@Override
	@Transactional(readOnly=true)
	public List<AccountBudgetOpenBalanceMasterDto> getPrimaryHeadCodeAllStatusLastLevelsAsset(final Long orgId,
			final Organisation organisation, final int langId) {

		// to be removed in future......

		final List<AccountBudgetOpenBalanceMasterDto> list = new ArrayList<>();
		AccountBudgetOpenBalanceMasterDto dto = null;
		List<Object[]> listOfObjArray = null;
		listOfObjArray = accountHeadPrimaryAccountCodeMasterDao.getPrimaryHeadCodeAllLastLevelsAsset(orgId);
		if ((listOfObjArray != null) && !listOfObjArray.isEmpty()) {
			for (final Object[] objArr : listOfObjArray) {
				dto = new AccountBudgetOpenBalanceMasterDto();

				final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
				final Long lookUpStatusId = statusLookup.getLookUpId();
				Long pacStatus = null;
				Long sacStatus = null;
				if (objArr[2] != null && objArr[3] != null) {
					sacStatus = Long.valueOf(objArr[2].toString());
					pacStatus = Long.valueOf(objArr[3].toString());
					if (lookUpStatusId.equals(sacStatus)) {
						if (lookUpStatusId.equals(pacStatus)) {
							if (objArr[0] != null) {
								dto.setSacHeadId((Long) objArr[0]);
							}
							if ((objArr[1] != null) && !objArr[1].toString().isEmpty()) {
								dto.setSacHeadCodeOpenBalanceMaster(objArr[1].toString());

							}
						}
					}
				}
				list.add(dto);
			}
		}
		return list;
	}

	@Override
	@Transactional
	public Map<Long, String> getVendorTypeWisePrimaryAcHead(final Long cpdVendortype, final Long cpdVendorSubType,
			final Long lookUpStatusId, final Long orgId) {

		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgId, lookup.getLookUpId());
		}
		final Map<Long, String> map = new LinkedHashMap<>();
		if ((fieldList != null) && !fieldList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {
				if ((field.getCpdIdAccountType() != null) && (field.getCpdIdPayMode() != null)
						&& (field.getPacStatusCpdId() != null)) {

					if (field.getCpdIdAccountType().equals(cpdVendortype)
							&& field.getCpdIdPayMode().equals(cpdVendorSubType)
							&& field.getPacStatusCpdId().equals(lookUpStatusId)
							&& field.getCpdIdBanktype().equals(lookUpStatusId)) {
						map.put(field.getPrimaryAcHeadId(), field.getPrimaryAcHeadCompcode() + MainetConstants.SEPARATOR
								+ field.getPrimaryAcHeadDesc());
					}
				}
			}
		}
		return map;
	}

	@Override
	@Transactional
	public Map<Long, String> findAdvanceAccountHead(final Long orgId, final Long lookUpStatusId) {

		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgId, lookup.getLookUpId());
		}
		final Map<Long, String> map = new LinkedHashMap<>();
		if ((fieldList != null) && !fieldList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {
				if ((field.getCpdIdAccountType() != null) && (field.getCpdIdPayMode() != null)
						&& (field.getPacStatusCpdId() != null)) {

					if (field.getPacStatusCpdId().equals(lookUpStatusId)) {
						map.put(field.getPrimaryAcHeadId(), field.getPrimaryAcHeadCompcode() + MainetConstants.SEPARATOR
								+ field.getPrimaryAcHeadDesc());
					}
				}
			}
		}
		return map;
	}

	@Override
	@Transactional
	public Map<Long, String> getPrimaryMasterStatusLastLevels(final Long orgid, final Long lookUpStatusId) {
		// TODO Auto-generated method stub
		List<AccountHeadPrimaryAccountCodeMasterEntity> primaryList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			primaryList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgid, lookup.getLookUpId());
		}
		final Map<Long, String> map = new LinkedHashMap<>();
		if ((primaryList != null) && !primaryList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity pacHead : primaryList) {
				if (lookUpStatusId.equals(pacHead.getPacStatusCpdId())) {
					map.put(pacHead.getPrimaryAcHeadId(), pacHead.getPrimaryAcHeadCompcode() + MainetConstants.SEPARATOR
							+ pacHead.getPrimaryAcHeadDesc());
				}
			}
		}
		return map;
	}

	@Override
	@Transactional
	public Map<Long, String> getPrimaryMasterLastLevels(final Long orgid) {
		// TODO Auto-generated method stub
		List<AccountHeadPrimaryAccountCodeMasterEntity> primaryList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			primaryList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgid, lookup.getLookUpId());
		}
		final Map<Long, String> map = new LinkedHashMap<>();
		if ((primaryList != null) && !primaryList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity pacHead : primaryList) {
				map.put(pacHead.getPrimaryAcHeadId(), pacHead.getPrimaryAcHeadCompcode() + MainetConstants.SEPARATOR
						+ pacHead.getPrimaryAcHeadDesc());
			}
		}
		return map;
	}

	@Override
	@Transactional
	public String findByPrimaryHeadCodeDesc(final Long pacHeadId) {
		final List<Object[]> primaryHeadCodeDesc = acPrimaryCodeMasterJpaRepository
				.findByPrimaryHeadCodeDesc(pacHeadId);
		String pacHeadCodeDesc = null;
		for (final Object[] objects : primaryHeadCodeDesc) {
			if ((objects[0] != null) && (objects[1] != null)) {
				pacHeadCodeDesc = objects[0].toString() + MainetConstants.SEPARATOR + objects[1].toString();
			}
		}
		return pacHeadCodeDesc;
	}

	@Override
	@Transactional
	public Map<Long, String> getSecondaryPrimaryHeadCodeStatusLastLevels(final Organisation organisation,
			final int langId) throws Exception {

		final Long orgId = organisation.getOrgid();

		Long vendorTypeId = CommonMasterUtility.lookUpIdByLookUpCodeAndPrefix(PrefixConstants.TbAcVendormaster.VN,
				PrefixConstants.TbAcVendormaster.SAM, orgId);
		Long bankTypeId = CommonMasterUtility.lookUpIdByLookUpCodeAndPrefix(
				PrefixConstants.StandardAccountHeadMapping.BK, PrefixConstants.TbAcVendormaster.SAM, orgId);

		List<AccountHeadPrimaryAccountCodeMasterEntity> pacHeadList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			pacHeadList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgId, lookup.getLookUpId());
		}
		final Map<Long, String> map = new LinkedHashMap<>();
		if ((pacHeadList != null) && !pacHeadList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity pacHead : pacHeadList) {

				final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
				final Long lookUpStatusId = statusLookup.getLookUpId();
				if (lookUpStatusId.equals(pacHead.getPacStatusCpdId())) {
					if (pacHead.getCpdIdAccountType() == null) {
						map.put(pacHead.getPrimaryAcHeadId(), pacHead.getPrimaryAcHeadCompcode()
								+ MainetConstants.SEPARATOR + pacHead.getPrimaryAcHeadDesc());
					} else if ((!pacHead.getCpdIdAccountType().equals(vendorTypeId))
							&& (!pacHead.getCpdIdAccountType().equals(bankTypeId))) {
						map.put(pacHead.getPrimaryAcHeadId(), pacHead.getPrimaryAcHeadCompcode()
								+ MainetConstants.SEPARATOR + pacHead.getPrimaryAcHeadDesc());
					}
				}
			}
		}
		return map;
	}

	@Override
	@Transactional(readOnly=true)
	public Map<Long, String> getPrimaryCompositeCode(Organisation organisation, int langId) throws Exception {
		final Long orgId = organisation.getOrgid();

		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgId, lookup.getLookUpId());
		}
		final Map<Long, String> map = new LinkedHashMap<>();
		if ((fieldList != null) && !fieldList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {

				final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
				final Long lookUpStatusId = statusLookup.getLookUpId();
				if (lookUpStatusId.equals(field.getPacStatusCpdId())) {
					map.put(field.getPrimaryAcHeadId(), field.getPrimaryAcHeadCompcode());
							
				}
			}
		}
		return map;
	}

	@Override
	@Transactional(readOnly=true)
	public Map<String, String> getPrimaryCompositeCodeAndDesc(Organisation organisation, int langId) throws Exception {
		final Long orgId = organisation.getOrgid();
		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgId, lookup.getLookUpId());
		}
		final Map<String, String> map = new LinkedHashMap<>();
		if ((fieldList != null) && !fieldList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {

				final LookUp statusLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_STATUS_CPD_VALUE,
						PrefixConstants.ACCOUNT_MASTERS.ACTIVE_INACTIVE_PREFIX, langId, organisation);
				final Long lookUpStatusId = statusLookup.getLookUpId();
				if (lookUpStatusId.equals(field.getPacStatusCpdId())) {
					map.put(field.getPrimaryAcHeadCompcode(),field.getPrimaryAcHeadDesc());
							
				}
			}
		}
		return map;
	}

	@Override
	public Map<Long, String> getVendorTypeWisePrimaryAcHeadCompositeCode(Long cpdVendortype, Long cpdVendorSubType,
			Long lookUpStatusId, Long orgId) {
		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgId, lookup.getLookUpId());
		}
		final Map<Long, String> map = new LinkedHashMap<>();
		if ((fieldList != null) && !fieldList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {
				if ((field.getCpdIdAccountType() != null) && (field.getCpdIdPayMode() != null)
						&& (field.getPacStatusCpdId() != null)) {

					if (field.getCpdIdAccountType().equals(cpdVendortype)
							&& field.getCpdIdPayMode().equals(cpdVendorSubType)
							&& field.getPacStatusCpdId().equals(lookUpStatusId)
							&& field.getCpdIdBanktype().equals(lookUpStatusId)) {
						map.put(field.getPrimaryAcHeadId(), field.getPrimaryAcHeadCompcode());
					}
				}
			}
		}
		return map;
}

	@Override
	@Transactional(readOnly=true)
	public Map<Long, String> getPrimaryHeadCodeLastLevelsForBankAccount(Long orgId) {
		List<AccountHeadPrimaryAccountCodeMasterEntity> fieldList = null;
		final Long activeStatusId = getActiveStatusId();
		final Map<Long, String> map = new LinkedHashMap<>();

		if (activeStatusId != null) {
			final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
					MainetConstants.CMD);
			if (lookup != null) {
				fieldList = accountHeadPrimaryAccountCodeMasterDao.getLastActiveLevels(orgId, lookup.getLookUpId(),
						activeStatusId);
			}

			final Long bankHeadId = getBankAccountHeadId(orgId);
			if ((fieldList != null) && !fieldList.isEmpty()) {
				for (final AccountHeadPrimaryAccountCodeMasterEntity field : fieldList) {
					if (field.getCpdIdAccountType() != null) {
						if (field.getCpdIdAccountType().equals(bankHeadId)) {
							map.put(field.getPrimaryAcHeadId(), field.getPrimaryAcHeadCompcode());
						}
					}

				}
			}
		}

		return map;
	}
	
	@Override
	@Transactional(readOnly=true)
	public List<AccountHeadPrimaryAccountCodeMasterBean> getPrimaryAcHeadCompositeCodeAllList(Long lookUpStatusId, Long orgId){
		List<AccountHeadPrimaryAccountCodeMasterEntity> primaryHeadList = null;
		final LookUp lookup = CommonMasterUtility.getValueFromPrefixLookUp(PrefixConstants.ACCOUNT_MASTERS.AHP,
				MainetConstants.CMD);
		if (lookup != null) {
			primaryHeadList = accountHeadPrimaryAccountCodeMasterDao.getLastLevels(orgId, lookup.getLookUpId());
		}
		List<AccountHeadPrimaryAccountCodeMasterBean> list = new ArrayList<AccountHeadPrimaryAccountCodeMasterBean>();
		if ((primaryHeadList != null) && !primaryHeadList.isEmpty()) {
			for (final AccountHeadPrimaryAccountCodeMasterEntity primaryHead : primaryHeadList) {
				if ((primaryHead.getCpdIdAccountType() != null) && (primaryHead.getCpdIdPayMode() != null)
						&& (primaryHead.getPacStatusCpdId() != null)) {
					AccountHeadPrimaryAccountCodeMasterBean bean = new AccountHeadPrimaryAccountCodeMasterBean();
					bean.setCpdIdAccountType(primaryHead.getCpdIdAccountType());
					bean.setCpdIdPayMode(primaryHead.getCpdIdPayMode());
					bean.setPacStatusCpdId(primaryHead.getPacStatusCpdId());
					bean.setEditedChildStatus(primaryHead.getCpdIdBanktype());
					bean.setPrimaryAcHeadId(primaryHead.getPrimaryAcHeadId());
					bean.setPrimaryAcCodeHeadCompcode(primaryHead.getPrimaryAcHeadCompcode());
					list.add(bean);
				}
			}
		}
		return list;
	}

	@Override
	public String getHeadCodeDesReg(Long headId) {
	return acPrimaryCodeMasterJpaRepository.findPrimaryHeadCodeDescRegByHeadId(headId);
	}
}
