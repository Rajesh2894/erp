/*
 * Created on 24 Jun 2015 ( Time 19:52:53 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.abm.mainet.common.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManagerFactory;
import javax.persistence.PersistenceUnit;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.domain.TbComparamDetEntity;
import com.abm.mainet.common.domain.TbComparamMasEntity;
import com.abm.mainet.common.domain.TbComparentDetEntity;
import com.abm.mainet.common.domain.TbComparentMasEntity;
import com.abm.mainet.common.domain.ViewPrefixDetails;
import com.abm.mainet.common.master.dao.IComParamMasterDAO;
import com.abm.mainet.common.master.dto.TbComparamDet;
import com.abm.mainet.common.master.dto.TbComparamMas;
import com.abm.mainet.common.master.dto.TbComparentDet;
import com.abm.mainet.common.master.dto.TbComparentMas;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.mapper.TbComparamDetServiceMapper;
import com.abm.mainet.common.master.mapper.TbComparamMasServiceMapper;
import com.abm.mainet.common.master.mapper.TbComparentDetServiceMapper;
import com.abm.mainet.common.master.mapper.TbComparentMasServiceMapper;
import com.abm.mainet.common.master.repository.TbComparamMasHistJpaRepository;
import com.abm.mainet.common.master.repository.TbComparamMasJpaRepository;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.utility.UserSession;

/**
 * Implementation of TbComparamMasService
 */
@Component
public class TbComparamMasServiceImpl implements TbComparamMasService {

    @Resource
    private TbComparamMasJpaRepository tbComparamMasJpaRepository;

    @Resource
    TbComparamMasHistJpaRepository tbComparamMasHistJpaRepository;

    @Resource
    private TbComparamMasServiceMapper tbComparamMasServiceMapper;

    @Resource
    private TbComparamDetServiceMapper tbComparamDetServiceMapper;

    @Resource
    private TbComparentMasServiceMapper tbComparentMasServiceMapper;

    @Resource
    private TbComparentDetServiceMapper tbComparentDetServiceMapper;

    @Resource
    private TbComparentDetService tbComparentDetService;

    @Resource
    private TbDepartmentService tbDepartmentService;

    @PersistenceUnit
    EntityManagerFactory entityManagerFactory;

    @Autowired
    private IComParamMasterDAO comParamMasterDAO;
    
    
    

    private static Logger logger = Logger.getLogger(TbComparamMasServiceImpl.class);

    private static final String ISCHECKEDNO = "N";
    private static final String ISCHECKEDYES = "Y";

    @Override
    @Transactional
    public TbComparamMas findById(final Long cpmId) {
        final TbComparamMasEntity tbComparamMasEntity = tbComparamMasJpaRepository.findOne(cpmId);
        return tbComparamMasServiceMapper.mapTbComparamMasEntityToTbComparamMas(tbComparamMasEntity);
    }

    @Override
    @Transactional
    public List<TbComparamMas> findAll() {
        final Iterable<TbComparamMasEntity> entities = tbComparamMasJpaRepository.findAll();
        final List<TbComparamMas> beans = new ArrayList<>();
        final List<TbDepartment> departmentLst = tbDepartmentService.findAll();
        String deptName = null;
        for (final TbComparamMasEntity tbComparamMasEntity : entities) {
            deptName = findDepartmentByShortcode(tbComparamMasEntity.getCpmModuleName(), departmentLst);
            TbComparamMas tbComparamMas = tbComparamMasServiceMapper.mapTbComparamMasEntityToTbComparamMas(tbComparamMasEntity);
            tbComparamMas.setCpmModuleNameStr(deptName);
            beans.add(tbComparamMas);
        }
        return beans;
    }

    public String findDepartmentByShortcode(String deptCode, List<TbDepartment> deptList) {
        String deptName = null;
        for (TbDepartment dept : deptList) {
            if (dept.getDpDeptcode() != null && deptCode != null) {
                if (dept.getDpDeptcode().equalsIgnoreCase(deptCode)) {
                    deptName = dept.getDpDeptdesc();
                }
            }
        }
        return deptName;
    }

    @Transactional
    public TbComparamMas save(final TbComparamMas tbComparamMas) {
        return update(tbComparamMas);
    }

    @Override
    @Transactional
    public TbComparamMas create(TbComparamMas tbComparamMas) {
        final TbComparamMasEntity tbComparamMasEntity = new TbComparamMasEntity();
        tbComparamMasServiceMapper.mapTbComparamMasToTbComparamMasEntity(tbComparamMas, tbComparamMasEntity);
        final Date date = new Date();
        String prefixName = null;

        if (tbComparamMas.getComparamDetList().size() > 0) {

            TbComparamDetEntity tbComparamDetEntity = null;
            final List<TbComparamDetEntity> tbComparamDetEntityList = new ArrayList<>();

            for (final TbComparamDet tbComparamDetData : tbComparamMas.getComparamDetList()) {
                tbComparamDetEntity = new TbComparamDetEntity();

                tbComparamDetData.setOrgid(new Long(UserSession.getCurrent().getOrganisation().getOrgid()));
                tbComparamDetData.setUserId(new Long(UserSession.getCurrent().getEmployee().getEmpId()));
                tbComparamDetData.setLangId(new Long(UserSession.getCurrent().getLanguageId()));
                tbComparamDetData.setLmoddate(date);

                prefixName = tbComparamDetData.getCpdValue().toUpperCase();
                tbComparamDetData.setCpdValue(prefixName);

                tbComparamDetServiceMapper.mapTbComparamDetToTbComparamDetEntity(tbComparamDetData, tbComparamDetEntity);

                tbComparamDetEntity.setTbComparamMas(tbComparamMasEntity);
                tbComparamDetEntityList.add(tbComparamDetEntity);

            }

            tbComparamMasEntity.setListOfTbComparamDet(tbComparamDetEntityList);
        } else {

            TbComparentMasEntity tbComparentMasEntity = null;
            TbComparentDetEntity tbComparentDetEntity = null;

            List<TbComparentDetEntity> tbComparentDetParentEntityList = new ArrayList<>();
            List<TbComparentDet> tbComparentParentDetList = new ArrayList<>();
            List<TbComparentDetEntity> tbComparentDetParentEntityTempList = new ArrayList<>();
            List<TbComparentDet> tbComparentParentDetTempList = new ArrayList<>();
            final List<TbComparentMasEntity> tbComparentMasEntityList = new ArrayList<>();
            List<TbComparentDetEntity> tbComparentDetEntityList = null;

            for (final TbComparentMas comparentMas : tbComparamMas.getComparentMas()) {

                tbComparentMasEntity = new TbComparentMasEntity();

                comparentMas.setOrgid(new Long(UserSession.getCurrent().getOrganisation().getOrgid()));
                comparentMas.setUserId(new Long(UserSession.getCurrent().getEmployee().getEmpId()));
                comparentMas.setLangId(new Long(UserSession.getCurrent().getLanguageId()));
                comparentMas.setLmoddate(date);
                comparentMas.setComStatus(MainetConstants.Common_Constant.YES);
                comparentMas.setComparamMas(tbComparamMas);

                prefixName = comparentMas.getComValue().toUpperCase();
                comparentMas.setComValue(prefixName);

                tbComparentMasServiceMapper.mapTbComparentMasToTbComparentMasEntity(comparentMas, tbComparentMasEntity);

                tbComparentMasEntity.setTbComparamMas(tbComparamMasEntity);
                tbComparentMasEntityList.add(tbComparentMasEntity);

                tbComparentDetEntityList = new ArrayList<>();

                if (comparentMas.getComLevel().intValue() > 1) {
                    for (final TbComparentDet comparentDet : comparentMas.getComparentDetList()) {
                        tbComparentDetEntity = new TbComparentDetEntity();

                        comparentDet.setOrgid(new Long(UserSession.getCurrent().getOrganisation().getOrgid()));
                        comparentDet.setUserId(new Long(UserSession.getCurrent().getEmployee().getEmpId()));
                        comparentDet.setLangId(new Long(UserSession.getCurrent().getLanguageId()));
                        comparentDet.setLmoddate(date);

                        prefixName = comparentDet.getCodValue().toUpperCase();
                        comparentDet.setCodValue(prefixName);

                        for (int iCounter = 0; iCounter < tbComparentParentDetTempList.size(); iCounter++) {
                            if (comparentDet.getTempParentId() == tbComparentParentDetTempList.get(iCounter).getTempId()) {
                                comparentDet.setTbComparentDet(tbComparentParentDetTempList.get(iCounter));
                            }
                        }
                        comparentDet.setTbComparentMas(comparentMas);

                        tbComparentDetServiceMapper.mapTbComparentDetToTbComparentDetEntity(comparentDet, tbComparentDetEntity);

                        tbComparentDetEntity.setTbComparentMas(tbComparentMasEntity);

                        for (int iCounter = 0; iCounter < tbComparentDetParentEntityTempList.size(); iCounter++) {
                            if (comparentDet.getTempParentId() == tbComparentDetParentEntityTempList.get(iCounter).getTempId()) {
                                tbComparentDetEntity.setTbComparentDet(tbComparentDetParentEntityTempList.get(iCounter));
                            }
                        }
                        tbComparentParentDetList.add(comparentDet);
                        tbComparentDetParentEntityList.add(tbComparentDetEntity);

                        tbComparentDetEntityList.add(tbComparentDetEntity);
                    }
                    tbComparentDetParentEntityTempList = tbComparentDetParentEntityList;
                    tbComparentParentDetTempList = tbComparentParentDetList;

                    tbComparentDetParentEntityList = new ArrayList<>();
                    tbComparentParentDetList = new ArrayList<>();

                } else {
                    for (final TbComparentDet comparentDet : comparentMas.getComparentDetList()) {
                        tbComparentDetEntity = new TbComparentDetEntity();

                        comparentDet.setOrgid(new Long(UserSession.getCurrent().getOrganisation().getOrgid()));
                        comparentDet.setUserId(new Long(UserSession.getCurrent().getEmployee().getEmpId()));
                        comparentDet.setLangId(new Long(UserSession.getCurrent().getLanguageId()));
                        comparentDet.setLmoddate(date);
                        comparentDet.setTbComparentMas(comparentMas);

                        prefixName = comparentDet.getCodValue().toUpperCase();
                        comparentDet.setCodValue(prefixName);

                        tbComparentDetServiceMapper.mapTbComparentDetToTbComparentDetEntity(comparentDet, tbComparentDetEntity);

                        tbComparentDetEntity.setTbComparentMas(tbComparentMasEntity);

                        tbComparentParentDetList.add(comparentDet);
                        tbComparentDetParentEntityList.add(tbComparentDetEntity);

                        tbComparentDetEntityList.add(tbComparentDetEntity);
                    }
                    tbComparentDetParentEntityTempList = tbComparentDetParentEntityList;
                    tbComparentParentDetTempList = tbComparentParentDetList;

                    tbComparentDetParentEntityList = new ArrayList<>();
                    tbComparentParentDetList = new ArrayList<>();
                }
                tbComparentMasEntity.setListOfTbComparentDet(tbComparentDetEntityList);
            }
            tbComparamMasEntity.setListOfTbComparentMas(tbComparentMasEntityList);
        }

        final TbComparamMasEntity tbComparamMasEntitySaved = tbComparamMasJpaRepository.save(tbComparamMasEntity);
        tbComparamMas = tbComparamMasServiceMapper.mapTbComparamMasEntityToTbComparamMas(tbComparamMasEntitySaved);
        return tbComparamMas;
    }

    @Override
    @Transactional
    public TbComparamMas update(final TbComparamMas tbComparamMas) {
        TbComparamMasEntity tbComparamMasEntity = new TbComparamMasEntity();
        tbComparamMasEntity = tbComparamMasJpaRepository.findOne(tbComparamMas.getCpmId());
        Date lmodDate = tbComparamMasEntity.getLmoddate();
        tbComparamMasServiceMapper.mapTbComparamMasToTbComparamMasEntity(tbComparamMas, tbComparamMasEntity);

        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        final Long empId = UserSession.getCurrent().getEmployee().getEmpId();
        final int langId = UserSession.getCurrent().getLanguageId();

        tbComparamMasEntity.setLmoddate(lmodDate);
        tbComparamMasEntity.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
        tbComparamMasEntity.setUserId(tbComparamMasEntity.getUserId());

        final Date updatedDate = new Date();
        if ((tbComparamMas.getComparamDetList() != null) && !tbComparamMas.getComparamDetList().isEmpty()) {
            TbComparamDetEntity tbComparamDetEntity = null;
            final List<TbComparamDetEntity> tbComparamDetEntityList = new ArrayList<>();
            for (final TbComparamDet tbComparamDetData : tbComparamMas.getComparamDetList()) {
                tbComparamDetEntity = new TbComparamDetEntity();

                if (tbComparamDetData.getCpdId() != null) {
                    tbComparamDetData.setOrgid(orgId);
                    
                    //Defect #28813
					
					  if(tbComparamMas.getCpmStatus().contentEquals("N")) {
					  tbComparamDetData.setCpdStatus(tbComparamMas.getCpmStatus()); }
					 
               
                    tbComparamDetData.setComparamMas(tbComparamMas);
                } else {
                    tbComparamDetData.setOrgid(orgId);
                    tbComparamDetData.setUserId(empId);
                    tbComparamDetData.setLangId(Long.valueOf(langId));
                    tbComparamDetData.setLmoddate(updatedDate);
                }

                tbComparamDetServiceMapper.mapTbComparamDetToTbComparamDetEntity(tbComparamDetData, tbComparamDetEntity);

                tbComparamDetEntity.setTbComparamMas(tbComparamMasEntity);
                tbComparamDetEntityList.add(tbComparamDetEntity);
            }

            tbComparamMasEntity.setListOfTbComparamDet(tbComparamDetEntityList);
        } else {
            TbComparentMasEntity tbComparentMasEntity = null;
            TbComparentDetEntity tbComparentDetEntity = null;

            List<TbComparentDetEntity> tbComparentDetParentEntityList = new ArrayList<>();
            List<TbComparentDet> tbComparentParentDetList = new ArrayList<>();
            List<TbComparentDetEntity> tbComparentDetParentEntityTempList = new ArrayList<>();
            List<TbComparentDet> tbComparentParentDetTempList = new ArrayList<>();
            final List<TbComparentMasEntity> tbComparentMasEntityList = new ArrayList<>();
            List<TbComparentDetEntity> tbComparentDetEntityList = null;

            if (tbComparamMas.getComparentMas() != null) {
                for (final TbComparentMas comparentMas : tbComparamMas.getComparentMas()) {
                    tbComparentMasEntity = new TbComparentMasEntity();
                    if (comparentMas.getComId() != null) {
                        comparentMas.setUpdatedDate(updatedDate);
                    } else {
                        comparentMas.setOrgid(orgId);
                        comparentMas.setUserId(empId);
                        comparentMas.setLangId(Long.valueOf(langId));
                        comparentMas.setLmoddate(updatedDate);
                        comparentMas.setComStatus(MainetConstants.Common_Constant.YES);
                    }
                    comparentMas.setComparamMas(tbComparamMas);
                    tbComparentMasServiceMapper.mapTbComparentMasToTbComparentMasEntity(comparentMas, tbComparentMasEntity);

                    tbComparentMasEntity.setTbComparamMas(tbComparamMasEntity);
                    tbComparentMasEntityList.add(tbComparentMasEntity);
                    tbComparentDetEntityList = new ArrayList<>();

                    if (comparentMas.getComLevel().intValue() > 1) {
                        for (final TbComparentDet comparentDet : comparentMas.getComparentDetList()) {
                            tbComparentDetEntity = new TbComparentDetEntity();

                            comparentDet.setUpdatedDate(updatedDate);
                            comparentDet.setTbComparentMas(comparentMas);

                            if (comparentDet.getCodId() == null) {

                                comparentDet.setOrgid(orgId);
                                comparentDet.setUserId(empId);
                                comparentDet.setLangId(Long.valueOf(langId));
                                comparentDet.setLmoddate(updatedDate);

                                for (int iCounter = 0; iCounter < tbComparentParentDetTempList.size(); iCounter++) {
                                    if (comparentDet.getTempParentId() == tbComparentParentDetTempList.get(iCounter)
                                            .getTempId()) {
                                        comparentDet.setTbComparentDet(tbComparentParentDetTempList.get(iCounter));
                                    }
                                }

                            } else {

                                for (int iCounter = 0; iCounter < tbComparentParentDetTempList.size(); iCounter++) {
                                    if (comparentDet.getParentId().longValue() == tbComparentParentDetTempList.get(iCounter)
                                            .getCodId().longValue()) {
                                        comparentDet.setTbComparentDet(tbComparentParentDetTempList.get(iCounter));
                                    }
                                }
                            }

                            comparentDet.setTbComparentMas(comparentMas);

                            tbComparentDetServiceMapper.mapTbComparentDetToTbComparentDetEntity(comparentDet,
                                    tbComparentDetEntity);

                            tbComparentDetEntity.setTbComparentMas(tbComparentMasEntity);

                            if (comparentDet.getCodId() == null) {
                                for (int iCounter = 0; iCounter < tbComparentDetParentEntityTempList.size(); iCounter++) {
                                    if (comparentDet.getTempParentId() == tbComparentDetParentEntityTempList.get(iCounter)
                                            .getTempId()) {
                                        tbComparentDetEntity.setTbComparentDet(tbComparentDetParentEntityTempList.get(iCounter));
                                    }
                                }

                            } else {
                                for (int iCounter = 0; iCounter < tbComparentDetParentEntityTempList.size(); iCounter++) {
                                    if (comparentDet.getParentId().longValue() == tbComparentDetParentEntityTempList.get(iCounter)
                                            .getCodId().longValue()) {
                                        tbComparentDetEntity.setTbComparentDet(tbComparentDetParentEntityTempList.get(iCounter));
                                    }
                                }
                            }

                            tbComparentParentDetList.add(comparentDet);
                            tbComparentDetParentEntityList.add(tbComparentDetEntity);

                            tbComparentDetEntityList.add(tbComparentDetEntity);
                        }

                        tbComparentDetParentEntityTempList = tbComparentDetParentEntityList;
                        tbComparentParentDetTempList = tbComparentParentDetList;

                        tbComparentDetParentEntityList = new ArrayList<>();
                        tbComparentParentDetList = new ArrayList<>();

                    } else {
                        for (final TbComparentDet comparentDet : comparentMas.getComparentDetList()) {
                            tbComparentDetEntity = new TbComparentDetEntity();
                            if (comparentDet.getCodId() != null) {
                                comparentDet.setUpdatedDate(updatedDate);
                            } else {
                                comparentDet.setOrgid(orgId);
                                comparentDet.setUserId(empId);
                                comparentDet.setLangId(Long.valueOf(langId));
                                comparentDet.setLmoddate(updatedDate);
                            }
                            comparentDet.setTbComparentMas(comparentMas);
                            tbComparentDetServiceMapper.mapTbComparentDetToTbComparentDetEntity(comparentDet,
                                    tbComparentDetEntity);
                            tbComparentDetEntity.setTbComparentMas(tbComparentMasEntity);

                            tbComparentParentDetList.add(comparentDet);
                            tbComparentDetParentEntityList.add(tbComparentDetEntity);

                            tbComparentDetEntityList.add(tbComparentDetEntity);
                        }

                        tbComparentDetParentEntityTempList = tbComparentDetParentEntityList;
                        tbComparentParentDetTempList = tbComparentParentDetList;

                        tbComparentDetParentEntityList = new ArrayList<>();
                        tbComparentParentDetList = new ArrayList<>();
                    }
                    tbComparentMasEntity.setListOfTbComparentDet(tbComparentDetEntityList);
                }
            }

            tbComparamMasEntity.setListOfTbComparentMas(tbComparentMasEntityList);
        }
        final TbComparamMasEntity tbComparamMasEntitySaved = tbComparamMasJpaRepository.save(tbComparamMasEntity);
        return tbComparamMasServiceMapper.mapTbComparamMasEntityToTbComparamMas(tbComparamMasEntitySaved);
    }

    @Override
    @Transactional
    public void delete(final Long cpmId) {
        tbComparamMasJpaRepository.delete(cpmId);

    }

    public TbComparamMasJpaRepository getTbComparamMasJpaRepository() {
        return tbComparamMasJpaRepository;
    }

    public void setTbComparamMasJpaRepository(final TbComparamMasJpaRepository tbComparamMasJpaRepository) {
        this.tbComparamMasJpaRepository = tbComparamMasJpaRepository;
    }

    public TbComparamMasServiceMapper getTbComparamMasServiceMapper() {
        return tbComparamMasServiceMapper;
    }

    public void setTbComparamMasServiceMapper(final TbComparamMasServiceMapper tbComparamMasServiceMapper) {
        this.tbComparamMasServiceMapper = tbComparamMasServiceMapper;
    }

    @Override
    @Transactional
    public TbComparamMas findComparamDetDataByCpmId(final String cpmPrefix) {
        final TbComparamMasEntity tbComparamMasEntity = tbComparamMasJpaRepository.findComparamDetDataByCpmId(cpmPrefix);
        return tbComparamMasServiceMapper.mapTbComparamMasEntityToTbComparamMas(tbComparamMasEntity);
    }

    @Override
    @Transactional
    public List<ViewPrefixDetails> findPrefixData(final String cpmPrefix, final Long orgId) {
        final List<ViewPrefixDetails> prefixList = tbComparamMasJpaRepository.findPrefixData(cpmPrefix, orgId);
        return prefixList;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.prefix.business.service.TbComparamMasService#validatePrefix(java.lang.String)
     */
    @Override
    @Transactional
    public int validatePrefix(final String prefixData) {
        final Long comparamMasEntity = tbComparamMasJpaRepository.validatePrefix(prefixData);
        return comparamMasEntity.intValue();
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.prefix.business.service.TbComparamMasService#findAllByDepartment(java.lang.String)
     */
	@Override
	@Transactional
	public List<TbComparamMas> findAllByDepartment(final String department, final String cpmPrefix) {
		List<TbComparamMasEntity> entities = new ArrayList<>();

		if (!StringUtils.isEmpty(department) && StringUtils.isEmpty(cpmPrefix)) {
			entities = tbComparamMasJpaRepository.findAllByDepartment(department);
		} else if (!StringUtils.isEmpty(department) && !StringUtils.isEmpty(cpmPrefix)) {
			entities = tbComparamMasJpaRepository.findAllByDepartmentPrefix(department, cpmPrefix);
		} else if (StringUtils.isEmpty(department) && !StringUtils.isEmpty(cpmPrefix)) {
			final TbComparamMasEntity entity = tbComparamMasJpaRepository.findComparamDetDataByReplicateFlag(cpmPrefix);
			if (entity != null) {
				entities.add(entity);
			}
		}
		final List<TbComparamMas> beans = new ArrayList<>();

		for (final TbComparamMasEntity tbComparamMasEntity : entities) {
			TbComparamMas mapTbComparamMasEntityToTbComparamMas = tbComparamMasServiceMapper
					.mapTbComparamMasEntityToTbComparamMas(tbComparamMasEntity);
			List<TbComparamDetEntity> listOfTbComparamDet = tbComparamMasEntity.getListOfTbComparamDet();
			final List<TbComparamDet> tbComparamDetList = new ArrayList<>();
			for (TbComparamDetEntity tbComparamDetEntity : listOfTbComparamDet) {
				TbComparamDet tbComparamDet = new TbComparamDet();

				BeanUtils.copyProperties(tbComparamDetEntity, tbComparamDet);
				tbComparamDetList.add(tbComparamDet);

			}
			mapTbComparamMasEntityToTbComparamMas.setComparamDetList(tbComparamDetList);
			beans.add(mapTbComparamMasEntityToTbComparamMas);
		}
		return beans;
	}

    /*
     * (non-Javadoc)
     * @see
     * com.abm.mainetservice.web.masters.prefix.business.service.TbComparamMasService#findComparamDataByModule(java.lang.String,
     * java.lang.String)
     */
    @Override
    @Transactional
    public TbComparamMas findComparamDataByModule(final String prefixVal, final String deptCode) {
        final TbComparamMasEntity tbComparamMasEntity = tbComparamMasJpaRepository.findComparamDataByModule(prefixVal, deptCode);
        return tbComparamMasServiceMapper.mapTbComparamMasEntityToTbComparamMas(tbComparamMasEntity);
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.prefix.business.service.TbComparamMasService#findMonPrefixData(java.lang.String,
     * long)
     */
    @Override
    @Transactional
    public List<ViewPrefixDetails> findMonPrefixData(final String cpmPrefix, final Long orgId) {
        final List<ViewPrefixDetails> prefixList = tbComparamMasJpaRepository.findMonPrefixData(cpmPrefix, orgId);
        return prefixList;
    }

    @Override
    @Transactional
    public List<TbComparamMasEntity> findAllByCpmReplicateFlag(
            final String cpmReplicateFlag, final String cpmType) {

        return tbComparamMasJpaRepository.findAllByCpmReplicateFlag(cpmReplicateFlag, cpmType);
    }

    @Override
    @Transactional
    public List<TbComparamMasEntity> findHierarchicalPrefixes(
            final String cpmReplicateFlag, final String cpmType) {
        return tbComparamMasJpaRepository.findHierarchicalPrefixes(cpmReplicateFlag, cpmType);
    }

    @Override
    public void updateStatus(TbComparamMasEntity tbComparamMasEntity, String isChecked, int selectedLevel) {
        int parentDetLstLen = tbComparamMasEntity.getListOfTbComparentMas().size();
        List<TbComparentDet> tbComparentDetList = null;
        TbComparentDetEntity tbComparentDetEntity = null;
        List<TbComparentDetEntity> tbComparentDetEntityLstToSave = null;
        List<TbComparentMasEntity> tbComparamMasEntityLstToSave = new ArrayList<TbComparentMasEntity>();

        if (!tbComparamMasEntity.getListOfTbComparentMas().isEmpty() && tbComparamMasEntity.getListOfTbComparentMas() != null) {
            for (TbComparentMasEntity tbComprntMas : tbComparamMasEntity.getListOfTbComparentMas()) {
                tbComparentDetList = tbComparentDetService.findComparentDetDataById(tbComprntMas.getComId(),
                        UserSession.getCurrent().getOrganisation().getOrgid());
                for (int i = selectedLevel; i <= parentDetLstLen; i++) {
                    if (i == tbComprntMas.getComLevel()) {
                        if (isChecked != null) {
                            if (ISCHECKEDNO.equals(isChecked)) {
                                tbComprntMas.setComStatus(ISCHECKEDNO);
                                if (tbComparentDetList != null) {
                                    tbComparentDetEntityLstToSave = new ArrayList<>();
                                    for (TbComparentDet tbComprntDet : tbComparentDetList) {
                                        tbComprntDet.setCodStatus(ISCHECKEDNO);
                                        tbComparentDetEntity = new TbComparentDetEntity();
                                        BeanUtils.copyProperties(tbComprntDet, tbComparentDetEntity);
                                        tbComparentDetEntityLstToSave.add(tbComparentDetEntity);
                                    }

                                }
                            } else {
                                if (selectedLevel == tbComprntMas.getComLevel())
                                    tbComprntMas.setComStatus(ISCHECKEDYES);
                            }
                        }

                    }
                }
                tbComprntMas.setListOfTbComparentDet(tbComparentDetEntityLstToSave);
                tbComparamMasEntityLstToSave.add(tbComprntMas);
            }

            tbComparamMasEntity.setListOfTbComparentMas(tbComparamMasEntityLstToSave);
        }
        tbComparamMasJpaRepository.save(tbComparamMasEntity);
    }

    @Override
    public List<String> getAllStartupPrefix() {
        return comParamMasterDAO.getAllStartupPrefix();
    }

    @Override
    public List<String> getNonReplicatePrefix() {
        return comParamMasterDAO.getNonReplicatePrefix();

    }

    @Override
    public List<ViewPrefixDetails> getViewPrefixDetailsByType(final String type) {
        return comParamMasterDAO.getViewPrefixDetailsByType(type);

    }

   
    
}
