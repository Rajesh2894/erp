/*
 * Created on 27 Jul 2015 ( Time 15:57:44 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.dto.JsonViewObject;
import com.abm.mainet.common.integration.dms.client.FileNetApplicationClient;
import com.abm.mainet.common.integration.dms.fileUpload.FileUploadUtility;
import com.abm.mainet.common.integration.dms.service.IFileUploadService;
import com.abm.mainet.common.master.dto.EmployeeBean;
import com.abm.mainet.common.master.dto.TbComparentDet;
import com.abm.mainet.common.master.dto.TbOrganisation;
import com.abm.mainet.common.master.dto.TbOrganisationAddDet;
import com.abm.mainet.common.master.service.TbOrganisationAddDetService;
import com.abm.mainet.common.master.service.TbOrganisationService;
import com.abm.mainet.common.master.ui.model.TbOrganisationDetResponse;
import com.abm.mainet.common.master.ui.model.TbOrganisationResponse;
import com.abm.mainet.common.master.ui.validator.TbOrganisationValidator;
import com.abm.mainet.common.service.IEmployeeService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.Filepaths;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;
import com.abm.mainet.common.utility.UtilityService;

/**
 * Spring MVC controller for 'TbOrganisation' management.
 */
@Controller
@RequestMapping("/Organisation.html")
public class TbOrganisationController extends AbstractController {

    // --- Variables names ( to be used in JSP with Expression Language )
    private static final String MAIN_ENTITY_NAME = "tbOrganisation";
    private static final String MAIN_LIST_NAME = "list";
    private static final String CHILD_ENTITY_NAME = "tbOrganisationAddDet";
    // --- JSP pages names ( View name in the MVC model )
    private static final String JSP_FORM = "tbOrganisation/form";
    private static final String JSP_LIST = "tbOrganisation/list";

    private static final String JSP_CHILD_FORM = "tbOrganisationAddDet/form";

    // --- SAVE ACTION ( in the HTML form )
    private static final String SAVE_ACTION_CREATE = "Organisation.html?create";
    private static final String SAVE_ACTION_UPDATE = "Organisation.html?update";

    private static final String SUCCESS_MSG = "success";
    private static final String FAILURE_MSG = "failure";
    private static final String PATH = "filePath";
    
    private static final String ENV_FLAG = "envFlag";

    private static final Logger LOG = LoggerFactory.getLogger(TbOrganisationController.class);

    List<TbOrganisationAddDet> orglist = new ArrayList<>();
    List<TbOrganisation> list = new ArrayList<>();
    TbOrganisation tbOrgBean = null;
    // --- Main entity service
    @Resource
    private TbOrganisationService tbOrganisationService; // Injected by Spring

    @Resource
    private TbOrganisationAddDetService tbOrganisationAddDetService;

    @Autowired
    private IEmployeeService iEmployeeService;

    @Resource
    private IFileUploadService fileUpload;

    // --------------------------------------------------------------------------------------
    /**
     * Default constructor
     */
    public TbOrganisationController() {
        super(TbOrganisationController.class, MAIN_ENTITY_NAME);
    }

    // --------------------------------------------------------------------------------------
    // Spring MVC model management
    // --------------------------------------------------------------------------------------

    /**
     * Populates the Spring MVC model with the given entity and eventually other useful data
     *
     * @param model
     * @param tbOrganisation
     */
    private void populateModel(final Model model, final TbOrganisation tbOrganisation,
            final FormMode formMode) {
        // --- Main entity
        model.addAttribute(MAIN_ENTITY_NAME, tbOrganisation);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbOrganisation);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create"
                                                   // mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            // --- Other data useful in this screen in "create" mode (all
            // fields)
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update"
                                                   // mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
            // --- Other data useful in this screen in "update" mode (only
            // non-pk fields)
        }
    }

    // --------------------------------------------------------------------------------------
    // Request mapping
    // --------------------------------------------------------------------------------------
    /**
     * Shows a list with all the occurrences of TbOrganisation found in the database
     *
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping()
    public String list(final Model model) {
        list.clear();
        helpDoc("Organisation.html", model);
        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        tbOrgBean = tbOrganisationService.findById(orgId);
        fileUpload.sessionCleanUpForFileUpload();

        final String status = tbOrgBean.getDefaultStatus();
        if ((status != null) && status.equals(MainetConstants.Common_Constant.YES)) {
            list = tbOrganisationService.findAll();
        } else {
            list.add(tbOrgBean);
        }
        model.addAttribute(MAIN_LIST_NAME, list);
        return JSP_LIST;
    }

    /**
     * Shows a form page in order to create a new TbOrganisation
     *
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping(params = "form")
    public String formForCreate(final Model model) {
        // --- Populates the model with a new instance
        final TbOrganisation tbOrganisation = new TbOrganisation();
        final boolean existstatus = tbOrganisationService.defaultexist(MainetConstants.Common_Constant.YES);
        fileUpload.sessionCleanUpForFileUpload();

        final String exist = MainetConstants.TbDeporgMap.EXIST;
        if (existstatus) {
            model.addAttribute(exist, MainetConstants.Common_Constant.YES);
        } else {
            model.addAttribute(exist, MainetConstants.Common_Constant.NO);
        }

        final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.OTY,
                UserSession.getCurrent().getOrganisation());
        final List<LookUp> divisionList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.DVN,
                UserSession.getCurrent().getOrganisation());
        final List<LookUp> ostList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.OST,
                UserSession.getCurrent().getOrganisation());
        final List<LookUp> disList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.DIS,
                UserSession.getCurrent().getOrganisation());
        final List<LookUp> sttList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.SIT,
                UserSession.getCurrent().getOrganisation());
    	//D#162349-added for sfac specific changes
       if (Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(), MainetConstants.ENV_SFAC)) {
    		model.addAttribute("envFlag", MainetConstants.FlagY);
    		 final List<LookUp> stateList = CommonMasterUtility.getLevelData("SDB", 1, UserSession.getCurrent().getOrganisation());
    		 model.addAttribute(MainetConstants.CommonMasterUi.STATE_LIST, stateList);
    	}else {
    	    model.addAttribute("envFlag", MainetConstants.FlagN);
    	}
        populateModel(model, tbOrganisation, FormMode.CREATE);
        /*
         * List<EmployeeBean> employeeList = iEmployeeService.getAllActiveEmployee();
         * Set<String> mobileNoList =
         * employeeList.stream().map(EmployeeBean::getEmpmobno).filter(Objects::nonNull).map(String::trim)
         * .collect(Collectors.toSet());
         * model.addAttribute("mobileNoList", mobileNoList);
         */
        model.addAttribute(MainetConstants.CommonMasterUi.LOOK_UP_LIST, lookUpList);
        model.addAttribute(MainetConstants.CommonMasterUi.DIVISION_LIST, divisionList);
        model.addAttribute(MainetConstants.CommonMasterUi.OST_LIST, ostList);
        model.addAttribute(MainetConstants.CommonMasterUi.DIS_LIST, disList);
        model.addAttribute(MainetConstants.CommonMasterUi.STT_LIST, sttList);
        model.addAttribute("isDefault", tbOrganisation.getDefaultStatus());
        return JSP_FORM;
    }

    /**
     * Shows a form page in order to update an existing TbOrganisation
     *
     * @param model Spring MVC model
     * @param orgid primary key element
     * @return
     */
    @RequestMapping(params = "formForUpdate")
    public String formForUpdate(final Model model,
            @RequestParam("orgid") final Long orgid) {
        // --- Search the entity by its primary key and stores it in the model
        final TbOrganisation tbOrganisation = tbOrganisationService.findById(orgid);
        orglist = tbOrganisationAddDetService.findAllById(orgid);

        final String outputPath = MainetConstants.DirectoryTree.DEFAULT_CACHE_FOLDER + MainetConstants.FILE_PATH_SEPARATOR
                + MainetConstants.CommonMasterUi.SHOW_DOCS;
        tbOrganisation.setFilePath(
                Utility.downloadedFileUrl(tbOrganisation.getoLogo(), outputPath, FileNetApplicationClient.getInstance()));

        tbOrganisation.setOrgList(orglist);

        final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.OTY,
                UserSession.getCurrent().getOrganisation());
        final List<LookUp> divisionList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.DVN,
                UserSession.getCurrent().getOrganisation());
        final List<LookUp> ostList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.OST,
                UserSession.getCurrent().getOrganisation());
        final List<LookUp> disList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.DIS,
                UserSession.getCurrent().getOrganisation());
        final List<LookUp> sttList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.SIT,
                UserSession.getCurrent().getOrganisation());

        if (tbOrganisation.getEsdtDate() != null) {
            tbOrganisation.setEstDtStr(UtilityService.convertDateToDDMMYYYY(tbOrganisation.getEsdtDate()));
        }
        if (tbOrganisation.getTranStartDate() != null) {
            tbOrganisation.setTrnsDtStr(UtilityService.convertDateToDDMMYYYY(tbOrganisation.getTranStartDate()));
        }
        if (tbOrganisation.getLmoddate() != null) {
            tbOrganisation.setLmoddateDesc(UtilityService.convertDateToDDMMYYYY(tbOrganisation.getLmoddate()));
        }
        //D#162349-added for sfac specific changes
    	if (Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(), MainetConstants.ENV_SFAC)) {
    		model.addAttribute("envFlag", MainetConstants.FlagY);
   		    final List<LookUp> stateList = CommonMasterUtility.getLevelData("SDB", 1, UserSession.getCurrent().getOrganisation());
   	        model.addAttribute(MainetConstants.CommonMasterUi.STATE_LIST, stateList);
   	        
	    	List<LookUp> districtList = CommonMasterUtility.getLevelData("SDB", 2,	UserSession.getCurrent().getOrganisation());
	    	if (tbOrganisation.getSdbId1() != null)
	    	districtList = districtList.stream().filter(lookUp -> lookUp.getLookUpParentId() == tbOrganisation.getSdbId1())
					.collect(Collectors.toList());
	        model.addAttribute(MainetConstants.CommonMasterUi.DISTRICT_LIST, districtList);
			
	    	List<LookUp> blockList = CommonMasterUtility.getLevelData("SDB", 3,UserSession.getCurrent().getOrganisation());
	    	if (tbOrganisation.getSdbId2() != null)
	    	blockList = blockList.stream().filter(lookUp -> lookUp.getLookUpParentId() == tbOrganisation.getSdbId2())
					.collect(Collectors.toList());
	        model.addAttribute(MainetConstants.CommonMasterUi.BLOCK_LIST, blockList);
   	     
    	}else {
    	    model.addAttribute("envFlag", MainetConstants.FlagN);
    	}

        model.addAttribute("isDefault", tbOrganisation.getDefaultStatus());
        populateModel(model, tbOrganisation, FormMode.UPDATE);
        model.addAttribute(MainetConstants.CommonMasterUi.ORG_DEFAULT_STATUS, tbOrganisation.getDefaultStatus());
        model.addAttribute(MainetConstants.CommonMasterUi.LOOK_UP_LIST, lookUpList);
        model.addAttribute(MainetConstants.CommonMasterUi.DIVISION_LIST, divisionList);
        model.addAttribute(MainetConstants.CommonMasterUi.OST_LIST, ostList);
        model.addAttribute(MainetConstants.CommonMasterUi.DIS_LIST, disList);
        model.addAttribute(MainetConstants.CommonMasterUi.STT_LIST, sttList);
        return JSP_FORM;
    }

    /**
     * 'CREATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     *
     * @param tbOrganisation entity to be created
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "create")
    // GET or POST
    public @ResponseBody String create(@Valid final TbOrganisation tbOrganisation,
            final BindingResult bindingResult, final Model model,
            final HttpServletRequest httpServletRequest) {
        String result = FAILURE_MSG;
        final ApplicationSession appSession = ApplicationSession.getInstance();
        final UserSession userSession = UserSession.getCurrent();
        tbOrganisation.setUserId(UserSession.getCurrent().getEmployee().getEmpId());
        tbOrganisation.setLangId(new Long(UserSession.getCurrent().getLanguageId()));
        tbOrganisation.setLgIpMac(UserSession.getCurrent().getEmployee().getEmppiservername());
        tbOrganisation.setLmoddate(new Date());
        if (tbOrganisation.getEstDtStr() != null) {
            tbOrganisation.setEsdtDate(UtilityService.convertStringDateToDateFormat(tbOrganisation.getEstDtStr()));
        }
        tbOrganisation.setTranStartDate(UtilityService.convertStringDateToDateFormat(tbOrganisation.getTrnsDtStr()));
        tbOrganisation.setOrgShortNm(tbOrganisation.getOrgShortNm().toUpperCase());

        final TbOrganisationValidator validator = new TbOrganisationValidator();
        validator.validate(tbOrganisation, bindingResult);

        if (!bindingResult.hasErrors()) {

            TbOrganisation tbOrganisationCreated = null;
            try {
                tbOrganisationCreated = tbOrganisationService
                        .create(tbOrganisation, appSession, userSession, getDirectry(), FileNetApplicationClient.getInstance());
                model.addAttribute(MAIN_ENTITY_NAME, tbOrganisationCreated);
                result = SUCCESS_MSG;
                return result;
            } catch (final Exception ex) {
                LOG.error("Organisation Creation Failed :: ", ex);
                return result;
            }
        } else {
            populateModel(model, tbOrganisation, FormMode.CREATE);
            result = FAILURE_MSG;
            return result;
        }

    }

    /**
     * 'UPDATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     *
     * @param tbOrganisation entity to be updated
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "update")
    // GET or POST
    public @ResponseBody String update(@Valid final TbOrganisation tbOrganisation,
            final BindingResult bindingResult, final Model model,
            final HttpServletRequest httpServletRequest) {
        String result = FAILURE_MSG;
        final UserSession userSession = UserSession.getCurrent();
        try {
            if (!bindingResult.hasErrors()) {
                tbOrganisation.setEsdtDate(UtilityService.convertStringDateToDateFormat(tbOrganisation.getEstDtStr()));
                // tbOrganisation.setUserId(new Long(UserSession.getCurrent().getEmployee().getEmpId()));
                // tbOrganisation.setLangId(new Long(UserSession.getCurrent().getLanguageId()));
                tbOrganisation.setLmoddate(UtilityService.convertStringDateToDateFormat(tbOrganisation.getLmoddateDesc()));
                tbOrganisation.setEsdtDate(UtilityService.convertStringDateToDateFormat(tbOrganisation.getEstDtStr()));
                tbOrganisation.setTranStartDate(UtilityService.convertStringDateToDateFormat(tbOrganisation.getTrnsDtStr()));
                tbOrganisation.setUpdatedBy(new Long(UserSession.getCurrent().getEmployee().getEmpId()));
                tbOrganisation.setUpdatedDate(new Date());
                tbOrganisation.setLgIpMacUpd(UserSession.getCurrent().getEmployee().getEmppiservername());
                final TbOrganisation tbOrganisationSaved = tbOrganisationService
                        .update(tbOrganisation, getDirectry(), FileNetApplicationClient.getInstance());

                final String outputPath = MainetConstants.DirectoryTree.DEFAULT_CACHE_FOLDER + MainetConstants.FILE_PATH_SEPARATOR
                        + MainetConstants.CommonMasterUi.SHOW_DOCS;
                final String filePath = Utility.downloadedFileUrl(tbOrganisationSaved.getoLogo(), outputPath,
                        FileNetApplicationClient.getInstance());

                userSession.setOrgLogoPath(filePath);
                model.addAttribute(MAIN_ENTITY_NAME, tbOrganisationSaved);
                result = SUCCESS_MSG;
                return result;
            } else {
                populateModel(model, tbOrganisation, FormMode.UPDATE);
                result = FAILURE_MSG;
                return result;
            }
        } catch (final Exception e) {
            messageHelper.addException(model, "tbOrganisation.error.update", e);
            log("Action 'update' : Exception - " + e.getMessage());
            populateModel(model, tbOrganisation, FormMode.UPDATE);
            result = FAILURE_MSG;
            return result;
            // return JSP_FORM;
        }
    }

    /**
     * 'DELETE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     *
     * @param redirectAttributes
     * @param orgid primary key element
     * @return
     */
    @RequestMapping(params = "delete")
    // GET or POST
    public @ResponseBody String delete(@RequestParam("orgid") final Long orgid) {
        String message = MainetConstants.COMMON_STATUS.FAIL;
        try {
            tbOrganisationService.delete(orgid);
            message = SUCCESS_MSG;
        } catch (final Exception e) {
            log("Error : " + e.getMessage());
        }
        return message;
    }

    @RequestMapping(params = "getGridData")
    public @ResponseBody TbOrganisationResponse gridData(
            final HttpServletRequest request, final Model model) {
        final TbOrganisationResponse response = new TbOrganisationResponse();
        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));

        response.setRows(list);
        response.setTotal(list.size());
        response.setRecords(list.size());
        response.setPage(page);
        model.addAttribute(MAIN_LIST_NAME, list);
        return response;
    }

    @RequestMapping(params = "getChildGridData")
    public @ResponseBody TbOrganisationDetResponse getChildGridData(
            final HttpServletRequest request, final Model model) {
        final TbOrganisationDetResponse response = new TbOrganisationDetResponse();
        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
        response.setRows(orglist);
        response.setTotal(orglist.size());
        response.setRecords(orglist.size());
        response.setPage(page);
        model.addAttribute(MAIN_LIST_NAME, orglist);
        return response;
    }

    @RequestMapping(params = "addChildForm")
    public String addChildForm(final Model model,
            @RequestParam("orgid") final Long orgid) {
        // --- Populates the model with a new instance
        final TbOrganisationAddDet tbOrganisationAddDet = new TbOrganisationAddDet();
        tbOrganisationAddDet.setOrgId(orgid);
        populateChildModel(model, tbOrganisationAddDet, FormMode.CREATE);
        return JSP_CHILD_FORM;
    }

    private void populateChildModel(final Model model,
            final TbOrganisationAddDet tbOrganisationAddDet, final FormMode formMode) {
        // --- Main entity
        model.addAttribute(CHILD_ENTITY_NAME, tbOrganisationAddDet);
        model.addAttribute("command", tbOrganisationAddDet);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create"
                                                   // mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            // --- Other data useful in this screen in "create" mode (all
            // fields)
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update"
                                                   // mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
        }
    }

    @RequestMapping(params = "checkForExist", method = RequestMethod.POST)
    public @ResponseBody List<String> checkForExist(final Model model,
            final HttpServletRequest httpServletRequest,
            @RequestParam(value = "mode") final String mode,
            @RequestParam(value = "orgId") final Long orgId,
            @RequestParam(value = "ulbOrgId") final Long ulbOrgId,
            @RequestParam(value = "orgName") final String orgName,
            @RequestParam(value = "orgNameMar") final String orgNameMar) {
        List<String> errorList = null;
        final ApplicationSession appSession = ApplicationSession.getInstance();
        errorList = tbOrganisationService
                .exist(mode, orgId, ulbOrgId, orgName, orgNameMar, appSession);
        return errorList;
    }

    @RequestMapping(params = "searchOrganisation")
    public @ResponseBody void searchOrganisation(
            @RequestParam(value = "orgid") final Long orgid) {
        list.clear();
        if (orgid != null) {
            tbOrgBean = tbOrganisationService.findById(orgid);
            list.add(tbOrgBean);
        } else {
            list = tbOrganisationService.findAll();
        }

    }

    @RequestMapping(params = "checkDuplicateShortCode", method = RequestMethod.POST)
    public @ResponseBody String checkDuplicateShortCode(@RequestParam(value = "orgShortCode") final String orgShortCode) {
        String error = null;
        final Organisation organisation = tbOrganisationService.findByShortCode(orgShortCode);
        if (organisation != null) {
            error = ApplicationSession.getInstance().getMessage(MainetConstants.CommonMasterUi.TB_ORGANIZATION_ERROR_ORGSHRNAME);
        }
        return error;

    }

    @RequestMapping(params = "getUploadedImage", produces = "application/json", method = RequestMethod.POST)
    public @ResponseBody final String getdataOfUploadedImage(final HttpServletRequest httpServletRequest) {
        try {

            if ((FileUploadUtility.getCurrent().getFileMap() != null) && !FileUploadUtility.getCurrent().getFileMap().isEmpty()) {
                for (final Map.Entry<Long, Set<File>> entry : FileUploadUtility.getCurrent().getFileMap().entrySet()) {
                    if ((entry.getKey() != null) && (entry.getKey().longValue() == 0)) {
                        for (final File file : entry.getValue()) {
                            String fileName = null;
                            try {
                                final String path = file.getPath().replace(MainetConstants.DOUBLE_BACK_SLACE,
                                        MainetConstants.WINDOWS_SLASH);
                                fileName = path.replace(Filepaths.getfilepath(), StringUtils.EMPTY);
                            } catch (final Exception e) {
                                e.printStackTrace();
                            }

                            return fileName;
                        }
                    }

                }
            }
            return MainetConstants.BLANK;
        } catch (final Exception e) {

            e.printStackTrace();
        }
        return MainetConstants.BLANK;
    }

    @RequestMapping(method = RequestMethod.POST, params = "doFileUpload")
    public @ResponseBody JsonViewObject uploadDocument(final HttpServletRequest httpServletRequest,
            final HttpServletResponse response,
            final String fileCode, @RequestParam final String browserType) {
        UserSession.getCurrent().setBrowserType(browserType);
        final MultipartHttpServletRequest request = (MultipartHttpServletRequest) httpServletRequest;
        final JsonViewObject jsonViewObject = FileUploadUtility.getCurrent().doFileUpload(request, fileCode, browserType);
        return jsonViewObject;
    }

    @RequestMapping(method = RequestMethod.POST, params = "doFileUploadValidatn")
    public @ResponseBody List<JsonViewObject> doFileUploadValidatn(final HttpServletRequest httpServletRequest,
            @RequestParam final String browserType) {
        UserSession.getCurrent().setBrowserType(browserType);
        final List<JsonViewObject> result = FileUploadUtility.getCurrent().getFileUploadList();

        return result;
    }

    @RequestMapping(method = RequestMethod.POST, params = "doFileDeletion")
    public @ResponseBody JsonViewObject doFileDeletion(@RequestParam final String fileId,
            final HttpServletRequest httpServletRequest,
            @RequestParam final String browserType) {
        UserSession.getCurrent().setBrowserType(browserType);
        JsonViewObject jsonViewObject = JsonViewObject.successResult();
        jsonViewObject = FileUploadUtility.getCurrent().deleteFile(fileId);
        return jsonViewObject;
    }

    @RequestMapping(params = "Download", method = RequestMethod.POST)
    public ModelAndView download(@RequestParam("downloadLink") final String downloadLink,
            final HttpServletResponse httpServletResponse,
            final Model model) {
        final String outputPath = MainetConstants.DirectoryTree.DEFAULT_CACHE_FOLDER + MainetConstants.FILE_PATH_SEPARATOR
                + MainetConstants.CommonMasterUi.SHOW_DOCS;
        try {
            final String downloadPath = Utility.downloadedFileUrl(downloadLink, outputPath,
                    FileNetApplicationClient.getInstance());
            model.addAttribute(PATH, downloadPath);
        } catch (final Exception ex) {
            return new ModelAndView("redirect:/404error.jsp.html");
        }

        return new ModelAndView(MainetConstants.CommonMasterUi.VIEW_HELP, MainetConstants.CommonConstants.COMMAND, model);
    }

    public String getDirectry() {
        return UserSession.getCurrent().getOrganisation().getOrgid() + File.separator + "ORGANISATION_MASTER"
                + File.separator + Utility.getTimestamp();
    }

    @RequestMapping(params = "getRealImagePath", method = RequestMethod.POST)
    public @ResponseBody String getRealImagePath(@RequestParam final Long orgId) {
        String filePath = null;
        if (orgId != null) {
            final TbOrganisation tbOrganisation = tbOrganisationService.findById(orgId);
            final String outputPath = MainetConstants.DirectoryTree.DEFAULT_CACHE_FOLDER + MainetConstants.FILE_PATH_SEPARATOR
                    + MainetConstants.CommonMasterUi.SHOW_DOCS;
            filePath = Utility.downloadedFileUrl(tbOrganisation.getoLogo(), outputPath, FileNetApplicationClient.getInstance());
        }
        return filePath;
    }

    @RequestMapping(params = "validateDate", method = RequestMethod.POST)
    public @ResponseBody List<String> validateDate(@RequestParam(value = "estdDate") final String estdDate,
            @RequestParam(value = "trnsDate") final String trnsDate) {
        List<String> errors = new ArrayList<String>();
        ApplicationSession appSession = ApplicationSession.getInstance();
        Date establishementDate = new Date();
        Date transactionStrtDate = new Date();

        establishementDate = UtilityService.convertStringDateToDateFormat(estdDate);
        transactionStrtDate = UtilityService.convertStringDateToDateFormat(trnsDate);

        final Organisation organisation = tbOrganisationService.findDefaultOrganisation();

        if (organisation.getEsdtDate() != null) {
            if (establishementDate.before(organisation.getEsdtDate()) && !establishementDate.equals(organisation.getEsdtDate())) {
                SimpleDateFormat dateformat = new SimpleDateFormat("dd/MM/yyyy");
                errors.add(appSession.getMessage("tbOrganisation.error.estdDate.isBefore")
                        + dateformat.format(organisation.getEsdtDate()));
            }
        }

        if (establishementDate.after(transactionStrtDate) && !establishementDate.equals(transactionStrtDate)) {
            errors.add(appSession.getMessage("tbOrganisation.error.estdDate.isAfter"));
        }
        return errors;

    }

    // need to change return type as single bean after employee master changes.
    @RequestMapping(params = "getUserData", method = RequestMethod.POST)
    public @ResponseBody List<EmployeeBean> getEmployeeDetails(@RequestParam(value = "empMobNo") final String empMobNo) {
        final List<EmployeeBean> employeeList = iEmployeeService.getActiveEmployeeByEmpMobileNo(empMobNo);
        return employeeList;

    }
    
 
    
	@RequestMapping(params = "getDistrictList", method = { RequestMethod.POST })
	@ResponseBody
	public List<LookUp> getDistrictListByStateId(@RequestParam("sdbId1") Long sdbId1, HttpServletRequest request) {
		List<LookUp> lookUpList1 = new java.util.ArrayList<LookUp>();
		try {
			List<LookUp> lookUpList = CommonMasterUtility.getLevelData("SDB", 2,
					UserSession.getCurrent().getOrganisation());
			lookUpList1 = lookUpList.stream().filter(lookUp -> lookUp.getLookUpParentId() == sdbId1)
					.collect(Collectors.toList());
			return lookUpList1;
		} catch (Exception e) {
			LOG.error("SDB Prefix not found");
			return lookUpList1;

		}
	}

	@RequestMapping(params = "getBlockList", method = { RequestMethod.POST })
	@ResponseBody
	public List<LookUp> getBlockListByDistrictId(@RequestParam("sdbId2") Long sdbId2, HttpServletRequest request) {
		List<LookUp> lookUpList1 = new java.util.ArrayList<LookUp>();
		try {
			List<LookUp> lookUpList = CommonMasterUtility.getLevelData("SDB", 3,
					UserSession.getCurrent().getOrganisation());
			lookUpList1 = lookUpList.stream().filter(lookUp -> lookUp.getLookUpParentId() == sdbId2)
					.collect(Collectors.toList());
			return lookUpList1;
		} catch (Exception e) {
			LOG.error("SDB Prefix not found");
			return lookUpList1;

		}
	}
}
