/*
 * Created on 30 Apr 2016 ( Time 15:02:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.ui.controller;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.abm.mainet.cfc.scrutiny.ui.controller.ApplicationAuthorizationController;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.domain.CFCApplicationAddressEntity;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.TbCfcApplicationMstEntity;
import com.abm.mainet.common.dto.TbApprejMas;
import com.abm.mainet.common.dto.TbWorkOrder;
import com.abm.mainet.common.dto.TbWorkOrderDetail;
import com.abm.mainet.common.dto.WorkOrderGridEntityList;
import com.abm.mainet.common.dto.WorkOrderGridResponse;
import com.abm.mainet.common.exception.FrameworkException;
import com.abm.mainet.common.integration.dto.PlumberHoleManDTO;
import com.abm.mainet.common.integration.dto.PlumberMasterDTO;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbServicesMst;
import com.abm.mainet.common.master.service.DepartmentService;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.master.service.TbServicesMstService;
import com.abm.mainet.common.service.CommonService;
import com.abm.mainet.common.service.ICFCApplicationAddressService;
import com.abm.mainet.common.service.ICFCApplicationMasterService;
import com.abm.mainet.common.service.ServiceMasterService;
import com.abm.mainet.common.service.TbApprejMasService;
import com.abm.mainet.common.service.TbChargeMasterService;
import com.abm.mainet.common.service.TbWorkOrderService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;

/**
 * Spring MVC controller for 'TbWorkOrder' management.
 */
@Controller
/* @RequestMapping("/WorkOrder.html") */
@RequestMapping(value = { "/workordergeneration.html", "/WorkOrder.html" })
public class WorkOrderController extends AbstractController {

        // --- Variables names ( to be used in JSP with Expression Language )
        private static final String MAIN_ENTITY_NAME = "tbWorkOrder";
        private static final String MAIN_LIST_NAME = "list";
        private static final String MAIN_LIST_PRIFEX_WPC = "listpofPrifexWPC";
        private static final String MAIN_PRIFEX_WPC = "WOR";
        // --- JSP pages names ( View name in the MVC model )
        private static final String JSP_FORM = "tbWorkOrder/form";
        private static final String JSP_LIST = "tbWorkOrder/list";
        private static final String JSP_GRID = "tbWorkOrder/grid";
        // --- SAVE ACTION ( in the HTML form )
        private static final String SAVE_ACTION_CREATE = "/tbWorkOrder/create";
        private static final String SAVE_ACTION_UPDATE = "/tbWorkOrder/update";

        private static final String REDIRECT = "redirect:/";
        private static final String REQUEST_PARAM = "?generatWorkOrderAbstract";
        private static final String PRINT_WORKORDER = "?printWorkOrder";
        private static final String ERROR_MESSAGE = "Error Occurred while request processing for Application Authorization for Application No.=";
        private static final String SERVICE_URL_NOT_CONFIGURED = "Service action Url is not configured in Service Master against serviceId=";
        private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationAuthorizationController.class);
    
        @Resource
        private CommonService commonService;
    
        // --- Main entity service
        @Autowired
        private TbWorkOrderService tbWorkOrderService; // Injected by Spring
        // --- Other service(s)
    
        @Resource
        private TbServicesMstService tbServicesMstService;
        // --- Main entity service
        @Resource
        private TbApprejMasService tbApprejMasService; // Injected by Spring
    
        @Resource
        private TbDepartmentService tbDepartmentService;
    
        @Resource
        private ICFCApplicationMasterService icfcApplicationMasterService;
    
        @Autowired
    
        private ICFCApplicationAddressService iCFCApplicationAddressService;
    
        @Autowired
    
        private TbChargeMasterService tbChargeMasterService;
        @Autowired
        private TbApprejMasService tbApprejMasServiceImpl;
    
        @Autowired
        private DepartmentService departmentService;
        
    	@Autowired
    	private ServiceMasterService serviceMaster;
        
        private List<TbServicesMst> serviceMasList = Collections.emptyList();
        private List<TbServicesMst> serviceList = new ArrayList<>();
        private List<TbApprejMas> apprejMasList = new ArrayList<>();
        private List<WorkOrderGridEntityList> workodergenraitonList = new ArrayList<>();
        private String actionURL;
        // --------------------------------------------------------------------------------------
        /**
         * Default constructor
         */
        public WorkOrderController() {
            super(WorkOrderController.class, MAIN_ENTITY_NAME);
            log("TbWorkOrderController created.");
        }
    
        // --------------------------------------------------------------------------------------
        // Spring MVC model management
        // --------------------------------------------------------------------------------------
    
        /**
         * Populates the Spring MVC model with the given entity and eventually other useful data
         * 
         * @param model
         * @param tbWorkOrder
         */
        private void populateModel(final Model model, final TbWorkOrder tbWorkOrder, final FormMode formMode) {
            // --- Main entity
            model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrder);
            if (formMode == FormMode.CREATE) {
                model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
                model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
                // --- Other data useful in this screen in "create" mode (all fields)
            } else if (formMode == FormMode.UPDATE) {
                model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
                model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
                // --- Other data useful in this screen in "update" mode (only non-pk fields)
            }
        }
    
        // --------------------------------------------------------------------------------------
        // Request mapping
        // --------------------------------------------------------------------------------------
        /**
         * Shows a list with all the occurrences of TbWorkOrder found in the database
         * 
         * @param model Spring MVC model
         * @return
         */
        @RequestMapping(params = "showDetails", method = { RequestMethod.POST, RequestMethod.GET })
        public String workorder(@RequestParam("appNo") final long applicationId,
                @RequestParam("actualTaskId") final Long actualTaskId, final HttpServletRequest httpServletRequest,
                final Model model) {
            final TbWorkOrder tbWorkOrder = new TbWorkOrder();
            String actionURL = null;
            try {
                final List<String> paramList = commonService.findServiceActionUrl(applicationId,
                        UserSession.getCurrent().getOrganisation().getOrgid());
    
                UserSession.getCurrent().getScrutinyCommonParamMap().put(
                        MainetConstants.SCRUTINY_COMMON_PARAM.APM_APPLICATION_ID, applicationId + MainetConstants.BLANK);
                UserSession.getCurrent().getScrutinyCommonParamMap().put(MainetConstants.SCRUTINY_COMMON_PARAM.CFC_URL,
                        paramList.get(MainetConstants.INDEX.ZERO));
                UserSession.getCurrent().getScrutinyCommonParamMap()
                        .put(MainetConstants.SCRUTINY_COMMON_PARAM.SM_SERVICE_ID, paramList.get(MainetConstants.INDEX.ONE));
                UserSession.getCurrent().getScrutinyCommonParamMap().put(MainetConstants.SCRUTINY_COMMON_PARAM.TASK_ID,
                        actualTaskId.toString());
                if ((paramList.get(MainetConstants.INDEX.ZERO) == null)
                        || paramList.get(MainetConstants.INDEX.ZERO).toString().isEmpty()) {
                    throw new FrameworkException(SERVICE_URL_NOT_CONFIGURED + paramList.get(MainetConstants.INDEX.ONE));
                } else {
                    actionURL = REDIRECT + paramList.get(MainetConstants.INDEX.ZERO).toString() + REQUEST_PARAM;
                    return new String(actionURL);
                }
    
            } catch (final Exception ex) {
                LOGGER.error(ERROR_MESSAGE + applicationId, ex);
            }
            model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrder);
            return JSP_LIST;
    
        }
    
        @RequestMapping(params = "generatWorkOrder", method = { RequestMethod.POST, RequestMethod.GET })
        public String generatWorkOrder(final HttpServletRequest httpServletRequest, final Model model) throws ClassNotFoundException, LinkageError {
            Long taskId = null;
            final long applicationId = Long.parseLong(httpServletRequest.getSession()
                    .getAttribute(MainetConstants.REQUIRED_PG_PARAM.APPLICATION_NO).toString());
            final long serviceId = Long.parseLong(httpServletRequest.getSession().getAttribute("serviceId").toString());
    
            final String serviceName = tbServicesMstService.getServiceNameByServiceId(serviceId);
    
            if (!httpServletRequest.getSession().getAttribute("taskId").equals("null")) {
                taskId = Long.parseLong(httpServletRequest.getSession().getAttribute("taskId").toString());
            }
    
            final TbWorkOrder tbWorkOrder = new TbWorkOrder();
            long workorderid = 0;
            final long deparmentid = tbServicesMstService.findDepartmentIdByserviceid(serviceId,
                    UserSession.getCurrent().getOrganisation().getOrgid());
    
            TbDepartment department = tbDepartmentService.findById(deparmentid);
            String dept = MainetConstants.BLANK;
            if (UserSession.getCurrent().getLanguageId() == MainetConstants.ENGLISH) {
                dept = department.getDpDeptdesc();
            } else {
                dept = department.getDpNameMar();
            }
    
            final CFCApplicationAddressEntity address = iCFCApplicationAddressService.getApplicationAddressByAppId(
                    Long.valueOf(applicationId + MainetConstants.BLANK),
                    UserSession.getCurrent().getOrganisation().getOrgid());
            String mobileNo = address.getApaMobilno() != null ? address.getApaMobilno() : MainetConstants.BLANK;
            final TbCfcApplicationMstEntity tbCfcApplicationMstEntity = icfcApplicationMasterService
                    .getCFCApplicationByApplicationId(applicationId, UserSession.getCurrent().getOrganisation().getOrgid());
            
            final String ApplicantFullName = tbCfcApplicationMstEntity.getApmFname() + MainetConstants.WHITE_SPACE
                    + (tbCfcApplicationMstEntity.getApmMname() != null ? tbCfcApplicationMstEntity.getApmMname()
                            : MainetConstants.BLANK)
                    + MainetConstants.WHITE_SPACE
                    + (tbCfcApplicationMstEntity.getApmLname() != null ? tbCfcApplicationMstEntity.getApmLname()
                            : MainetConstants.BLANK);
            final Date ApplicarionDate = tbCfcApplicationMstEntity.getApmApplicationDate();
            final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(PrefixConstants.WATERMODULEPREFIX.REM,
                    UserSession.getCurrent().getOrganisation());
            for (final LookUp Lookup1 : lookUpList) {
    
                if (Lookup1.getLookUpCode().equalsIgnoreCase(MAIN_PRIFEX_WPC)) {
                    workorderid = Lookup1.getLookUpId();
                }
            }
            apprejMasList = tbApprejMasService.findByRemarkType(serviceId, workorderid);
            if(MainetConstants.WATER_DEPT.equals(tbCfcApplicationMstEntity.getTbServicesMst().getTbDepartment().getDpDeptcode())) {
               Long plumId = tbWorkOrderService.getModuleWisePlumberId(applicationId, serviceId, UserSession.getCurrent().getOrganisation().getOrgid());
               tbWorkOrder.setPlumId(plumId);
            }
           
            tbWorkOrder.setWoServiceId(serviceId);
            tbWorkOrder.setWoDeptId(deparmentid);
            tbWorkOrder.setWoApplicationDateS(ApplicarionDate + MainetConstants.BLANK);
            tbWorkOrder.setWoApplicationId(applicationId);
            tbWorkOrder.setTaskId(taskId);
            model.addAttribute("applicationId", applicationId);
            model.addAttribute("ApplicantFullName", ApplicantFullName);
            model.addAttribute("ApplicarionDate", ApplicarionDate);
            model.addAttribute("apprejMasList", apprejMasList);
            model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrder);
            model.addAttribute("serviceName", serviceName);
            model.addAttribute("deptName", dept);
            model.addAttribute("mobileNo", mobileNo);
            if(tbCfcApplicationMstEntity.getRefNo() != null && !tbCfcApplicationMstEntity.getRefNo().isEmpty()){
                String ref_No = tbCfcApplicationMstEntity.getRefNo();
                model.addAttribute("ref_No", ref_No);
            }else{
            	model.addAttribute("ref_No", "");
            }
            
            Organisation org = new Organisation();
            org.setOrgid(UserSession.getCurrent().getOrganisation().getOrgid());
            if((Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_SUDA) ||
            		Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_SKDCL) || Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_PSCL) ) && 
					MainetConstants.WATER_DEPT.equals(departmentService.getDeptCode(tbWorkOrder.getWoDeptId()))) {
            
                List<PlumberMasterDTO> plumberList = tbWorkOrderService.getPlumberList(applicationId, serviceId, UserSession.getCurrent().getOrganisation().getOrgid());
                
              //  tbWorkOrder.setPlumId(plumId);
                tbWorkOrder.setPlumberList(plumberList);
                
                model.addAttribute("plumberList", plumberList);
               // model.addAttribute("newPlumId", plumId);
            }
            
            httpServletRequest.getSession().removeAttribute("applicationId");
            httpServletRequest.getSession().removeAttribute("conncetionNo");
            httpServletRequest.getSession().removeAttribute("serviceId");
            httpServletRequest.getSession().removeAttribute("taskId");
            return JSP_LIST;
        }
    
        @RequestMapping()
        public String list(final Model model) {
            log("Action 'list'");
            final TbWorkOrder tbWorkOrder = new TbWorkOrder();
            final List<TbWorkOrder> list = new ArrayList<>();
            serviceMasList = tbServicesMstService
                    .findAllServiceListByOrgId(Long.valueOf(UserSession.getCurrent().getOrganisation().getOrgid()));
            serviceList = new ArrayList<>();
            final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(PrefixConstants.WATERMODULEPREFIX.WPC,
                    UserSession.getCurrent().getOrganisation());
            model.addAttribute(MAIN_LIST_PRIFEX_WPC, lookUpList);
            final int LanguageId = UserSession.getCurrent().getLanguageId();
            model.addAttribute("LanguageId", LanguageId);
            model.addAttribute("serviceMasList", serviceMasList);
            model.addAttribute(MAIN_LIST_NAME, list);
            model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrder);
            workodergenraitonList.clear();
            return JSP_GRID;
        }
    
        /**
         * Shows a form page in order to create a new TbWorkOrder
         * 
         * @param model Spring MVC model
         * @return
         */
        @RequestMapping(params = "searchServiceMst")
        public @ResponseBody List<WorkOrderGridEntityList> searchServiceMst(final Model model,
                @RequestParam("deptId") final Long deptId, @RequestParam("serviceId") Long serviceId) {
            log("Action 'searchServiceMst'");
    
            if (serviceId.intValue() == -1) {
                serviceId = null;
            }
    
            workodergenraitonList = tbWorkOrderService.findWorkOrderPrintList(deptId, serviceId);
    
            return workodergenraitonList;
        }
    
        @RequestMapping(params = "getGridData")
        public @ResponseBody WorkOrderGridResponse gridData(final HttpServletRequest request, final Model model) {
            log("Action 'Get grid Data'");
            final WorkOrderGridResponse response = new WorkOrderGridResponse();
            final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
            response.setRows(workodergenraitonList);
            response.setTotal(workodergenraitonList.size());
            response.setRecords(workodergenraitonList.size());
            response.setPage(page);
    
            model.addAttribute(MAIN_LIST_NAME, serviceList);
    
            return response;
        }
    
        @RequestMapping("/form")
        public String formForCreate(final Model model, final HttpServletRequest request,
                @RequestParam("appNo") final long applicationId) {
            log("Action 'formForCreate'");
            // --- Populates the model with a new instance
            final TbWorkOrder tbWorkOrder = new TbWorkOrder();
            populateModel(model, tbWorkOrder, FormMode.CREATE);
            return JSP_FORM;
        }
    
        /**
         * Shows a form page in order to update an existing TbWorkOrder
         * 
         * @param model Spring MVC model
         * @param woId primary key element
         * @return
         */
        @RequestMapping(params = "print", method = { RequestMethod.POST })
        public String formForPrint(final Model model, @RequestParam("applicationId") final BigDecimal applicationId,
                RedirectAttributes redirect) {
            log("Action 'formForUpdate'");
            final List<String> paramList = commonService.findServiceActionUrl(
                    Long.valueOf(applicationId + MainetConstants.BLANK),
                    UserSession.getCurrent().getOrganisation().getOrgid());
            final String serviceName = tbServicesMstService.getServiceNameByServiceId(
                    Long.valueOf(paramList.get(MainetConstants.INDEX.ONE) + MainetConstants.BLANK));
            final TbCfcApplicationMstEntity tbCfcApplicationMstEntity = icfcApplicationMasterService
                    .getCFCApplicationByApplicationId(Long.valueOf(applicationId + MainetConstants.BLANK),
                            UserSession.getCurrent().getOrganisation().getOrgid());
            final CFCApplicationAddressEntity address = iCFCApplicationAddressService.getApplicationAddressByAppId(
                    Long.valueOf(applicationId + MainetConstants.BLANK),
                    UserSession.getCurrent().getOrganisation().getOrgid());
            String useraddress = address.getApaFloor() == null ? MainetConstants.BLANK
                    : address.getApaFloor() + MainetConstants.operator.COMMA;
            useraddress += address.getApaBldgnm() == null ? MainetConstants.BLANK
                    : address.getApaBldgnm() + MainetConstants.operator.COMMA;
            useraddress += address.getApaAreanm() == null ? MainetConstants.BLANK
                    : address.getApaAreanm() + MainetConstants.operator.COMMA;
            useraddress += address.getApaHsgCmplxnm() == null ? MainetConstants.BLANK
                    : address.getApaHsgCmplxnm() + MainetConstants.operator.COMMA;
            useraddress += address.getApaRoadnm() == null ? MainetConstants.BLANK
                    : address.getApaRoadnm() + MainetConstants.operator.COMMA;
            useraddress += address.getApaPincode() == null ? MainetConstants.BLANK
                    : address.getApaPincode() + MainetConstants.operator.COMMA;
    
            final String applicantFullName = tbCfcApplicationMstEntity.getApmFname() + MainetConstants.WHITE_SPACE
                    + (tbCfcApplicationMstEntity.getApmMname() != null ? tbCfcApplicationMstEntity.getApmMname()
                            : MainetConstants.BLANK)
                    + MainetConstants.WHITE_SPACE
                    + (tbCfcApplicationMstEntity.getApmLname() != null ? tbCfcApplicationMstEntity.getApmLname()
                            : MainetConstants.BLANK);
    
            final Date applicationDate = tbCfcApplicationMstEntity.getApmApplicationDate();
            final long applicationid = tbCfcApplicationMstEntity.getApmApplicationId();
            tbCfcApplicationMstEntity.getWorkDefinitionId();
            final Map<String, BigDecimal> Chargedescruption = tbChargeMasterService.getChargeDescByChgId(
                    Long.valueOf(applicationId + MainetConstants.BLANK),
                    UserSession.getCurrent().getOrganisation().getOrgid());
            BigDecimal chargestotal = new BigDecimal(0);
            for (final Entry<String, BigDecimal> entry : Chargedescruption.entrySet()) {
                chargestotal = chargestotal.add(entry.getValue());
            }
    
            final List<TbWorkOrderDetail> tbWorkOrderDetail = tbWorkOrderService
                    .findByApplicationID(Long.valueOf(applicationId + MainetConstants.BLANK));
            List<TbApprejMas> tbApprejMas = new ArrayList<>();
            final List<Long> artId = new ArrayList<>(0);
            Long woId = null;
            for (final TbWorkOrderDetail tbRejection : tbWorkOrderDetail) {
                woId = tbRejection.getWoId();
                if (tbRejection.getWdRemarkId() != null) {
                    artId.add(tbRejection.getWdRemarkId());
                }
            }
            tbApprejMas = tbApprejMasServiceImpl.findByArtId(artId, UserSession.getCurrent().getOrganisation().getOrgid());
            final TbWorkOrder tbWorkOrderWON = tbWorkOrderService.findById(woId);
            redirect.addFlashAttribute("WorkOrderNumber", tbWorkOrderWON.getWoOrderNo());
            redirect.addFlashAttribute("PrintReprintFlg", tbWorkOrderWON.getWoPrintFlg());
            redirect.addFlashAttribute("NewDate", new Date());
            redirect.addFlashAttribute("TermsConditon", tbApprejMas);
            redirect.addFlashAttribute("ApplicationDate", applicationDate);
            redirect.addFlashAttribute("ApplicationID", applicationid);
            redirect.addFlashAttribute("ServiceName", serviceName);
            redirect.addFlashAttribute("applicantAddress", useraddress);
            redirect.addFlashAttribute("Chargedescruption", Chargedescruption);
            redirect.addFlashAttribute("chargestotal", chargestotal);
            redirect.addFlashAttribute("ApplicantFullName", applicantFullName);
            redirect.addFlashAttribute("serviceId", Long.valueOf(paramList.get(MainetConstants.INDEX.ONE)));
    
            actionURL = REDIRECT + paramList.get(MainetConstants.INDEX.ZERO).toString() + PRINT_WORKORDER;
            return new String(actionURL);
        }
    
        /**
         * 'CREATE' action processing. <br>
         * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
         * 
         * @param tbWorkOrder entity to be created
         * @param bindingResult Spring MVC binding result
         * @param model Spring MVC model
         * @param redirectAttributes Spring MVC redirect attributes
         * @param httpServletRequest
         * @return
         */
        @RequestMapping(params = "create", method = RequestMethod.POST) // GET or POST
        public String create(@Valid final TbWorkOrder tbWorkOrder, final BindingResult bindingResult, final Model model,
                final HttpServletRequest httpServletRequest) {
            log("Action 'create'");
            try {
    
                if (!bindingResult.hasErrors()) {
                    final String woApplicationDate = tbWorkOrder.getWoApplicationDateS();
                    final SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
                    final Date date = formatter.parse(woApplicationDate);
                    tbWorkOrder.setWoApplicationDate(date);
                    String serviceShortCode = serviceMaster.fetchServiceShortCode(tbWorkOrder.getWoServiceId(), 
                			UserSession.getCurrent().getOrganisation().getOrgid());
                    Organisation org = new Organisation();
    				org.setOrgid(UserSession.getCurrent().getOrganisation().getOrgid());
    				Boolean isNWCForSKDCL = Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_SKDCL) && 
						MainetConstants.WATER_DEPT.equals(departmentService.getDeptCode(tbWorkOrder.getWoDeptId())) && 
							serviceShortCode.equals(MainetConstants.WaterServiceShortCode.WATER_NEW_CONNECION);
                    if(isNWCForSKDCL) {
                    	tbWorkOrder.setPlumId(tbWorkOrder.getNewPlumId());
                    }
                    final TbWorkOrder tbWorkOrderCreated = tbWorkOrderService.create(tbWorkOrder);
                    model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrderCreated);
                   
    				if(isNWCForSKDCL){
    		    		PlumberHoleManDTO plumberHoleManDTO = new PlumberHoleManDTO();
    		    		plumberHoleManDTO.setPlumId(tbWorkOrder.getNewPlumId());
    		    		plumberHoleManDTO.setHoleManName(tbWorkOrder.getHoleMan());
    					tbWorkOrderService.updatePlumberAndHoleManDetails(plumberHoleManDTO, tbWorkOrder.getWoApplicationId(),
    							org.getOrgid(), tbWorkOrder.getWoServiceId());
    				}
                    model.addAttribute(MainetConstants.CommonConstants.SUCCESS_URL, "AdminHome.html");
                    return MainetConstants.CommonConstants.SUCCESS_PAGE;
                } else {
                    return new String("redirect:/AdminHome.html?");
                }
            } catch (final Exception e) {
                log("Action 'create' : Exception - " + e.getMessage());
                messageHelper.addException(model, "tbWorkOrder.error.create", e);
                return new String("redirect:/AdminHome.html?");
            }
        }
    
        /**
         * 'UPDATE' action processing. <br>
         * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
         * 
         * @param tbWorkOrder entity to be updated
         * @param bindingResult Spring MVC binding result
         * @param model Spring MVC model
         * @param redirectAttributes Spring MVC redirect attributes
         * @param httpServletRequest
         * @return
         */
        @RequestMapping(params = MainetConstants.Actions.UPDATE, method = RequestMethod.POST) // GET or POST
        public void ForPrintflagupdate(final Model model, @RequestParam("workOrderNo") final String workOrderNo) {
            log("Action 'update'");
    
            tbWorkOrderService.ForPrintflagupdate(workOrderNo);
    
        }
    
        /**
         * 'DELETE' action processing. <br>
         * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
         * 
         * @param redirectAttributes
         * @param woId primary key element
         * @return
         */
        @RequestMapping(value = "/delete/{woId}") // GET or POST
        public String delete(final RedirectAttributes redirectAttributes, @PathVariable("woId") final Long woId) {
            log("Action 'delete'");
            try {
                tbWorkOrderService.delete(woId);
            } catch (final Exception e) {
                log("Action 'delete' : Exception - " + e.getMessage());
                messageHelper.addException(redirectAttributes, "tbWorkOrder.error.delete", e);
            }
            return redirectToList();
        }
    
    }
