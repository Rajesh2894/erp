/*
 * Created on 2 Jan 2016 ( Time 11:56:57 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.lang.time.DateUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.domain.Employee;
import com.abm.mainet.common.domain.FinancialYear;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.master.dto.FinYearResponse;
import com.abm.mainet.common.master.dto.TbFinancialyear;
import com.abm.mainet.common.master.service.DesignationService;
import com.abm.mainet.common.master.service.TbFinancialyearOrgMapService;
import com.abm.mainet.common.master.service.TbFinancialyearService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;

/** Spring MVC controller for 'TbFinancialyear' management. */
@Controller
@RequestMapping("/Financialyear.html")
public class FinancialyearController extends AbstractController {

    // --- Variables names ( to be used in JSP with Expression Language )
    private static final String MAIN_ENTITY_NAME = "tbFinancialyear";
    private static final String MAIN_LIST_NAME = "list";

    // --- JSP pages names ( View name in the MVC model )
    private static final String JSP_FORM = "Financialyear/form";
    private static final String JSP_VIEW_FORM = "Financialyear/viewForm";
    private static final String JSP_LIST = "Financialyear/list";
    // --- SAVE ACTION ( in the HTML form )
    private static final String SAVE_ACTION_CREATE = "/tbFinancialyear/create";
    private static final String SAVE_ACTION_UPDATE = "/tbFinancialyear/update";

    private static final String YEAR_TYPE = "yeartype";
    private static final String MONTH_TYPE = "monthtype";

    private static final String ERROR_VALUE = "errorvalue";

    // --- Main entity service
    @Resource
    private TbFinancialyearService tbFinancialyearService;

    @Resource
    private DesignationService designationService;

    @Resource
    private TbFinancialyearOrgMapService tbFinancialyearOrgMapService;

    private static Logger logger = Logger.getLogger(FinancialyearController.class);

    ApplicationSession appSession = null;

    List<TbFinancialyear> list = new ArrayList<>();

    private static String MONTH_LST = "monthList";
    private static String MONTH_LST_ALL = "monthListAll";

    // --------------------------------------------------------------------------------------
    /** Default constructor */
    public FinancialyearController() {
        super(FinancialyearController.class, MAIN_ENTITY_NAME);
        log("TbFinancialyearController created.");
    }

    // --------------------------------------------------------------------------------------
    // Spring MVC model management
    // --------------------------------------------------------------------------------------

    /**
     * Populates the Spring MVC model with the given entity and eventually other useful data
     *
     * @param model
     * @param tbFinancialyear
     */
    private void populateModel(final Model model, final TbFinancialyear tbFinancialyear, final FormMode formMode) {
        model.addAttribute(MAIN_ENTITY_NAME, tbFinancialyear);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE);
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE);
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
        }
    }

    // --------------------------------------------------------------------------------------
    // Request mapping
    // --------------------------------------------------------------------------------------
    /**
     * Shows a list with all the occurrences of TbFinancialyear found in the database
     *
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping()
    public String list(final Model model) {
        helpDoc("Financialyear.html", model);
        return JSP_LIST;
    }

    @RequestMapping(params = "loadFinYearData")
    public @ResponseBody FinYearResponse loadFinYearData(final HttpServletRequest request, final Model model) {
        FinYearResponse finyearResponse = null;
        final Organisation org = UserSession.getCurrent().getOrganisation();

        finyearResponse = new FinYearResponse();
        list = tbFinancialyearService.findAllFinancialYearByOrgId(org);
        if ((list != null) && !list.isEmpty()) {
            finyearResponse.setRows(list);
            final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
            finyearResponse.setRows(list);
            finyearResponse.setTotal(list.size());
            finyearResponse.setRecords(list.size());
            finyearResponse.setPage(page);
            model.addAttribute(MAIN_LIST_NAME, list);
        }
        return finyearResponse;
    }

    /**
     * Shows a form page in order to create a new TbFinancialyear
     *
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping(params = "form")
    public String formForCreate(@ModelAttribute("tbFinancialyear") final TbFinancialyear tbFinancialyear,
            final BindingResult bindingResult, final Model model) {
        try {
            if (!bindingResult.hasErrors()) {
                tbFinancialyear.setEditOrView(MainetConstants.MASTER.A);
                populateModel(model, tbFinancialyear, FormMode.CREATE);
                return JSP_FORM;
            } else {
                model.addAttribute(ERROR_VALUE, MainetConstants.Common_Constant.YES);
                return JSP_LIST;
            }
        } catch (final Exception e) {
            logger.error("Financial Year 'Form for create' : Exception - " + e);
            return MainetConstants.DEFAULT_EXCEPTION_FORM_VIEW;
        }
    }

    /**
     * Shows a form page in order to update an existing TbFinancialyear
     *
     * @param model Spring MVC model
     * @param faYearid primary key element
     * @return
     */

    @RequestMapping(params = "editFinancialYear")
    public String formForEdit(final Model model, @RequestParam("finyearId") final Long faYearid,
            @RequestParam("flag") final String flag) {

        Date fromdate = null;
        String fromDate = null;
        Date todate = null;
        String toDate = null;
        final Organisation org = UserSession.getCurrent().getOrganisation();
        final String prefixMon = ApplicationSession.getInstance().getMessage("prefix.month");
        Calendar calendar = null;

        List<LookUp> monthListAll = Collections.emptyList();
        final List<LookUp> monthList = new ArrayList<>();

        final String prefixClo = ApplicationSession.getInstance().getMessage("prefix.close");
        final String prefixHcl = ApplicationSession.getInstance().getMessage("prefix.hardclose");

        final TbFinancialyear tbFinancialyear = tbFinancialyearService.findYearById(faYearid, org.getOrgid());

        fromdate = tbFinancialyear.getFaFromDate();
        final SimpleDateFormat format = new SimpleDateFormat(MainetConstants.DATE_FORMAT);
        fromDate = format.format(fromdate);
        tbFinancialyear.setFromDate(fromDate);

        todate = tbFinancialyear.getFaToDate();
        toDate = format.format(todate);
        tbFinancialyear.setToDate(toDate);
        tbFinancialyear.setEditOrView(flag);

        monthListAll = CommonMasterUtility.getListLookup(prefixMon, org);

        for (final LookUp lookUp : monthListAll) {
            if (Long.valueOf(lookUp.getLookUpCode()) > fromdate.getMonth()) {
                monthList.add(lookUp);
            }
        }
        model.addAttribute(MONTH_LST, monthList);
        model.addAttribute(MONTH_LST_ALL, monthListAll);

        if (tbFinancialyear.getFaFromDate() != null) {
            final Date startDate = tbFinancialyear.getFaFromDate();
            calendar = new GregorianCalendar();
            calendar.setTime(startDate);
            model.addAttribute("startMonth", calendar.get(Calendar.MONTH) + 1);
        }

        if (tbFinancialyear.getFaToDate() != null) {
            final Date endDate = tbFinancialyear.getFaToDate();
            calendar = new GregorianCalendar();
            calendar.setTime(endDate);
            model.addAttribute("endMonth", calendar.get(Calendar.MONTH) + 1);
        }

        final List<LookUp> yearStatusList = new ArrayList<>();
        final List<LookUp> monthStatusList = new ArrayList<>();

        final List<LookUp> yearLookup = CommonMasterUtility.getLookUps(MainetConstants.FIN_YEAR_YOC, org);
        for (final LookUp lookUp : yearLookup) {
            if (lookUp.getLookUpCode().equals(prefixHcl)) {
                final Calendar currentCal = new GregorianCalendar();
                currentCal.setTime(tbFinancialyear.getFaFromDate());
                final Calendar todayCal = new GregorianCalendar();
                todayCal.setTime(new Date());

                if (currentCal.get(Calendar.YEAR) != todayCal.get(Calendar.YEAR)) {
                    yearStatusList.add(lookUp);
                }
            } else if (lookUp.getLookUpCode().equals(prefixClo)) {
                monthStatusList.add(lookUp);
            } else {
                yearStatusList.add(lookUp);
                monthStatusList.add(lookUp);
            }
        }

        model.addAttribute(YEAR_TYPE, yearStatusList);
        model.addAttribute(MONTH_TYPE, monthStatusList);

        populateModel(model, tbFinancialyear, FormMode.UPDATE);
        return JSP_FORM;

    }

    @RequestMapping(params = "viewFinancialYear")
    public String formForView(final Model model, @RequestParam("finyearId") final long faYearid,
            @RequestParam("flag") final String flag) {
        Date fromdate = null;
        String fromDate = null;
        Date todate = null;
        String toDate = null;

        final Organisation org = UserSession.getCurrent().getOrganisation();
        final String prefixMon = ApplicationSession.getInstance().getMessage("prefix.month");
        final String prefixClo = ApplicationSession.getInstance().getMessage("prefix.close");
        final String prefixHcl = ApplicationSession.getInstance().getMessage("prefix.hardclose");

        List<LookUp> monthListAll = Collections.emptyList();
        final List<LookUp> monthList = new ArrayList<>();

        try {
            final TbFinancialyear tbFinancialyear = tbFinancialyearService.findYearById(faYearid, org.getOrgid());
            fromdate = tbFinancialyear.getFaFromDate();
            final SimpleDateFormat format = new SimpleDateFormat(MainetConstants.DATE_FORMAT);
            fromDate = format.format(fromdate);
            tbFinancialyear.setFromDate(fromDate);

            todate = tbFinancialyear.getFaToDate();
            toDate = format.format(todate);
            tbFinancialyear.setToDate(toDate);
            tbFinancialyear.setEditOrView(flag);

            monthListAll = CommonMasterUtility.getListLookup(prefixMon, org);

            for (final LookUp lookUp : monthListAll) {
                if (Long.valueOf(lookUp.getLookUpCode()) > fromdate.getMonth()) {
                    monthList.add(lookUp);
                }
            }
            model.addAttribute(MONTH_LST, monthList);
            model.addAttribute(MONTH_LST_ALL, monthListAll);
            final List<LookUp> yearStatusList = new ArrayList<>();
            final List<LookUp> monthStatusList = new ArrayList<>();

            final List<LookUp> yearLookup = CommonMasterUtility.getLookUps(MainetConstants.FIN_YEAR_YOC, org);
            for (final LookUp lookUp : yearLookup) {
                if (lookUp.getLookUpCode().equals(prefixHcl)) {
                    yearStatusList.add(lookUp);
                } else if (lookUp.getLookUpCode().equals(prefixClo)) {
                    monthStatusList.add(lookUp);
                } else {
                    yearStatusList.add(lookUp);
                    monthStatusList.add(lookUp);
                }
            }
            model.addAttribute(YEAR_TYPE, yearStatusList);
            model.addAttribute(MONTH_TYPE, monthStatusList);

            populateModel(model, tbFinancialyear, FormMode.UPDATE);
            return JSP_VIEW_FORM;
        } catch (final Exception e) {
            logger.error("Financial Year 'Form for edit' : Exception - " + e);
            return MainetConstants.DEFAULT_EXCEPTION_FORM_VIEW;
        }

    }

    /**
     * 'CREATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     *
     * @param tbFinancialyear entity to be created
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "create")
    // GET or POST
    public ModelAndView create(@Valid @ModelAttribute("tbFinancialyear") final TbFinancialyear tbFinancialyear,
            final BindingResult bindingResult, final Model model, final HttpServletRequest httpServletRequest) {
        final ApplicationSession appSession = ApplicationSession.getInstance();
        try {

            final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
            final String fromdate = tbFinancialyear.getFromDate();
            final String todate = tbFinancialyear.getToDate();
            final Employee sessionEmp = UserSession.getCurrent().getEmployee();
            Date validDate = new Date();

            final DateFormat formatter = new SimpleDateFormat(MainetConstants.DATE_FORMAT);
            tbFinancialyear.setFaFromDate(DateUtils.truncate(formatter.parse(fromdate), Calendar.DATE));
            tbFinancialyear.setFaToDate(DateUtils.truncate(formatter.parse(todate), Calendar.DATE));

            /*
             * Validations
             */

            if (tbFinancialyearService.getFinancialYearTotalCount() != 0) {
                FinancialYear isFinYearExist = tbFinancialyearService.isFaYearExists(fromdate);
                if (isFinYearExist != null) {
                    bindingResult.addError(new ObjectError("faYearExists", appSession.getMessage("fin.year.alreadyExists")));
                } else {
                    final Calendar calendar1 = new GregorianCalendar();
                    calendar1.setTime(tbFinancialyear.getFaFromDate());

                    final Calendar calendar2 = new GregorianCalendar();
                    calendar2.setTime(tbFinancialyear.getFaToDate());

                    final int diffYear = calendar2.get(Calendar.YEAR) - calendar1.get(Calendar.YEAR);
                    final int diffMonth = ((diffYear * 12) + calendar2.get(Calendar.MONTH)) - calendar1.get(Calendar.MONTH);

                    if (diffMonth > 12) {
                        bindingResult.addError(new ObjectError("dateDuration", appSession.getMessage("fin.year.dateduration")));
                    } else {
                        final Long count = tbFinancialyearService.checkForPreviousYear(calendar1.get(Calendar.YEAR) - 1,
                                calendar2.get(Calendar.YEAR) - 1);
                        if (count <= 0) {
                            bindingResult.addError(
                                    new ObjectError("previousNotExist", appSession.getMessage("fin.year.previousNotExist")));
                        } else {
                            validDate = tbFinancialyearService.getValidFInancialYearDate();
                            if (validDate != null) {
                                if (validDate.after(tbFinancialyear.getFaFromDate())) {
                                    bindingResult
                                            .addError(new ObjectError("validDate", appSession.getMessage("fin.year.validDate")));
                                }
                            }
                        }
                    }
                }
            }

            /* Create Financial year */
            if (!bindingResult.hasErrors()) {
                tbFinancialyear.setHasError(MainetConstants.FALSE);
                tbFinancialyear.setLgIpMac(UserSession.getCurrent().getEmployee().getEmppiservername());
                tbFinancialyear.setCreatedDate(new Date());
                tbFinancialyear.setCreatedBy(sessionEmp.getEmpId());
                tbFinancialyearService.create(tbFinancialyear, orgId, sessionEmp);
                return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                        MainetConstants.COMMON_STATUS.SUCCESS);
            } else {
                tbFinancialyear.setHasError(MainetConstants.FALSE);
                model.addAttribute(ERROR_VALUE, MainetConstants.Common_Constant.YES);
                populateModel(model, tbFinancialyear, FormMode.CREATE);
                model.addAttribute(BindingResult.MODEL_KEY_PREFIX + MainetConstants.FORM_NAME, bindingResult);
                return new ModelAndView(JSP_FORM);
            }
        } catch (final Exception e) {
            logger.error("Financial Year 'create' : Exception - " + e);
            return new ModelAndView(MainetConstants.DEFAULT_EXCEPTION_FORM_VIEW);
        }
    }

    /**
     * 'UPDATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     *
     * @param tbFinancialyear entity to be updated
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "update")
    // GET or POST
    public ModelAndView update(@Valid @ModelAttribute("tbFinancialyear") final TbFinancialyear tbFinancialyear,
            final BindingResult bindingResult, final Model model, final RedirectAttributes redirectAttributes,
            final HttpServletRequest httpServletRequest) {
        final Long mapId = tbFinancialyear.getFinancialyearOrgMap().get(0).getMapId();
        tbFinancialyear.setLgIpMacUpd(UserSession.getCurrent().getEmployee().getEmppiservername());
        final Employee sessionEmp = UserSession.getCurrent().getEmployee();

        if (!bindingResult.hasErrors()) {
            tbFinancialyearService.update(tbFinancialyear, mapId, sessionEmp);
            return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                    MainetConstants.COMMON_STATUS.SUCCESS);
        } else {
            tbFinancialyear.setHasError(MainetConstants.FALSE);
            model.addAttribute(ERROR_VALUE, MainetConstants.Common_Constant.YES);
            model.addAttribute(BindingResult.MODEL_KEY_PREFIX + MainetConstants.FORM_NAME, bindingResult);
            populateModel(model, tbFinancialyear, FormMode.UPDATE);
            return new ModelAndView(JSP_FORM);
        }

    }

    @RequestMapping(params = "checkForFinancialYear")
    public @ResponseBody String checkForFinancialYear(@RequestParam("faYearId") final Long faYearId) {

        String status = MainetConstants.Common_Constant.NO;
        final List<Long> faYearIdList = tbFinancialyearService.getCurrentAndPreviousYears();
        if (faYearIdList.contains(faYearId)) {
            status = MainetConstants.Common_Constant.YES;
        }
        return status;

    }
}