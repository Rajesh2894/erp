/*
 * Created on 21 Mar 2016 ( Time 19:07:04 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.domain.GroupMaster;
import com.abm.mainet.common.domain.ScrutinyLabelsDto;
import com.abm.mainet.common.domain.ScrutinyServiceDto;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.domain.TbScrutinyLabels;
import com.abm.mainet.common.master.dto.TbDeporgMap;
import com.abm.mainet.common.master.dto.TbServicesMst;
import com.abm.mainet.common.master.service.DepartmentService;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.master.service.TbDeporgMapService;
import com.abm.mainet.common.master.service.TbScrutinyLabelsService;
import com.abm.mainet.common.master.service.TbServicesMstService;
import com.abm.mainet.common.master.ui.model.ScrutinyServiceDataResponse;
import com.abm.mainet.common.master.ui.model.TbScrutinyMstListItem;
import com.abm.mainet.common.master.ui.validator.ScrutinyLabelsValidator;
import com.abm.mainet.common.service.IEmployeeService;
import com.abm.mainet.common.service.ServiceMasterService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.ApplicationContextProvider;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;

/**
 * Spring MVC controller for 'TbScrutinyLabels' management.
 */
@Controller
@RequestMapping("/ScrutinyLabels.html")
public class TbScrutinyLabelsController extends AbstractController {

	private static final Logger Log = Logger.getLogger(TbScrutinyLabelsController.class);

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "tbScrutinyLabels";
	private static final String MAIN_LIST_NAME = "list";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM = "tbScrutinyLabels/form";
	private static final String JSP_LIST = "tbScrutinyLabels/list";
	private static final String JSP_FORM_VIEW = "tbScrutinyLabels/viewform";

	// --- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE = "ScrutinyLabels.html?create";
	private static final String SAVE_ACTION_UPDATE = "ScrutinyLabels.html?update";

	// --- Main entity service
	@Resource
	private TbScrutinyLabelsService tbScrutinyLabelsService; // Injected by Spring

	@Resource
	private TbDepartmentService tbDepartmentService; // Injected by Spring

	@Resource
	private TbDeporgMapService tbDeporgMapService;

	@Autowired
	private IEmployeeService employeeService; // Injected by Spring

	@Resource
	private TbServicesMstService servicesMstService; // Injected by Spring

	private List<TbScrutinyLabels> scrutinyLabelsList = new ArrayList<>();
	private TbScrutinyLabels tbScrutinyLabelsTemp;
	private List<ScrutinyServiceDto> scrutinyServiceList = new ArrayList<>();
	
	@InitBinder
    protected void initBinder(final WebDataBinder binder) {
    	binder.setAutoGrowCollectionLimit(10000);
    }

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public TbScrutinyLabelsController() {
		super(TbScrutinyLabelsController.class, MAIN_ENTITY_NAME);
		log("TbScrutinyLabelsController created.");
	}

	// --------------------------------------------------------------------------------------
	// Spring MVC model management
	// --------------------------------------------------------------------------------------
	/**
	 * Populates the combo-box "items" for the referenced entity "TbScrutinyMst"
	 * 
	 * @param model
	 */
	private void populateListOfTbScrutinyMstItems(final Model model) {
		final List<TbScrutinyMstListItem> items = new LinkedList<>();
		model.addAttribute(MainetConstants.CommonMasterUi.lIST_OF_SCRUITINY_MSTITEMS, items);
	}

	/**
	 * Populates the Spring MVC model with the given entity and eventually other
	 * useful data
	 * 
	 * @param model
	 * @param tbScrutinyLabels
	 */
	private void populateModel(final Model model, final TbScrutinyLabels tbScrutinyLabels, final FormMode formMode) {
		// --- Main entity
		final List<String> yesNoList = new ArrayList<>();
		yesNoList.add(MainetConstants.YESL);
		yesNoList.add(MainetConstants.NOL);
		model.addAttribute(MainetConstants.CommonMasterUi.YES_NO_LIST, yesNoList);
		model.addAttribute(MAIN_ENTITY_NAME, tbScrutinyLabels);
		// T#110976
		model.addAttribute("kdmcEnv", "N");
		model.addAttribute("psclEnv", "N");
		if ((Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_SKDCL)) || (Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_PSCL))) {
			model.addAttribute("kdmcEnv", "Y");
			model.addAttribute("psclEnv", "Y");
			List<LookUp> lookUpList = new ArrayList<LookUp>();
			try {
				lookUpList = CommonMasterUtility.getLevelData("ITC", 1, UserSession.getCurrent().getOrganisation());
			} catch (Exception e) {
				// TODO: handle exception
				Log.error("ITC Prefix not found");
			}
			model.addAttribute("triCod1", lookUpList);
		}
		if (formMode == FormMode.CREATE) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
			// --- Other data useful in this screen in "create" mode (all fields)
			populateListOfTbScrutinyMstItems(model);
		} else if (formMode == FormMode.UPDATE) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
			// --- Other data useful in this screen in "update" mode (only non-pk fields)
			populateListOfTbScrutinyMstItems(model);
		}
	}

	// --------------------------------------------------------------------------------------
	// Request mapping
	// --------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of TbScrutinyLabels found in the
	 * database
	 * 
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(final Model model) {
		log("Action 'list'");
		helpDoc("ScrutinyLabels.html", model);
		final ScrutinyServiceDto serviceDto = new ScrutinyServiceDto();
		scrutinyServiceList = new ArrayList<>();
		final long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
		final List<TbDeporgMap> deptList = tbDeporgMapService.getDepartmentData(orgId);
		// US#113590
		model.addAttribute("kdmcEnv", "N");
		model.addAttribute("psclEnv", "N");
		if ((Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_SKDCL))|| (Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_PSCL))) {
			model.addAttribute("kdmcEnv", "Y");
			model.addAttribute("psclEnv", "Y");
			List<LookUp> lookUpList = new ArrayList<LookUp>();
			try {
				lookUpList = CommonMasterUtility.getLevelData("ITC", 1, UserSession.getCurrent().getOrganisation());
			} catch (Exception e) {
				// TODO: handle exception
				Log.error("ITC Prefix not found");
			}
			model.addAttribute("triCod1", lookUpList);
		}
		model.addAttribute(MainetConstants.CommonConstants.COMMAND, serviceDto);
		model.addAttribute(MainetConstants.CHEQUE_DISHONOUR.DEPT_LIST, deptList);
		return JSP_LIST;
	}

	/**
	 * Gets the Grid Data
	 * 
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(params = "getGridData")
	public @ResponseBody ScrutinyServiceDataResponse gridData(final HttpServletRequest request, final Model model) {
		log("Action 'Get grid Data'");

		final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));

		final List<ScrutinyServiceDto> list = scrutinyServiceList;
		final ScrutinyServiceDataResponse response = new ScrutinyServiceDataResponse();
		final int dataSize = list.size();
		response.setRows(list);
		response.setTotal(dataSize);
		response.setRecords(dataSize);
		response.setPage(page);

		model.addAttribute(MAIN_LIST_NAME, list);

		return response;
	}

	/**
	 * Shows a form page in order to create a new TbScrutinyLabels
	 * 
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping(params = "form")
	public String formForCreate(final Model model) {
		log("Action 'formForCreate'");
		// --- Populates the model with a new instance
		final TbScrutinyLabels tbScrutinyLabels = new TbScrutinyLabels();
		tbScrutinyLabelsTemp = tbScrutinyLabels;
		final ScrutinyLabelsDto scrutinyLabelsDto = new ScrutinyLabelsDto();
		scrutinyLabelsList = new ArrayList<>();

		final List<ScrutinyServiceDto> serviceList = tbScrutinyLabelsService
				.getAllServices(UserSession.getCurrent().getOrganisation().getOrgid());
		final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.DTT,
				UserSession.getCurrent().getOrganisation());
		final List<GroupMaster> groupDataList = employeeService
				.getGroupDataList(UserSession.getCurrent().getOrganisation().getOrgid());

		populateModel(model, tbScrutinyLabels, FormMode.CREATE);
		model.addAttribute(MainetConstants.CommonMasterUi.SERVICE_LIST, serviceList);
		model.addAttribute(MainetConstants.CommonMasterUi.SCRUTINY_LABELS_DTO, scrutinyLabelsDto);
		model.addAttribute(MainetConstants.CommonMasterUi.LOOK_UP_LIST, lookUpList);
		model.addAttribute(MainetConstants.CommonMasterUi.GROUP_DATA_LIST, groupDataList);

		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing TbScrutinyLabels
	 * 
	 * @param model     Spring MVC model
	 * @param slLabelId primary key element
	 * @param orgid     primary key element
	 * @return
	 */
	@RequestMapping(params = "formForUpdate")
	public String formForUpdate(final Model model, @RequestParam("smServiceId") final Long smServiceId,
			@RequestParam("triCod1") final Long triCod1) {
		log("Action 'formForUpdate'");
		// --- Search the entity by its primary key and stores it in the model
		final ScrutinyLabelsDto scrutinyLabelsDto = new ScrutinyLabelsDto();
		final TbScrutinyLabels tbScrutinyLabels = new TbScrutinyLabels();
		scrutinyLabelsList = tbScrutinyLabelsService.findAllScrutinyLabelData(smServiceId,
				UserSession.getCurrent().getOrganisation().getOrgid(), triCod1);
		final List<ScrutinyServiceDto> serviceList = tbScrutinyLabelsService
				.getScrutinyServices(UserSession.getCurrent().getOrganisation().getOrgid());
		final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.DTT,
				UserSession.getCurrent().getOrganisation());
		final List<GroupMaster> groupDataList = employeeService
				.getGroupDataList(UserSession.getCurrent().getOrganisation().getOrgid());
		final List<String> yesNoList = new ArrayList<>();
		yesNoList.add(MainetConstants.YESL);
		yesNoList.add(MainetConstants.NOL);
		// US#113590
		if ((Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_SKDCL))||(Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_PSCL))) {
			populateTradeCategorySubCategory(model, scrutinyLabelsList);

		}
		if (UserSession.getCurrent().getLanguageId() == 1) {
			for (final LookUp lookUpData : lookUpList) {
				lookUpData.setLookUpDesc(lookUpData.getDescLangFirst());
			}
		} else {
			for (final LookUp lookUpData : lookUpList) {
				lookUpData.setLookUpDesc(lookUpData.getDescLangSecond());
			}
		}

		if (!scrutinyLabelsList.isEmpty()) {
			tbScrutinyLabelsTemp = scrutinyLabelsList.get(0);
			scrutinyLabelsDto.setScrutinyLabels(tbScrutinyLabelsTemp);
			scrutinyLabelsDto.setScrutinyLabelsList(scrutinyLabelsList);
		}
		populateModel(model, tbScrutinyLabels, FormMode.UPDATE);
		model.addAttribute(MainetConstants.CommonMasterUi.SERVICE_LIST, serviceList);
		model.addAttribute(MainetConstants.CommonMasterUi.SCRUTINY_LABELS_DTO, scrutinyLabelsDto);
		model.addAttribute(MainetConstants.CommonMasterUi.LOOK_UP_LIST, lookUpList);
		model.addAttribute(MainetConstants.CommonMasterUi.GROUP_DATA_LIST, groupDataList);
		model.addAttribute(MainetConstants.CommonMasterUi.YES_NO_LIST, yesNoList);
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing TbScrutinyLabels
	 * 
	 * @param model     Spring MVC model
	 * @param slLabelId primary key element
	 * @param orgid     primary key element
	 * @return
	 */
	@RequestMapping(params = "formForView")
	public String formForView(final Model model, @RequestParam("smServiceId") final Long smServiceId,
			@RequestParam("triCod1") final Long triCod1) {
		log("Action 'formForUpdate'");
		// --- Search the entity by its primary key and stores it in the model
		final ScrutinyLabelsDto scrutinyLabelsDto = new ScrutinyLabelsDto();
		final TbScrutinyLabels tbScrutinyLabels = new TbScrutinyLabels();
		scrutinyLabelsList = tbScrutinyLabelsService.findAllScrutinyLabelData(smServiceId,
				UserSession.getCurrent().getOrganisation().getOrgid(), triCod1);
		final List<ScrutinyServiceDto> serviceList = tbScrutinyLabelsService
				.getScrutinyServices(UserSession.getCurrent().getOrganisation().getOrgid());
		final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.DTT,
				UserSession.getCurrent().getOrganisation());
		final List<GroupMaster> groupDataList = employeeService
				.getGroupDataList(UserSession.getCurrent().getOrganisation().getOrgid());

		if (!scrutinyLabelsList.isEmpty()) {
			tbScrutinyLabelsTemp = scrutinyLabelsList.get(0);
			scrutinyLabelsDto.setScrutinyLabels(tbScrutinyLabelsTemp);
			scrutinyLabelsDto.setScrutinyLabelsList(scrutinyLabelsList);
			// US#113590
			if ((Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_SKDCL)) || (Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_PSCL))) {
				populateTradeCategorySubCategory(model, scrutinyLabelsList);

			}
		}
		populateModel(model, tbScrutinyLabels, FormMode.UPDATE);
		model.addAttribute(MainetConstants.CommonMasterUi.SERVICE_LIST, serviceList);
		model.addAttribute(MainetConstants.CommonMasterUi.SCRUTINY_LABELS_DTO, scrutinyLabelsDto);
		model.addAttribute(MainetConstants.CommonMasterUi.LOOK_UP_LIST, lookUpList);
		model.addAttribute(MainetConstants.CommonMasterUi.GROUP_DATA_LIST, groupDataList);
		return JSP_FORM_VIEW;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param tbScrutinyLabels   entity to be created
	 * @param bindingResult      Spring MVC binding result
	 * @param model              Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(params = "create") // GET or POST
	public ModelAndView create(@Valid final ScrutinyLabelsDto scrutinyLabelsDto, final BindingResult bindingResult,
			final Model model, final HttpServletRequest httpServletRequest) {
		log("Action 'create'");
		final ModelAndView mv = new ModelAndView(JSP_FORM);
		try {
			final ScrutinyLabelsValidator validator = new ScrutinyLabelsValidator();
			validator.validate(scrutinyLabelsDto, bindingResult);

			if (!bindingResult.hasErrors()) {
				scrutinyLabelsList = scrutinyLabelsDto.getScrutinyLabelsList();
				tbScrutinyLabelsService.createScrutinyLabel(scrutinyLabelsDto, scrutinyLabelsList);
				model.addAttribute(MAIN_ENTITY_NAME, new TbScrutinyLabels());
				populateModel(model, new TbScrutinyLabels(), FormMode.CREATE);
				return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
						MainetConstants.COMMON_STATUS.SUCCESS);
			} else {

				final List<ScrutinyServiceDto> serviceList = tbScrutinyLabelsService
						.getAllServices(UserSession.getCurrent().getOrganisation().getOrgid());
				final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.DTT,
						UserSession.getCurrent().getOrganisation());
				final List<GroupMaster> groupDataList = employeeService
						.getGroupDataList(UserSession.getCurrent().getOrganisation().getOrgid());
				final List<String> yesNoList = new ArrayList<>();
				yesNoList.add(MainetConstants.YESL);
				yesNoList.add(MainetConstants.NOL);

				if (!scrutinyLabelsList.isEmpty()) {
					tbScrutinyLabelsTemp = scrutinyLabelsList.get(0);
					scrutinyLabelsDto.setScrutinyLabels(tbScrutinyLabelsTemp);
					scrutinyLabelsDto.setScrutinyLabelsList(scrutinyLabelsList);
				}
				// US#113590
				if ((Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_SKDCL)) || (Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_PSCL))) {
					if (scrutinyLabelsDto != null && scrutinyLabelsDto.getScrutinyLabels() != null) {
						TbScrutinyLabels dto = new TbScrutinyLabels();
						dto.setScrutinyId(scrutinyLabelsDto.getScrutinyLabels().getScrutinyId());
						scrutinyLabelsList.add(dto);
						populateTradeCategorySubCategory(model, scrutinyLabelsList);
					}
				}
				model.addAttribute(MainetConstants.CommonMasterUi.SERVICE_LIST, serviceList);
				model.addAttribute(MainetConstants.CommonMasterUi.SCRUTINY_LABELS_DTO, scrutinyLabelsDto);
				model.addAttribute(MainetConstants.CommonMasterUi.LOOK_UP_LIST, lookUpList);
				model.addAttribute(MainetConstants.CommonMasterUi.GROUP_DATA_LIST, groupDataList);
				model.addAttribute(MainetConstants.CommonMasterUi.YES_NO_LIST, yesNoList);

				model.addAttribute(MainetConstants.CommonMasterUi.SCRUTINY_LABELS_DTO, scrutinyLabelsDto);
				populateModel(model, new TbScrutinyLabels(), FormMode.CREATE);
				return mv;
			}
		} catch (final Exception e) {
			log("Action 'create' : Exception - " + e.getMessage());
			messageHelper.addException(model, "tbScrutinyLabels.error.create", e);
			populateModel(model, new TbScrutinyLabels(), FormMode.CREATE);
			return mv;
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param tbScrutinyLabels   entity to be updated
	 * @param bindingResult      Spring MVC binding result
	 * @param model              Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(params = "update") // GET or POST
	public ModelAndView update(@Valid final ScrutinyLabelsDto scrutinyLabelsDto, final BindingResult bindingResult,
			final Model model, final HttpServletRequest httpServletRequest) {
		log("Action 'update'");
		try {
			scrutinyLabelsDto.getScrutinyLabels().setFormMode(MainetConstants.Actions.UPDATE);
			final ScrutinyLabelsValidator validator = new ScrutinyLabelsValidator();
			validator.validate(scrutinyLabelsDto, bindingResult);

			if (!bindingResult.hasErrors()) {
				// --- Perform database operations
				tbScrutinyLabelsService.updateScrutinyLabel(scrutinyLabelsDto, scrutinyLabelsList,
						tbScrutinyLabelsTemp);
				final TbScrutinyLabels tbScrutinyLabels = new TbScrutinyLabels();
				model.addAttribute(MAIN_ENTITY_NAME, tbScrutinyLabels);
				// --- Set the result message
				populateModel(model, tbScrutinyLabels, FormMode.UPDATE);
				log("Action 'update' : update done - redirect");
				return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
						MainetConstants.COMMON_STATUS.SUCCESS);
			} else {
				log("Action 'update' : binding errors");
				final List<ScrutinyServiceDto> serviceList = tbScrutinyLabelsService
						.getScrutinyServices(UserSession.getCurrent().getOrganisation().getOrgid());
				final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(MainetConstants.CommonMasterUi.DTT,
						UserSession.getCurrent().getOrganisation());
				final List<GroupMaster> groupDataList = employeeService
						.getGroupDataList(UserSession.getCurrent().getOrganisation().getOrgid());
				final List<String> yesNoList = new ArrayList<>();
				yesNoList.add(MainetConstants.YESL);
				yesNoList.add(MainetConstants.NOL);

				model.addAttribute(MainetConstants.CommonMasterUi.SERVICE_LIST, serviceList);
				model.addAttribute(MainetConstants.CommonMasterUi.SCRUTINY_LABELS_DTO, scrutinyLabelsDto);
				model.addAttribute(MainetConstants.CommonMasterUi.LOOK_UP_LIST, lookUpList);
				model.addAttribute(MainetConstants.CommonMasterUi.GROUP_DATA_LIST, groupDataList);
				model.addAttribute(MainetConstants.CommonMasterUi.YES_NO_LIST, yesNoList);
				final TbScrutinyLabels tbScrutinyLabels = new TbScrutinyLabels();
				populateModel(model, tbScrutinyLabels, FormMode.UPDATE);
				// US#113590
				if ((Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_SKDCL)) 
						|| (Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(),MainetConstants.ENV_PSCL))) {
					if (scrutinyLabelsDto != null && scrutinyLabelsDto.getScrutinyLabels() != null) {
						TbScrutinyLabels dto = new TbScrutinyLabels();
						dto.setScrutinyId(scrutinyLabelsDto.getScrutinyLabels().getScrutinyId());
						scrutinyLabelsList.add(dto);
						populateTradeCategorySubCategory(model, scrutinyLabelsList);
					}
				}
				return new ModelAndView(JSP_FORM);
			}
		} catch (final Exception e) {
			messageHelper.addException(model, "tbScrutinyLabels.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage());
			final TbScrutinyLabels tbScrutinyLabels = new TbScrutinyLabels();
			populateModel(model, tbScrutinyLabels, FormMode.UPDATE);
			return new ModelAndView(JSP_FORM);
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param redirectAttributes
	 * @param slLabelId          primary key element
	 * @param orgid              primary key element
	 * @return
	 */
	@RequestMapping(params = "delete") // GET or POST
	public String delete(@RequestParam("slLabelId") final Long slLabelId, @RequestParam("orgid") final Long orgid) {
		log("Action 'delete'");
		try {
			tbScrutinyLabelsService.delete(slLabelId, orgid);
			// --- Set the result message
		} catch (final Exception e) {
			log("ERROR : " + e.getMessage());
		}
		return JSP_FORM;
	}

	@RequestMapping(params = "refreshService")
	public @ResponseBody List<TbServicesMst> refreshService(final Model model,
			final HttpServletRequest httpServletRequest, @RequestParam(value = "deptId") final Long deptId) {

		final List<TbServicesMst> serviceMst = servicesMstService.findByDeptId(deptId,
				UserSession.getCurrent().getOrganisation().getOrgid());
		return serviceMst;
	}

	@RequestMapping(params = "searchData")
	public @ResponseBody void searchData(final Model model, final HttpServletRequest httpServletRequest,
			@RequestParam(value = "scrutinyId") final Long serviceId, @RequestParam(value = "deptId") final Long deptId,
			@RequestParam(value = "triCod1") final Long triCod1) {

		scrutinyServiceList = tbScrutinyLabelsService.findAllServiceListData(
				Long.valueOf(UserSession.getCurrent().getOrganisation().getOrgid()), serviceId, deptId, triCod1);

	}

	/**
	 * This method is used to return the Item Sub Category
	 * 
	 * @param triCode1
	 */
	@RequestMapping(params = MainetConstants.AdvertisingAndHoarding.SEARCH_LIC_SUB_CATAGORY_BY_CATAGORY_ID, method = {
			RequestMethod.POST })
	@ResponseBody
	public List<LookUp> searchLicenseSubCatagory(@RequestParam(MainetConstants.Common_Constant.TRI_CODE1) Long triCode1,
			HttpServletRequest request) {
		List<LookUp> lookUpList1 = new java.util.ArrayList<LookUp>();
		try {
			List<LookUp> lookUpList = CommonMasterUtility.getLevelData("ITC", 2,
					UserSession.getCurrent().getOrganisation());
			lookUpList1 = lookUpList.stream().filter(lookUp -> lookUp.getLookUpParentId() == triCode1)
					.collect(Collectors.toList());
			return lookUpList1;
		} catch (Exception e) {
			Log.error("ITC Prefix not found");
			return lookUpList1;

		}
	}

	@RequestMapping(params = "getServiceShortCode", method = { RequestMethod.POST })
	@ResponseBody
	public String getServiceShortCode(@RequestParam("scrutinyId") Long scrutinyId, HttpServletRequest request) {
		try {
			if (scrutinyId != null) {
				ServiceMaster servMast = ApplicationContextProvider.getApplicationContext()
						.getBean(ServiceMasterService.class)
						.getServiceMaster(scrutinyId, UserSession.getCurrent().getOrganisation().getOrgid());
				if (servMast != null && servMast.getTbDepartment() != null
						&& servMast.getTbDepartment().getDpDeptid() != null) {
					return ApplicationContextProvider.getApplicationContext().getBean(DepartmentService.class)
							.getDeptCode(servMast.getTbDepartment().getDpDeptid());

				}

			}
		} catch (Exception e) {
			// TODO: handle exception
			Log.error("Not found Service Short Code inside getServiceShortCode() ----->>>>>");
		}
		return null;
	}

	private void populateTradeCategorySubCategory(Model model, List<TbScrutinyLabels> scrutinyLabelsList2) {
		model.addAttribute("kdmcEnv", "Y");
		model.addAttribute("psclEnv", "Y");
		List<LookUp> lookUpLst = CommonMasterUtility.getLevelData("ITC", 1, UserSession.getCurrent().getOrganisation());
		model.addAttribute("triCod1", lookUpLst);
		/*
		 * if (tricod1 != null) { List<LookUp> lookUpListSub = CommonMasterUtility
		 * .getLevelData("ITC", 2, UserSession.getCurrent().getOrganisation()).stream()
		 * .filter(lookup -> lookup.getLookUpParentId() ==
		 * tricod1).collect(Collectors.toList()); model.addAttribute("triCod2",
		 * lookUpListSub); }
		 */
		if (scrutinyLabelsList != null && !scrutinyLabelsList.isEmpty()
				&& scrutinyLabelsList.get(0).getScrutinyId() != null) {
			ServiceMaster servMast = ApplicationContextProvider.getApplicationContext()
					.getBean(ServiceMasterService.class).getServiceMaster(scrutinyLabelsList.get(0).getScrutinyId(),
							UserSession.getCurrent().getOrganisation().getOrgid());
			String shortCode = ApplicationContextProvider.getApplicationContext().getBean(DepartmentService.class)
					.getDeptCode(servMast.getTbDepartment().getDpDeptid());
			model.addAttribute("deptShortCode", shortCode);
		}

	}

}
