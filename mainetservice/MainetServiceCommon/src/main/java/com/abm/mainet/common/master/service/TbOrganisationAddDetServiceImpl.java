/*
 * Created on 27 Jul 2015 ( Time 15:58:02 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.abm.mainet.common.master.service;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.domain.TbOrganisationAddDetEntity;
import com.abm.mainet.common.domain.TbOrganisationAddDetEntityKey;
import com.abm.mainet.common.master.dto.TbOrganisationAddDet;
import com.abm.mainet.common.master.mapper.TbOrganisationAddDetServiceMapper;
import com.abm.mainet.common.master.repository.TbOrganisationAddDetJpaRepository;

/**
 * Implementation of TbOrganisationAddDetService
 */
@Component
@Transactional
public class TbOrganisationAddDetServiceImpl implements TbOrganisationAddDetService {

    @Resource
    private TbOrganisationAddDetJpaRepository tbOrganisationAddDetJpaRepository;

    @Resource
    private TbOrganisationAddDetServiceMapper tbOrganisationAddDetServiceMapper;

    @Override
    public TbOrganisationAddDet findById(final Long orgidDet, final Long orgId) {
        final TbOrganisationAddDetEntityKey id = new TbOrganisationAddDetEntityKey(orgidDet, orgId);
        final TbOrganisationAddDetEntity tbOrganisationAddDetEntity = tbOrganisationAddDetJpaRepository.findOne(id);
        return tbOrganisationAddDetServiceMapper
                .mapTbOrganisationAddDetEntityToTbOrganisationAddDet(tbOrganisationAddDetEntity);
    }

    @Override
    public List<TbOrganisationAddDet> findAll() {
        final Iterable<TbOrganisationAddDetEntity> entities = tbOrganisationAddDetJpaRepository.findAll();
        final List<TbOrganisationAddDet> beans = new ArrayList<>();
        for (final TbOrganisationAddDetEntity tbOrganisationAddDetEntity : entities) {
            beans.add(tbOrganisationAddDetServiceMapper
                    .mapTbOrganisationAddDetEntityToTbOrganisationAddDet(tbOrganisationAddDetEntity));
        }
        return beans;
    }

    @Override
    public TbOrganisationAddDet create(final TbOrganisationAddDet tbOrganisationAddDet) {
        final TbOrganisationAddDetEntityKey id = new TbOrganisationAddDetEntityKey(tbOrganisationAddDet.getOrgidDet(),
                tbOrganisationAddDet.getOrgId());
        TbOrganisationAddDetEntity tbOrganisationAddDetEntity = tbOrganisationAddDetJpaRepository.findOne(id);
        if (tbOrganisationAddDetEntity != null) {
            throw new IllegalStateException("already.exists");
        }
        tbOrganisationAddDetEntity = new TbOrganisationAddDetEntity();
        tbOrganisationAddDetServiceMapper.mapTbOrganisationAddDetToTbOrganisationAddDetEntity(tbOrganisationAddDet,
                tbOrganisationAddDetEntity);
        final TbOrganisationAddDetEntity tbOrganisationAddDetEntitySaved = tbOrganisationAddDetJpaRepository
                .save(tbOrganisationAddDetEntity);
        return tbOrganisationAddDetServiceMapper
                .mapTbOrganisationAddDetEntityToTbOrganisationAddDet(tbOrganisationAddDetEntitySaved);
    }

    @Override
    public TbOrganisationAddDet update(final TbOrganisationAddDet tbOrganisationAddDet) {
        final TbOrganisationAddDetEntityKey id = new TbOrganisationAddDetEntityKey(tbOrganisationAddDet.getOrgidDet(),
                tbOrganisationAddDet.getOrgId());
        final TbOrganisationAddDetEntity tbOrganisationAddDetEntity = tbOrganisationAddDetJpaRepository.findOne(id);
        tbOrganisationAddDetServiceMapper.mapTbOrganisationAddDetToTbOrganisationAddDetEntity(tbOrganisationAddDet,
                tbOrganisationAddDetEntity);
        final TbOrganisationAddDetEntity tbOrganisationAddDetEntitySaved = tbOrganisationAddDetJpaRepository
                .save(tbOrganisationAddDetEntity);
        return tbOrganisationAddDetServiceMapper
                .mapTbOrganisationAddDetEntityToTbOrganisationAddDet(tbOrganisationAddDetEntitySaved);
    }

    @Override
    public void delete(final Long orgidDet, final Long orgId) {
        final TbOrganisationAddDetEntityKey id = new TbOrganisationAddDetEntityKey(orgidDet, orgId);
        tbOrganisationAddDetJpaRepository.delete(id);
    }

    public TbOrganisationAddDetJpaRepository getTbOrganisationAddDetJpaRepository() {
        return tbOrganisationAddDetJpaRepository;
    }

    public void setTbOrganisationAddDetJpaRepository(
            final TbOrganisationAddDetJpaRepository tbOrganisationAddDetJpaRepository) {
        this.tbOrganisationAddDetJpaRepository = tbOrganisationAddDetJpaRepository;
    }

    public TbOrganisationAddDetServiceMapper getTbOrganisationAddDetServiceMapper() {
        return tbOrganisationAddDetServiceMapper;
    }

    public void setTbOrganisationAddDetServiceMapper(
            final TbOrganisationAddDetServiceMapper tbOrganisationAddDetServiceMapper) {
        this.tbOrganisationAddDetServiceMapper = tbOrganisationAddDetServiceMapper;
    }

    @Override
    public List<TbOrganisationAddDet> findAllById(final Long orgid) {
        return null;
    }

}
