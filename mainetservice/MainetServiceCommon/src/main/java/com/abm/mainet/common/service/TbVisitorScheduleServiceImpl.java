/*
 * Created on 6 Apr 2016 ( Time 11:16:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.service;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.ClassUtils;
import org.springframework.util.ReflectionUtils;

import com.abm.mainet.cfc.scrutiny.dto.ScrutinyLableValueDTO;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.domain.TbVisitorScheduleEntity;
import com.abm.mainet.common.dto.TbVisitorSchedule;
import com.abm.mainet.common.exception.FrameworkException;
import com.abm.mainet.common.integration.dto.PlumberMasterDTO;
import com.abm.mainet.common.repository.TbVisitorScheduleJpaRepository;
import com.abm.mainet.common.utility.ApplicationContextProvider;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.UtilityService;


/**
 * Implementation of TbVisitorScheduleService
 */
@Component
@Transactional
public class TbVisitorScheduleServiceImpl extends AbstractService implements TbVisitorScheduleService {

    @Resource
    private TbVisitorScheduleJpaRepository tbVisitorScheduleJpaRepository;

    @Resource
    private TbVisitorScheduleServiceMapper tbVisitorScheduleServiceMapper;
    
    @Autowired
    private ServiceMasterService serviceMasterService;
    
   


    @Override
    public TbVisitorSchedule findByAppId(final Long appId, final Long orgid) {
        final TbVisitorScheduleEntity tbVisitorScheduleEntity = tbVisitorScheduleJpaRepository.findAppId(appId);
        return tbVisitorScheduleServiceMapper.mapTbVisitorScheduleEntityToTbVisitorSchedule(tbVisitorScheduleEntity);
    }

    @Override
    public List<TbVisitorSchedule> findAll() {
        final Iterable<TbVisitorScheduleEntity> entities = tbVisitorScheduleJpaRepository.findAll();
        final List<TbVisitorSchedule> beans = new ArrayList<>();
        for (final TbVisitorScheduleEntity tbVisitorScheduleEntity : entities) {
            beans.add(tbVisitorScheduleServiceMapper.mapTbVisitorScheduleEntityToTbVisitorSchedule(tbVisitorScheduleEntity));
        }
        return beans;
    }

    @Override
    public TbVisitorSchedule create(final TbVisitorSchedule tbVisitorSchedule, final ScrutinyLableValueDTO lableValueDTO) {

        final TbVisitorScheduleEntity tbVisitorScheduleEntity = new TbVisitorScheduleEntity();

        tbVisitorSchedule.setOrgid(new Long(UserSession.getCurrent().getOrganisation().getOrgid()));
        tbVisitorSchedule.setUserId(UserSession.getCurrent().getEmployee().getEmpId());
        tbVisitorSchedule
                .setVisDate(UtilityService.convertStringDateToDateFormat(tbVisitorSchedule.getDateTimeStr().substring(0, 10)));
        tbVisitorSchedule.setVisTime(tbVisitorSchedule.getDateTimeStr().substring(11, 19));

        tbVisitorScheduleServiceMapper.mapTbVisitorScheduleToTbVisitorScheduleEntity(tbVisitorSchedule, tbVisitorScheduleEntity);
        final TbVisitorScheduleEntity tbVisitorScheduleEntitySaved = tbVisitorScheduleJpaRepository.save(tbVisitorScheduleEntity);

        saveScrutinyValue(lableValueDTO);

        return tbVisitorScheduleServiceMapper.mapTbVisitorScheduleEntityToTbVisitorSchedule(tbVisitorScheduleEntitySaved);
    }

    @Override
    public TbVisitorSchedule update(final TbVisitorSchedule tbVisitorSchedule) {

        final TbVisitorScheduleEntity tbVisitorScheduleEntity = new TbVisitorScheduleEntity();
        tbVisitorScheduleServiceMapper.mapTbVisitorScheduleToTbVisitorScheduleEntity(tbVisitorSchedule, tbVisitorScheduleEntity);
        final TbVisitorScheduleEntity tbVisitorScheduleEntitySaved = tbVisitorScheduleJpaRepository.save(tbVisitorScheduleEntity);
        return tbVisitorScheduleServiceMapper.mapTbVisitorScheduleEntityToTbVisitorSchedule(tbVisitorScheduleEntitySaved);
    }

    public TbVisitorScheduleJpaRepository getTbVisitorScheduleJpaRepository() {
        return tbVisitorScheduleJpaRepository;
    }

    public void setTbVisitorScheduleJpaRepository(final TbVisitorScheduleJpaRepository tbVisitorScheduleJpaRepository) {
        this.tbVisitorScheduleJpaRepository = tbVisitorScheduleJpaRepository;
    }

    public TbVisitorScheduleServiceMapper getTbVisitorScheduleServiceMapper() {
        return tbVisitorScheduleServiceMapper;
    }

    public void setTbVisitorScheduleServiceMapper(final TbVisitorScheduleServiceMapper tbVisitorScheduleServiceMapper) {
        this.tbVisitorScheduleServiceMapper = tbVisitorScheduleServiceMapper;
    }
    @Override
    public List<TbVisitorSchedule> findAllByInspectionDate(Date date,Long orgid) {
        final Iterable<TbVisitorScheduleEntity> entities = tbVisitorScheduleJpaRepository.findAllByInspectionDate(date,orgid);
        final List<TbVisitorSchedule> beans = new ArrayList<>();
        for (final TbVisitorScheduleEntity tbVisitorScheduleEntity : entities) {
            beans.add(tbVisitorScheduleServiceMapper.mapTbVisitorScheduleEntityToTbVisitorSchedule(tbVisitorScheduleEntity));
        }
        return beans;
    }
    
    
    @Override
	@Transactional
	public String getConnectionDetailsByAppIdAndOrgId(Long applicationId, ServiceMaster serviceMaster, Long orgId){

    	String connectionNumber = null;
        try {
            CFCCommonService dynamicServiceInstance = ApplicationContextProvider.getApplicationContext().getBean("NewWaterConnection",
            		CFCCommonService.class);
            connectionNumber = dynamicServiceInstance.getConnectionDetailsByAppIdAndService(applicationId, orgId,  
            		serviceMaster.getSmShortdesc());
        } catch (LinkageError | Exception e) {
            throw new FrameworkException("Exception in fetching bill for Adjustment entry for Department: " + serviceMaster.getTbDepartment().getDpDeptcode(), e);
        }
	return connectionNumber;
		
	}

}
