/*
 * Created on 6 Aug 2015 ( Time 16:35:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.mapper;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;

import com.abm.mainet.common.domain.TbComparentDetEntity;
import com.abm.mainet.common.domain.TbComparentMasEntity;
import com.abm.mainet.common.master.dto.TbComparentDet;
import com.abm.mainet.common.utility.AbstractServiceMapper;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class TbComparentDetServiceMapper extends AbstractServiceMapper {

    /**
     * ModelMapper : bean to bean mapping library.
     */
    private ModelMapper modelMapper;

    /**
     * Constructor.
     */
    public TbComparentDetServiceMapper() {
        modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
    }

    /**
     * Mapping from 'TbComparentDetEntity' to 'TbComparentDet'
     * @param tbComparentDetEntity
     */
    public TbComparentDet mapTbComparentDetEntityToTbComparentDet(final TbComparentDetEntity tbComparentDetEntity) {
        if (tbComparentDetEntity == null) {
            return null;
        }

        // --- Generic mapping
        final TbComparentDet tbComparentDet = map(tbComparentDetEntity, TbComparentDet.class);

        // --- Link mapping ( link to TbComparentDet )
        if (tbComparentDetEntity.getTbComparentDet() != null) {
            tbComparentDet.setParentId(tbComparentDetEntity.getTbComparentDet().getCodId());
        }
        // --- Link mapping ( link to TbComparentMas )
        if (tbComparentDetEntity.getTbComparentMas() != null) {
            tbComparentDet.setComId(tbComparentDetEntity.getTbComparentMas().getComId());
        }
        return tbComparentDet;
    }

    /**
     * Mapping from 'TbComparentDet' to 'TbComparentDetEntity'
     * @param tbComparentDet
     * @param tbComparentDetEntity
     */
    public void mapTbComparentDetToTbComparentDetEntity(final TbComparentDet tbComparentDet,
            final TbComparentDetEntity tbComparentDetEntity) {
        if (tbComparentDet == null) {
            return;
        }

        // --- Generic mapping
        map(tbComparentDet, tbComparentDetEntity);

        // --- Link mapping ( link : tbComparentDet )
        if (hasLinkToTbComparentDet(tbComparentDet)) {
            final TbComparentDetEntity tbComparentDet1 = new TbComparentDetEntity();
            tbComparentDet1.setCodId(tbComparentDet.getParentId());
            tbComparentDetEntity.setTbComparentDet(tbComparentDet1);
        } else {
            tbComparentDetEntity.setTbComparentDet(null);
        }

        // --- Link mapping ( link : tbComparentDet )
        if (hasLinkToTbComparentMas(tbComparentDet)) {
            final TbComparentMasEntity tbComparentMas2 = new TbComparentMasEntity();
            tbComparentMas2.setComId(tbComparentDet.getComId());
            tbComparentDetEntity.setTbComparentMas(tbComparentMas2);
        } else {
            tbComparentDetEntity.setTbComparentMas(null);
        }

    }

    /**
     * Verify that TbComparentDet id is valid.
     * @param TbComparentDet TbComparentDet
     * @return boolean
     */
    private boolean hasLinkToTbComparentDet(final TbComparentDet tbComparentDet) {
        if (tbComparentDet.getParentId() != null) {
            return true;
        }
        return false;
    }

    /**
     * Verify that TbComparentMas id is valid.
     * @param TbComparentMas TbComparentMas
     * @return boolean
     */
    private boolean hasLinkToTbComparentMas(final TbComparentDet tbComparentDet) {
        if (tbComparentDet.getComId() != null) {
            return true;
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected ModelMapper getModelMapper() {
        return modelMapper;
    }

    protected void setModelMapper(final ModelMapper modelMapper) {
        this.modelMapper = modelMapper;
    }

}