/*
 * Created on 27 Jul 2015 ( Time 17:56:33 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.service;

import java.util.List;

import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.Employee;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.dto.TbDepartmentDTO;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbDeptLocation;

/**
 * Business Service Interface for entity TbDepartment.
 */
public interface TbDepartmentService {

    /**
     * Loads an entity from the database using its Primary Key
     *
     * @param dpDeptid
     * @return entity
     */
    TbDepartment findById(Long dpDeptid);

    /**
     * Loads all entities.
     *
     * @return all entities
     */
    List<TbDepartment> findAll();

    /**
     * Saves the given entity in the database (create or update)
     *
     * @param entity
     * @return entity
     */
    TbDepartment save(TbDepartment entity);

    /**
     * Updates the given entity in the database
     *
     * @param entity
     * @return
     */
    TbDepartment update(TbDepartment entity);

    /**
     * Creates the given entity in the database
     *
     * @param entity
     * @return
     */
    TbDepartment create(TbDepartment entity, Long orgId);

    /**
     * Deletes an entity using its Primary Key
     *
     * @param dpDeptid
     */
    void delete(Long dpDeptid);

    /**
     * Load All entities from ComparamDet
     *
     * @return
     */

    List<TbDepartment> findActualDepartment();

    /**
     *
     * @param dpDeptid
     * @param langId
     * @return
     */
    List<TbDepartment> findByOrgId(Long orgId, Long langId);

    /**
     * @param department
     * @param deptCode
     * @return
     */
    List<TbDepartment> searchDeptData(Long department, String deptCode);

    /**
     * @param deptName
     * @param organisation
     * @return
     */
    int validateDepartment(String deptName, Organisation organisation);

    String getDepartmentNameByDeptCode(String deptCode, Long langId);

    String findDepartmentShortCodeByDeptId(long deptId, long orgId);
    
    String findDepartmentDescByDeptId(long deptId);

    String findDepartmentPrefixName(long deptId, long orgId);

    /**
     * @param l
     * @param dpPrefix
     * @param deptCode
     * @return
     */
    String isDpPrefixTypeHerarchy(String deptCode, String dpPrefix);

    List<TbDepartment> findDepartmentWithPrefix(long orgId);

    public List<Object[]> findAllDepartmentByOrganization(long orgId,
            String isActive);

    List<TbDeptLocation> getDepartmentData(Long locId, Long orgId);

    List<TbDepartment> finDeptListForLocation(Long locId);

    Department findDepartmentById(Long dpDeptid);

    String checkDepartmentActive(long deptId, Long orgId);

    public Department findDepartmentByCode(String dpDeptCode);

    /**
     * Loads all active entities.
     * @return all active entities
     */
    List<TbDepartment> findAllActive(Long orgId);

    TbDepartment findDeptByCode(Long orgId, String status, String code);

    List<TbDepartment> findNonMappedDept(List<Long> dpDeptIds, Long orgId);

    List<TbDepartment> findMappedDepartments(Long orgId);

    List<TbDepartment> findActualDept(Long orgId);

    /**
     * @param deptCode
     * @return
     */
    Long getDepartmentIdByDeptCode(String deptCode);

    public Department createDefaultDepartment(Long empId,
            final TbDepartmentDTO tbDepartmentDto, Long orgId, int languageId);

    /**
     * find all active and inactive mapped departments
     * @param orgId
     * @return
     */
    List<TbDepartment> findAllMappedDepartments(Long orgId);


	List<TbDepartment> findByEmpId(Long empId, Long orgId);

	List<TbDepartment> findAllDept(Long orgId);

	List<TbDepartment> getAllDeptBasedOnPrefix();
}
