/*
 * Created on 18 Dec 2015 ( Time 18:50:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.Employee;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.master.dto.DeptDto;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbServicesMst;
import com.abm.mainet.common.master.service.DepartmentService;
import com.abm.mainet.common.master.service.SysmodfunctionService;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.master.service.TbServicesMstService;
import com.abm.mainet.common.master.ui.model.TbServicesMstResponse;
import com.abm.mainet.common.master.ui.validator.ServiceRuleDefinitionValidator;
import com.abm.mainet.common.service.TbComparamDetService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;

@Controller
@RequestMapping("/ServiceMaster.html")
public class TbServicesMstController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "tbServicesMst";
	private static final String MAIN_LIST_NAME = "list";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM = "tbServicesMst/form";
	private static final String JSP_FORM_VIEW = "tbServicesMst/formView";
	private static final String JSP_LIST = "tbServicesMst/list";

	// --- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE = "ServiceMaster.html?create";
	private static final String SAVE_ACTION_UPDATE = "ServiceMaster.html?update";

	// --- Main entity service
	@Resource
	private TbServicesMstService tbServicesMstService; // Injected by Spring
	// --- Other service(s)
	@Resource
	private TbComparamDetService tbComparamDetService; // Injected by Spring
	@Resource
	private TbDepartmentService tbDepartmentService; // Injected by Spring
	@Resource
	private SysmodfunctionService sysmodfunctionService;

	@Resource
	private DepartmentService departmentService;

	// --------------------------------------------------------------------------------------
	private List<TbServicesMst> serviceList = new ArrayList<>();
	private String shortdesc;
	private Long servType;
	private Long printResponse;
	private List<TbDepartment> deptList = Collections.emptyList();
	private List<TbServicesMst> serviceMasList = Collections.emptyList();
	// private List<Department> childDeptLists = Collections.emptyList();

	/**
	 * Default constructor
	 */
	public TbServicesMstController() {
		super(TbServicesMstController.class, MAIN_ENTITY_NAME);
		log("TbServicesMstController created.");
	}

	/**
	 * Populates the Spring MVC model with the given entity and eventually other
	 * useful data
	 * 
	 * @param model
	 * @param tbServicesMst
	 */
	private void populateModel(final Model model, final TbServicesMst tbServicesMst, final FormMode formMode) {
		// --- Main entity
		final List<LookUp> bptPrefixList = CommonMasterUtility.getListLookup(PrefixConstants.LookUp.BPT,
				UserSession.getCurrent().getOrganisation());
		model.addAttribute(MainetConstants.CommonMasterUi.BPT_PREFIX_LIST, bptPrefixList);
		model.addAttribute(MAIN_ENTITY_NAME, tbServicesMst);
		if (formMode == FormMode.CREATE) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
		} else if (formMode == FormMode.UPDATE) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
		} else if (formMode == FormMode.VIEW) {
			model.addAttribute(MODE, MODE_VIEW);
		}
	}

	// --------------------------------------------------------------------------------------
	// Request mapping
	// --------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of TbServicesMst found in the database
	 * 
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(final Model model) {
		serviceList.clear();
		final int langId = UserSession.getCurrent().getLanguageId();
		final Organisation org = UserSession.getCurrent().getOrganisation();
		helpDoc("ServiceMaster.html", model);
		deptList = tbDepartmentService.findByOrgId(org.getOrgid(), Long.valueOf(langId));
		serviceMasList = tbServicesMstService.findAllServiceListByOrgId(org.getOrgid());
		serviceList = new ArrayList<>();

		final LookUp activenessLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
				PrefixConstants.IsLookUp.ACTIVE, PrefixConstants.LookUp.ACN, langId, org);
		final Long activenessLookupId = activenessLookup.getLookUpId();
		model.addAttribute(MainetConstants.CommonMasterUi.ACTIVE_ID, activenessLookupId);
		model.addAttribute(MainetConstants.CommonMasterUi.DEPT_LIST, deptList);
		model.addAttribute(MainetConstants.CommonMasterUi.SERVICE_MAS_LIST, serviceMasList);
		model.addAttribute(MainetConstants.CommonMasterUi.IS_DEFAULT_ORG, org.getDefaultStatus());
		model.addAttribute(MainetConstants.CommonMasterUi.LANGUAGE_ID, langId);
		return JSP_LIST;
	}

	@RequestMapping(params = "refreshServiceData")
	public @ResponseBody List<TbServicesMst> refreshServiceData(final Model model,
			@RequestParam("deptId") final Long deptId) {
		final Organisation org = UserSession.getCurrent().getOrganisation();
		final List<TbServicesMst> serviceMstList = tbServicesMstService.findByDeptId(deptId, org.getOrgid());
		return serviceMstList;
	}


	/* Defect #34893 */
	@RequestMapping(params = "getchilddept", method = RequestMethod.POST)
	public @ResponseBody List<DeptDto> getchilddept(@RequestParam("deptId") final Long deptId) {
		final Organisation org = UserSession.getCurrent().getOrganisation();

		String deptCode = departmentService.getDeptCode(deptId);

		List<Department> childDeptLists = null;
		List<DeptDto> childdepartment = new ArrayList<>();
		if (deptCode.contains("CFC")) {
			childDeptLists = departmentService.getDepartments(org.getOrgid(), MainetConstants.FlagY);

			childDeptLists.forEach(list -> {
				DeptDto deptDto = new DeptDto();
				deptDto.setDpDeptid(list.getDpDeptid());
				deptDto.setDpDeptdesc(list.getDpDeptdesc());
				childdepartment.add(deptDto);
			});
		}

		return childdepartment;
	}

	

	@RequestMapping(params = "searchServiceMst")
	public @ResponseBody int searchServiceMst(final Model model, @RequestParam("deptId") final Long deptId,
			@RequestParam("serviceId") Long serviceId) {
		serviceList.clear();
		final Organisation org = UserSession.getCurrent().getOrganisation();
		if (serviceId.intValue() == -2) {
			serviceId = null;
		}
		// --- Search the entity by its primary key and stores it in the model
		serviceList = tbServicesMstService.findByDeptServiceId(deptId, serviceId, org.getOrgid());
		return serviceList.size();

	}

	@RequestMapping(params = "getGridData")
	public @ResponseBody TbServicesMstResponse gridData(final HttpServletRequest request, final Model model) {
		final TbServicesMstResponse response = new TbServicesMstResponse();
		final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
		response.setRows(serviceList);
		response.setTotal(serviceList.size());
		response.setRecords(serviceList.size());
		response.setPage(page);
		model.addAttribute(MAIN_LIST_NAME, serviceList);
		return response;
	}

	/**
	 * Shows a form page in order to create a new TbServicesMst
	 * 
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping(params = "form")
	public String formForCreate(final Model model) {
		// --- Populates the model with a new instance
		final TbServicesMst tbServicesMst = new TbServicesMst();
		final int langId = UserSession.getCurrent().getLanguageId();
		final Organisation org = UserSession.getCurrent().getOrganisation();
		populatePrefixData(model);
		deptList = tbDepartmentService.findByOrgId(org.getOrgid(), Long.valueOf(langId));
		final List<LookUp> acnPrefixList = CommonMasterUtility.getListLookup(PrefixConstants.LookUp.ACN, org);

		// List<Department> dpts = departmentService.getDepartments(org.getOrgid(),
		// MainetConstants.FlagY);

		model.addAttribute(MainetConstants.CommonMasterUi.DEPT_LIST, deptList);
		model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbServicesMst);
		model.addAttribute(MainetConstants.CommonMasterUi.LANGUAGE_ID, langId);
		model.addAttribute(MainetConstants.CommonMasterUi.ACN_PREFIX_LIST, acnPrefixList);

		populateModel(model, tbServicesMst, FormMode.CREATE);
		return JSP_FORM;
	}

	/*
	 * @RequestMapping(params = "checkForTransactionExist") public @ResponseBody int
	 * checkForTransactionExist(final Model model, @RequestParam("serviceId") final
	 * Long serviceId) { final Organisation org =
	 * UserSession.getCurrent().getOrganisation(); // --- Search the entity by its
	 * primary key and stores it in the model final int counter =
	 * cfcApplicationMstService.checkForTransactionExist(serviceId, org.getOrgid());
	 * return counter; }
	 */
	/**
	 * Shows a form page in order to update an existing TbServicesMst
	 * 
	 * @param model       Spring MVC model
	 * @param smServiceId primary key element
	 * @return
	 */
	@RequestMapping(params = "formForUpdate")
	public String formForUpdate(final Model model, @RequestParam("serviceId") final Long smServiceId,
			@RequestParam("mode") final String mode) {
		String returnedPage = null;
		// --- Search the entity by its primary key and stores it in the model

		final int langId = UserSession.getCurrent().getLanguageId();
		final Organisation org = UserSession.getCurrent().getOrganisation();

		final TbServicesMst tbServicesMst = tbServicesMstService.findById(smServiceId);

		deptList = tbDepartmentService.findByOrgId(org.getOrgid(), Long.valueOf(langId));
		/* Defect #34893 */
		List<Department> childDeptLists = new ArrayList<Department>();
		if (tbServicesMst.getTbDepartment().getDpDeptcode().contains("CFC")) {
			childDeptLists = departmentService.getDepartments(org.getOrgid(), MainetConstants.FlagY);
		}

		// final int counter =
		// cfcApplicationMstService.checkForTransactionExist(smServiceId,
		// org.getOrgid());
		final List<LookUp> acnPrefixList = CommonMasterUtility.getListLookup(PrefixConstants.LookUp.ACN, org);
		final LookUp activenessLookup = CommonMasterUtility.getLookUpFromPrefixLookUpValue(
				PrefixConstants.IsLookUp.ACTIVE, PrefixConstants.LookUp.ACN, langId, org);
		final Long activenessLookupId = activenessLookup.getLookUpId();
		/*
		 * final List<LookUp> utsPrefixList =
		 * CommonMasterUtility.getListLookup(PrefixConstants.UTS, org);
		 * model.addAttribute(MainetConstants.CommonMasterUi.UTS_PREFIX_LIST,
		 * utsPrefixList);
		 */
		model.addAttribute(MainetConstants.CommonMasterUi.ACN_PREFIX_LIST, acnPrefixList);
		model.addAttribute(MainetConstants.CommonMasterUi.DEPT_LIST, deptList);
		model.addAttribute(MainetConstants.CommonMasterUi.CHILD_DEPT_LIST, childDeptLists);
		model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbServicesMst);
		// model.addAttribute(MainetConstants.CommonMasterUi.TRANSACTION_COUNTER,
		// counter);
		model.addAttribute(MainetConstants.CommonMasterUi.LANGUAGE_ID, langId);
		model.addAttribute(MainetConstants.CommonMasterUi.ACTIVE_NESS_LOOK_UPID, activenessLookupId);
		populatePrefixData(model);
		if (MainetConstants.CommonMasterUi.EDIT.equals(mode)) {
			populateModel(model, tbServicesMst, FormMode.UPDATE);
			returnedPage = JSP_FORM;
		} else if (MainetConstants.CommonMasterUi.VIEWS.equals(mode)) {
			populateModel(model, tbServicesMst, FormMode.VIEW);
			returnedPage = JSP_FORM_VIEW;
		}
		return returnedPage;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param tbServicesMst      entity to be created
	 * @param bindingResult      Spring MVC binding result
	 * @param model              Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(params = "create") // GET or POST
	public ModelAndView create(@Validated final TbServicesMst tbServicesMst, final BindingResult bindingResult,
			final Model model, final HttpServletRequest httpServletRequest) {

		tbServicesMst.setSmServiceName(tbServicesMst.getSmServiceName().trim());
		tbServicesMst.setSmServiceNameMar(tbServicesMst.getSmServiceNameMar().trim());

		final ServiceRuleDefinitionValidator validator = new ServiceRuleDefinitionValidator();
		validator.validate(tbServicesMst, bindingResult);

		final Long orgId = Long.valueOf(UserSession.getCurrent().getOrganisation().getOrgid());
		ApplicationSession appSession = ApplicationSession.getInstance();
		final Employee employee = UserSession.getCurrent().getEmployee();
		final int langId = UserSession.getCurrent().getLanguageId();

		if (!StringUtils.isEmpty(tbServicesMst.getSmServiceName())) {
			final Long serviceId = tbServicesMstService.checkForDuplicateService(tbServicesMst.getSmServiceName(),
					orgId);
			if (serviceId != null) {
				bindingResult.addError(
						new ObjectError("smServiceName", appSession.getMessage("service.error.duplicate.serviceName")));
			}
		}

		final ServiceMaster servicesMstEntity = tbServicesMstService
				.findShortCodeByOrgId(tbServicesMst.getSmShortdesc().toUpperCase(), orgId);
		if (servicesMstEntity != null) {
			validator.validate(tbServicesMst, bindingResult);
			bindingResult
					.addError(new ObjectError("smShortdesc", appSession.getMessage("service.error.shortDescExist")));
		}

		if (!bindingResult.hasErrors()) {

			tbServicesMst.setOrgid(orgId);
			tbServicesMst.setUserId(employee.getEmpId());
			tbServicesMst.setLangId(Long.valueOf(langId));
			tbServicesMst.setLmoddate(new Date());
			tbServicesMst.setIpMac(UserSession.getCurrent().getEmployee().getEmppiservername());
			final TbServicesMst tbServicesMstCreated = tbServicesMstService.create(tbServicesMst);
			model.addAttribute(MAIN_ENTITY_NAME, tbServicesMstCreated);
			model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbServicesMst);
			model.addAttribute(MainetConstants.CommonConstants.SUCCESS_URL, "ServiceMaster.html");
			return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
					MainetConstants.COMMON_STATUS.SUCCESS);

		} else {
			final List<LookUp> acnPrefixList = CommonMasterUtility.getListLookup(PrefixConstants.LookUp.ACN,
					UserSession.getCurrent().getOrganisation());
			model.addAttribute(MainetConstants.CommonMasterUi.ACN_PREFIX_LIST, acnPrefixList);
			model.addAttribute(MainetConstants.CommonMasterUi.DEPT_LIST, deptList);
			model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbServicesMst);
			model.addAttribute(MainetConstants.CommonMasterUi.LANGUAGE_ID, langId);
			populatePrefixData(model);

			populateModel(model, tbServicesMst, FormMode.CREATE);
			model.addAttribute(BindingResult.MODEL_KEY_PREFIX + MainetConstants.FORM_NAME, bindingResult);
			return new ModelAndView(JSP_FORM);
		}

	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param tbServicesMst      entity to be updated
	 * @param bindingResult      Spring MVC binding result
	 * @param model              Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(params = "update") // GET or POST
	public ModelAndView update(final TbServicesMst tbServicesMst, final BindingResult bindingResult, final Model model,
			final HttpServletRequest httpServletRequest) {
		final Organisation org = UserSession.getCurrent().getOrganisation();
		final Employee employee = UserSession.getCurrent().getEmployee();
		final int langId = UserSession.getCurrent().getLanguageId();
		ApplicationSession appSession = ApplicationSession.getInstance();
		final Long orgId = Long.valueOf(UserSession.getCurrent().getOrganisation().getOrgid());

		if (StringUtils.isEmpty(tbServicesMst.getSmShortdesc()) && !StringUtils.isEmpty(shortdesc)) {
			tbServicesMst.setSmShortdesc(shortdesc);
		}

		if ((tbServicesMst.getSmServType() == null) && (servType != null)) {
			tbServicesMst.setSmServType(servType);
		}

		if ((tbServicesMst.getSmPrintRespons() == null) && (printResponse != null)) {
			tbServicesMst.setSmPrintRespons(printResponse);
		}

		final ServiceRuleDefinitionValidator validator = new ServiceRuleDefinitionValidator();
		validator.validate(tbServicesMst, bindingResult);

		if (!StringUtils.isEmpty(tbServicesMst.getSmServiceName())) {
			final Long serviceId = tbServicesMstService.checkForDuplicateService(tbServicesMst.getSmServiceName(),
					orgId);
			if (serviceId != null) {
				if (!serviceId.equals(tbServicesMst.getSmServiceId())) {
					bindingResult.addError(new ObjectError("smServiceName",
							appSession.getMessage("service.error.duplicate.serviceName")));
				}
			}
		}

		if (!bindingResult.hasErrors()) {
			tbServicesMst.setOrgid(org.getOrgid());
			tbServicesMst.setUpdatedBy(employee.getEmpId());
			tbServicesMst.setLangId(Long.valueOf(langId));
			tbServicesMst.setUpdatedDate(new Date());
			tbServicesMst.setIpMacUpd(UserSession.getCurrent().getEmployee().getEmppiservername());
			// --- Perform database operations
			final TbServicesMst tbServicesMstSaved = tbServicesMstService.update(tbServicesMst);
			model.addAttribute(MAIN_ENTITY_NAME, tbServicesMstSaved);
			return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
					MainetConstants.COMMON_STATUS.SUCCESS);

		} else {
			log("Action 'update' : binding errors");
			final List<LookUp> acnPrefixList = CommonMasterUtility.getListLookup(PrefixConstants.LookUp.ACN, org);
			model.addAttribute(MainetConstants.CommonMasterUi.ACN_PREFIX_LIST, acnPrefixList);
			model.addAttribute(MainetConstants.CommonMasterUi.DEPT_LIST, deptList);
			model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbServicesMst);
			model.addAttribute(MainetConstants.CommonMasterUi.LANGUAGE_ID, langId);
			populatePrefixData(model);
			populateModel(model, tbServicesMst, FormMode.UPDATE);
			model.addAttribute(BindingResult.MODEL_KEY_PREFIX + MainetConstants.FORM_NAME, bindingResult);
			return new ModelAndView(JSP_FORM);
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by
	 * 'http redirect'<br>
	 * 
	 * @param redirectAttributes
	 * @param smServiceId        primary key element
	 * @return
	 */
	@RequestMapping(params = "delete") // GET or POST
	public String delete(@RequestParam("serviceId") final Long smServiceId) {
		tbServicesMstService.delete(smServiceId);
		return JSP_LIST;
	}

	/**
	 * @param model
	 */
	private void populatePrefixData(final Model model) {
		final Organisation org = UserSession.getCurrent().getOrganisation();

		/*
		 * final List<LookUp> styPrefixData =
		 * CommonMasterUtility.getLookUps(MainetConstants.CommonMasterUi.STY, org);
		 */
		/*
		 * final List<LookUp> sptPrefixData =
		 * CommonMasterUtility.getLookUps(MainetConstants.CommonMasterUi.SPT, org);
		 */
		final List<LookUp> prnPrefixData = CommonMasterUtility.getLookUps(MainetConstants.CommonMasterUi.PRN, org);
		final List<LookUp> acnPrefixData = CommonMasterUtility.getLookUps(PrefixConstants.LookUp.ACN, org);
		final List<LookUp> aplPrefixData = CommonMasterUtility.getLookUps(MainetConstants.NewWaterServiceConstants.APL,
				org);
		final List<LookUp> ackPrefixData = CommonMasterUtility.getLookUps(MainetConstants.CommonMasterUi.ACK, org);
		final List<LookUp> utsPrefixList = CommonMasterUtility.getListLookup(PrefixConstants.UTS, org);

		model.addAttribute(MainetConstants.CommonMasterUi.UTS_PREFIX_LIST, utsPrefixList);
		/*
		 * model.addAttribute(MainetConstants.CommonMasterUi.STY_PREFIX_DATA,
		 * styPrefixData);
		 */
		/*
		 * model.addAttribute(MainetConstants.CommonMasterUi.SPT_PREFIX_DATA,
		 * sptPrefixData);
		 */
		model.addAttribute(MainetConstants.CommonMasterUi.PRN_PRE_FIX_DATA, prnPrefixData);
		model.addAttribute(MainetConstants.CommonMasterUi.ACNPRE_FIXDATA, acnPrefixData);
		model.addAttribute(MainetConstants.CommonMasterUi.APL_PRE_FIX_DATA, aplPrefixData);
		model.addAttribute(MainetConstants.CommonMasterUi.ACK_PREFIX_DATA, ackPrefixData);
	}

	@RequestMapping(params = "checkShortCode")
	public @ResponseBody int checkShortCode(@RequestParam("shortcode") final String shortcode,
			@RequestParam("orgid") final Long orgid) {
		int status = 1;
		final ServiceMaster servicesMstEntity = tbServicesMstService.findShortCodeByOrgId(shortcode.toUpperCase(),
				orgid);
		if (servicesMstEntity == null) {
			status = 0;
		}
		return status;
	}
	
	@RequestMapping(params = "getServiceListForRamarkMast")
	public @ResponseBody List<TbServicesMst> getServiceDataForRamarkMast(final Model model,
			@RequestParam("deptId") final Long deptId) {
		final Organisation org = UserSession.getCurrent().getOrganisation();
		final List<TbServicesMst> serviceMstList = tbServicesMstService.findALlActiveServiceByDeptId(deptId, org.getOrgid());
		return serviceMstList;
	}

}
