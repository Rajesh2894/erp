/*
 * Created on 27 Jul 2015 ( Time 17:55:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.DeptOrgMap;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.master.dto.TbComparamDet;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbDeporgMap;
import com.abm.mainet.common.master.dto.TbOrganisation;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.master.service.TbDeporgMapService;
import com.abm.mainet.common.master.service.TbOrganisationService;
import com.abm.mainet.common.master.ui.model.TbDepartmentResponse;
import com.abm.mainet.common.master.ui.model.TbDeporgMapResponse;
import com.abm.mainet.common.service.TbComparamDetService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.Message;
import com.abm.mainet.common.utility.MessageType;
import com.abm.mainet.common.utility.UserSession;

//--- Common classes
//--- Entities
//--- Services
//--- List Items

/**
 * Spring MVC controller for 'TbDepartment' management.
 */
@Controller
@RequestMapping("/Department.html")
public class TbDepartmentController extends AbstractController {

    // --- Variables names ( to be used in JSP with Expression Language )
    private static final String MAIN_ENTITY_NAME = "tbDepartment";
    private static final String CHILD_ENTITY_NAME = "tbDeporgMap";
    private static final String MAIN_LIST_NAME = "list";

    // --- JSP pages names ( View name in the MVC model )
    private static final String JSP_FORM = "tbDepartment/form";
    private static final String JSP_LIST = "tbDepartment/list";
    private static final String JSP_VIEW = "tbDepartment/view";

    private static final String JSP_CHILD_FORM = "tbDepartment/orgform";
    // --- SAVE ACTION ( in the HTML form )
    private static final String SAVE_ACTION_CREATE = "Department.html?create";
    private static final String SAVE_ACTION_UPDATE = "Department.html?update";

    private static final String ISCHECKEDNO = "N";
    private static final String ISCHECKEDYES = "Y";

    private static final String ISDEFAULTORG = "Y";

    // --- Main entity service
    @Resource
    private TbDepartmentService tbDepartmentService;
    // --- Other service(s)
    @Resource
    private TbComparamDetService tbComparamDetService;

    @Resource
    private TbDeporgMapService tbDeporgMapService;

    @Resource
    private TbOrganisationService tbOrganisationService;

    List<TbDeporgMap> tbDeporgMapList = new ArrayList<>();
    TbDepartment departmentMaster = null;
    List<TbDepartment> deptList = new ArrayList<>();
    String prefix = null;
    String deptCode = null;

    // --------------------------------------------------------------------------------------
    /**
     * Default constructor
     */
    public TbDepartmentController() {
        super(TbDepartmentController.class, MAIN_ENTITY_NAME);
        log("TbDepartmentController created.");
    }

    // --------------------------------------------------------------------------------------
    // Spring MVC model management
    // --------------------------------------------------------------------------------------

    /**
     * Populates the Spring MVC model with the given entity and eventually other useful data
     * @param model
     * @param tbDepartment
     */
    private void populateModel(final Model model, final TbDepartment tbDepartment, final FormMode formMode) {
        // --- Main entity
        model.addAttribute(MAIN_ENTITY_NAME, tbDepartment);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbDepartment);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
        } else if (formMode == FormMode.VIEW) {
            model.addAttribute(MODE, MODE_VIEW);
        }
    }

    private void populateChildModel(final Model model, final TbDeporgMap tbDeporgMap, final FormMode formMode) {
        // --- Main entity
        model.addAttribute(CHILD_ENTITY_NAME, tbDeporgMap);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbDeporgMap);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
        }
    }

    // --------------------------------------------------------------------------------------
    // Request mapping
    // --------------------------------------------------------------------------------------
    /**
     * Shows a list with all the occurrences of TbDepartment found in the database
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping()
    public String list(final Model model) {
        log("Action 'list'");
        deptList = new ArrayList<>();
        helpDoc("Department.html", model);
        final List<TbDepartment> departmentlist = tbDepartmentService.findAll();
        model.addAttribute("departmentlist", departmentlist);
        return JSP_LIST;
    }

    /**
     * Shows a form page in order to create a new TbDepartment
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping(params = "form")
    public String formForCreate(final Model model) {
        log("Action 'formForCreate'");
        // --- Populates the model with a new instance

        final TbDepartment tbDepartment = new TbDepartment();
        tbDeporgMapList = new ArrayList<>();
        // final List<TbComparamDet> compamDetList = tbDepartmentService.findAllComparamDetData();

        final List<TbOrganisation> organisationList = tbOrganisationService.findAll();
        Long orgId = null;

        for (final TbOrganisation orgData : organisationList) {
            if (ISDEFAULTORG.equals(orgData.getDefaultStatus())) {
                orgId = orgData.getOrgid();
            }
        }
        final List<TbComparamDet> compamDetList = tbComparamDetService.findAllComparamDetData(orgId);

        tbDepartment.setStatus(MainetConstants.STATUS.ACTIVE);
        model.addAttribute("compamDetList", compamDetList);
        populateModel(model, tbDepartment, FormMode.CREATE);

        return JSP_FORM;
    }

    /**
     * Shows a form page in order to update an existing TbDepartment
     * @param model Spring MVC model
     * @param dpDeptid primary key element
     * @return
     */
    @RequestMapping(params = "formForUpdate")
    public String formForUpdate(final Model model, @RequestParam("dpDeptid") final Long dpDeptid) {
        log("Action 'formForUpdate'");
        // --- Search the entity by its primary key and stores it in the model
        final TbDepartment tbDepartment = tbDepartmentService.findById(dpDeptid);
        departmentMaster = tbDepartment;
        final int transactionCount = checkIfDeptOrgMapExists(dpDeptid);
        model.addAttribute("transactionCount", transactionCount);
        populateModel(model, tbDepartment, FormMode.UPDATE);
        return JSP_FORM;
    }

    /**
     * 'CREATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbDepartment entity to be created
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "create") // GET or POST
    public ModelAndView create(@Valid final TbDepartment tbDepartment, final BindingResult bindingResult, final Model model,
            final HttpServletRequest httpServletRequest) {
        log("Action 'create'");
        prefix = tbDepartment.getDpPrefix().toUpperCase();
        deptCode = tbDepartment.getDpDeptcode().toUpperCase();

        tbDepartment.setUserId(UserSession.getCurrent().getEmployee().getEmpId());
        tbDepartment.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
        tbDepartment.setLmoddate(new Date());
        tbDepartment.setDpPrefix(prefix);
        tbDepartment.setDpDeptcode(deptCode);

        tbDepartment.setDpDeptdesc(tbDepartment.getDpDeptdesc().trim());
        tbDepartment.setDpNameMar(tbDepartment.getDpNameMar().trim());
        tbDepartment.setDpDeptcode(tbDepartment.getDpDeptcode().trim());
        tbDepartment.setLgIpMac(UserSession.getCurrent().getEmployee().getEmppiservername());

        if (tbDepartment.getDpDeptcode().length() < 2) {
            bindingResult.addError(new ObjectError("dpDeptcode", "Please enter short code of atleast two characters"));
        }

        if (!prefix.equals(MainetConstants.BLANK) && !deptCode.equals(MainetConstants.BLANK)) {
            final String result = tbDepartmentService.isDpPrefixTypeHerarchy(tbDepartment.getDpDeptcode(),
                    tbDepartment.getDpPrefix());
            if (!result.equals(MainetConstants.BLANK) && !result.equalsIgnoreCase(MainetConstants.FlagH)) {
                bindingResult.addError(new ObjectError("dpPrefix", prefix + " is not a hierarchy prefix"));
            }
            if (result.equals(MainetConstants.BLANK)) {
                bindingResult.addError(new ObjectError("dpPrefix", prefix + " prefix does not exist"));
            }
        }
        if (!bindingResult.hasErrors()) {
            Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
            final TbDepartment tbDepartmentCreated = tbDepartmentService.create(tbDepartment, orgId);
            model.addAttribute(MAIN_ENTITY_NAME, tbDepartmentCreated);
            messageHelper.addMessage(model, new Message(MessageType.SUCCESS, MainetConstants.COMMON_STATUS.SAVE_OK));
            return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                    MainetConstants.COMMON_STATUS.SUCCESS);
        } else {
            model.addAttribute(BindingResult.MODEL_KEY_PREFIX + MainetConstants.FORM_NAME, bindingResult);
            populateModel(model, tbDepartment, FormMode.CREATE);
            return new ModelAndView(JSP_FORM);
        }
    }

    /**
     * 'UPDATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbDepartment entity to be updated
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "update") // GET or POST
    public ModelAndView update(@Valid final TbDepartment tbDepartment, final BindingResult bindingResult, final Model model,
            final HttpServletRequest httpServletRequest) {
        log("Action 'update'");
        prefix = tbDepartment.getDpPrefix().toUpperCase();
        deptCode = tbDepartment.getDpDeptcode().toUpperCase();

        tbDepartment.setDpPrefix(prefix);
        tbDepartment.setDpDeptcode(deptCode);
        tbDepartment.setLmoddate(departmentMaster.getLmoddate());
        tbDepartment.setLgIpMac(departmentMaster.getLgIpMac());
        tbDepartment.setUpdatedBy(UserSession.getCurrent().getEmployee().getEmpId());
        tbDepartment.setLgIpMacUpd(UserSession.getCurrent().getEmployee().getEmppiservername());

        if (!prefix.equals(null) && !prefix.equals(MainetConstants.BLANK) && !deptCode.equals(null)
                && !deptCode.equals(MainetConstants.BLANK)) {
            final String result = tbDepartmentService.isDpPrefixTypeHerarchy(deptCode, prefix);
            if (!result.equals(MainetConstants.BLANK) && !result.equalsIgnoreCase(MainetConstants.FlagH)) {
                bindingResult.addError(new ObjectError("dpPrefix", prefix + " is not a hierarchy prefix"));
            }
            if (result.equals(MainetConstants.BLANK)) {
                bindingResult.addError(new ObjectError("dpPrefix", prefix + " Prefix does not exist"));
            }
        }
        if (!bindingResult.hasErrors()) {

            final TbDepartment tbDepartmentSaved = tbDepartmentService.update(tbDepartment);
            model.addAttribute(MAIN_ENTITY_NAME, tbDepartmentSaved);
            // --- Set the result message
            messageHelper.addMessage(model, new Message(MessageType.SUCCESS, MainetConstants.COMMON_STATUS.SAVE_OK));
            log("Action 'update' : update done - redirect");
            return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                    MainetConstants.COMMON_STATUS.SUCCESS);
        } else {
            log("Action 'update' : binding errors");
            model.addAttribute(BindingResult.MODEL_KEY_PREFIX + MainetConstants.FORM_NAME, bindingResult);
            populateModel(model, tbDepartment, FormMode.UPDATE);
            return new ModelAndView(JSP_FORM);
        }
    }

    /**
     * 'DELETE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param redirectAttributes
     * @param dpDeptid primary key element
     * @return
     */
    @RequestMapping(params = "delete") // GET or POST
    public @ResponseBody String delete(@RequestParam("dpDeptid") final Long dpDeptid) {
        log("Action 'delete'");
        String message = "fail";
        tbDepartmentService.delete(dpDeptid);
        deptList.clear();
        final TbDepartment tbDep = tbDepartmentService.findById(dpDeptid);
        deptList.add(tbDep);
        message = MainetConstants.COMMON_STATUS.SUCCESS;

        return message;
    }

    @RequestMapping(params = "searchDeptData")
    public @ResponseBody String searchDeptData(final Model model, @RequestParam("department") final Long department,
            @RequestParam("deptCode") final String deptCode) {
        log("Action 'searchDeptData'");
        String errorMsg = null;
        deptList = tbDepartmentService.searchDeptData(department, deptCode);
        if (deptList.size() == 0) {
            errorMsg = "Department does not exist";
        }
        return errorMsg;
    }

    @RequestMapping(params = "getGridData")
    public @ResponseBody TbDepartmentResponse gridData(final HttpServletRequest request, final Model model) {
        log("Action 'Get grid Data'");
        deptList = tbDepartmentService.findAll();
        final TbDepartmentResponse response = new TbDepartmentResponse();
        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
        final int listSize = deptList.size();
        response.setRows(deptList);
        response.setTotal(listSize);
        response.setRecords(listSize);
        response.setPage(page);
        model.addAttribute(MAIN_LIST_NAME, deptList);
        return response;
    }

    @RequestMapping(params = "getChildGridData")
    public @ResponseBody TbDeporgMapResponse getChildGridData(final HttpServletRequest request, final Model model) {
        log("Action 'Get child grid Data'");

        final TbDeporgMapResponse response = new TbDeporgMapResponse();

        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));

        response.setRows(tbDeporgMapList);
        response.setTotal(tbDeporgMapList.size());
        response.setRecords(tbDeporgMapList.size());
        response.setPage(page);

        model.addAttribute(MAIN_LIST_NAME, tbDeporgMapList);

        return response;
    }

    @RequestMapping(params = "addChildForm")
    public String addChildForm(final Model model) {
        log("Action 'add Child Form'");
        // --- Populates the model with a new instance

        final TbOrganisation tbOrganisation = new TbOrganisation();
        final List<TbOrganisation> orgList = tbOrganisationService.findAll();

        model.addAttribute("organisationList", orgList);
        model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbOrganisation);
        model.addAttribute(MAIN_ENTITY_NAME, tbOrganisation);

        // populateChildModel( model, tbCustbanks, FormMode.CREATE);

        return JSP_CHILD_FORM;
    }

    @RequestMapping(params = "createChildData") // GET or POST
    public @ResponseBody String createChildData(@Valid final TbOrganisation tbOrganisation, final BindingResult bindingResult,
            final Model model,
            final RedirectAttributes redirectAttributes, final HttpServletRequest httpServletRequest) {
        log("Action 'create child data'");

        final TbDeporgMap tbDeporgMap = new TbDeporgMap();
        if (!bindingResult.hasErrors()) {
            int counter = 0;
            if (tbDeporgMapList.size() != 0) {
                for (final TbDeporgMap tbDeporgData : tbDeporgMapList) {
                    if (tbDeporgData.getOrgid().longValue() == tbOrganisation.getOrgid().longValue()) {
                        counter++;
                        break;

                    } else {
                        counter = 0;
                    }
                }

                if (counter == 0) {
                    tbDeporgMap.setOrgid(tbOrganisation.getOrgid());
                    tbDeporgMap.setOrgName(tbOrganisation.getONlsOrgname());

                    tbDeporgMapList.add(tbDeporgMap);
                }
            } else {

                tbDeporgMap.setOrgid(tbOrganisation.getOrgid());
                tbDeporgMap.setOrgName(tbOrganisation.getONlsOrgname());

                tbDeporgMapList.add(tbDeporgMap);
            }

            model.addAttribute(CHILD_ENTITY_NAME, tbDeporgMap);
            // ---
            messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS, MainetConstants.COMMON_STATUS.SAVE_OK));
            return CHILD_ENTITY_NAME;
        } else {
            populateChildModel(model, tbDeporgMap, FormMode.CREATE);
            return JSP_FORM;
        }

    }

    //
    @RequestMapping(params = "updateStatus")
    public @ResponseBody void updateStatus(final Model model, @RequestParam("organisationId") final Long organisationId,
            @RequestParam("isChecked") final String isChecked) {
        log("Action 'update Status'");
        // --- Populates the model with a new instance
        final TbDeporgMap tbDeporgMap = new TbDeporgMap();

        for (final TbDeporgMap tbDeporg : tbDeporgMapList) {
            if ((tbDeporg.getOrgid().longValue() == organisationId.longValue()) && ISCHECKEDNO.equals(isChecked)) {
                tbDeporg.setMapStatus(MainetConstants.STATUS.INACTIVE);
            } else if ((tbDeporg.getOrgid().longValue() == organisationId.longValue()) && ISCHECKEDYES.equals(isChecked)) {
                tbDeporg.setMapStatus(MainetConstants.FlagA);
            }
        }

        model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbDeporgMap);
        model.addAttribute(MAIN_ENTITY_NAME, tbDeporgMap);
    }

    @RequestMapping(params = "validateDepartment")
    public @ResponseBody int validateDepartment(final Model model, @RequestParam("deptName") final String deptName) {
        log("Action 'validateDepartment'");
        final Organisation org = UserSession.getCurrent().getOrganisation();
        final int recCount = tbDepartmentService.validateDepartment(deptName, org);
        return recCount;
    }

    @RequestMapping(params = "getViewForm")
    public String getViewForm(final Model model, @RequestParam("deptId") final Long deptId) {
        log("Action 'viewform'");
        final TbDepartment tbDepartment = tbDepartmentService.findById(deptId);
        populateModel(model, tbDepartment, FormMode.VIEW);
        return JSP_VIEW;
    }

    @RequestMapping(params = "checkIfDepOrgMapExists")
    public @ResponseBody int checkIfDeptOrgMapExists(@RequestParam("dpDeptid") final Long deptId) {
        log("Action 'check for Department-Organization Map'");
        int count = 0;
        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        final DeptOrgMap deptOrgMapList = tbDeporgMapService.findByOrgIdDeptId(orgId, deptId);

        if (deptOrgMapList != null) {
            count = 1;
        }
        return count;
    }

    @RequestMapping(params = "validateDeptOnDeptcode")
    public @ResponseBody int validateDeptOnDeptcode(@RequestParam("deptCode") final String deptCode) {
        log("Action 'validateDeptOnDeptcode'");
        int recCount = 0;
        final Department deptEntity = tbDepartmentService.findDepartmentByCode(deptCode);
        if (deptEntity != null) {
            recCount = 1;
        }
        return recCount;
    }
}
