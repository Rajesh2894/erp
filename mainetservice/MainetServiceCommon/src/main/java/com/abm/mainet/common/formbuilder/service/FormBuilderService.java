/*
 * Created on 21 Mar 2016 ( Time 19:07:24 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.formbuilder.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.audit.service.AuditService;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.ScrutinyServiceDto;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.formbuilder.domain.FormBuilderEntity;
import com.abm.mainet.common.formbuilder.domain.FormBuilderEntityHistory;
import com.abm.mainet.common.formbuilder.dto.FormBuilder;
import com.abm.mainet.common.formbuilder.dto.FormBuildersDto;
import com.abm.mainet.common.formbuilder.mapper.FormBuilderServiceMapper;
import com.abm.mainet.common.formbuilder.repository.FormBuilderRepository;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.SeqGenFunctionUtility;
import com.abm.mainet.common.utility.UserSession;

/**
 * Implementation of FormBuilderService
 */
@Component
@Transactional
public class FormBuilderService implements IFormBuilderService {

    @Autowired
    private FormBuilderRepository formBuilderRepository;

    @Autowired
    private FormBuilderServiceMapper mapper;

    @Autowired
    private SeqGenFunctionUtility seqGenFunctionUtility;

    @Autowired
    private AuditService auditService;

    @PersistenceContext
    protected EntityManager entityManager;

    private static final Logger LOGGER = LoggerFactory.getLogger(FormBuilderService.class);

    public static final String TB_FORMBUILDER_LABELS = "TB_FORMBUILDER_LABELS";
    public static final String FORM_LABEL_ID = "FORM_LABEL_ID";

    @Override
    public FormBuilder update(final FormBuilder formBuilder) {
        final FormBuilderEntity formBuilderEntity = formBuilderRepository.findOne(formBuilder.getSlLabelId());
        mapper.mapFormBuilderToFormBuilderEntity(formBuilder, formBuilderEntity);
        final FormBuilderEntity formBuilderEntitySaved = formBuilderRepository.save(formBuilderEntity);

        FormBuilderEntityHistory history = new FormBuilderEntityHistory();
        history.sethStatus(MainetConstants.InsertMode.UPDATE.getStatus());
        try {
            auditService.createHistory(formBuilderEntitySaved, history);
        } catch (Exception e) {
            LOGGER.error("Could not make audit entry ", e);
        }

        return mapper.mapFormBuilderEntityToFormBuilder(formBuilderEntitySaved);
    }

    @Override
    public void delete(final Long slLabelId, final Long orgid) {
        formBuilderRepository.delete(slLabelId);
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.FormBuilderService#getAllServices(java.lang.Long)
     */
    @Override
    public List<ScrutinyServiceDto> getAllServices(final Long orgId, String dpDeptcode) {
    	Organisation organisation = new Organisation();
        organisation.setOrgid(orgId);
        final Long servActive = CommonMasterUtility
                .getValueFromPrefixLookUp(PrefixConstants.IsLookUp.ACTIVE, PrefixConstants.LookUp.ACN, organisation)
                .getLookUpId();
        final List<Object> result = formBuilderRepository.getAllServices(orgId, dpDeptcode,servActive);
        final List<ScrutinyServiceDto> beans = new ArrayList<>();

        final int listSize = result.size();
        ScrutinyServiceDto scrutinyServiceDto = null;
        for (int iCounter = 0; iCounter < listSize; iCounter++) {
            final Object[] obj = (Object[]) result.get(iCounter);
            scrutinyServiceDto = new ScrutinyServiceDto();
            if (obj[0] != null) {
                scrutinyServiceDto.setSmServiceId(Long.parseLong(obj[0].toString()));
            }
            if (obj[1] != null) {
                scrutinyServiceDto.setSmServiceName(obj[1].toString());
            }
            if (obj[2] != null) {
                scrutinyServiceDto.setSmServiceNameMar(obj[2].toString());
            }
            if (obj[3] != null) {
            	scrutinyServiceDto.setSmShortDesc(obj[3].toString());
            }
            beans.add(scrutinyServiceDto);
        }
        return beans;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.FormBuilderService
     * #createScrutinyLabel(com.abm.mainetservice.web.masters.scrutinylabels.bean.ScrutinyLabelsDto)
     */
    @Override
    public String createFormBuilderLabel(final FormBuildersDto formBuildersDto,
            final List<FormBuilder> formBuilderList) {
        FormBuilderEntity formBuilserEntity = null;
        List<FormBuilderEntity> list = new ArrayList<>();
        List<Object> historyList = new ArrayList<>();
        final Date curDate = new Date();
        final long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        for (final FormBuilder formBuilder : formBuilderList) {
            formBuilserEntity = new FormBuilderEntity();
            final long slLabelId = seqGenFunctionUtility.generateSequenceNo(MainetConstants.CommonConstants.COM,
                    TB_FORMBUILDER_LABELS, FORM_LABEL_ID, orgId, null, null);
            formBuilder.setSlLabelId(slLabelId);
            formBuilder.setLmoddate(curDate);
            formBuilder.setUserId(UserSession.getCurrent().getEmployee().getEmpId());
            formBuilder.setOrgid(UserSession.getCurrent().getOrganisation().getOrgid());
            formBuilder.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
            formBuilder.setSlActiveStatus(MainetConstants.FlagA);

            mapper.mapFormBuilderToFormBuilderEntity(formBuilder, formBuilserEntity);
            formBuilserEntity.setSmShortDesc(formBuildersDto.getScrutinyLabels().getSmShortDesc());
            list.add(formBuilserEntity);

        }
        formBuilderRepository.save(list);
        list.forEach(entity -> {
            FormBuilderEntityHistory history = new FormBuilderEntityHistory();
            BeanUtils.copyProperties(entity, history);
            history.sethStatus(MainetConstants.InsertMode.ADD.getStatus());
            historyList.add(history);
        });
        try {
            auditService.createHistoryForListObj(historyList);
        } catch (Exception e) {
            LOGGER.error("Could not make audit entry ", e);
        }

        return "success";
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.FormBuilderService#findAllServiceListData(java.lang.
     * Long)
     */
    @Override
    public List<ScrutinyServiceDto> findAllServiceListData(final Long orgId, final String serviceCode, final Long deptId) {
        // List<Object> serviceMasterList = tbScrutinyLabelsJpaRepository.findAllServiceListData(orgId);

    	
		final Long activeStatusId = CommonMasterUtility
				.getValueFromPrefixLookUp(MainetConstants.Common_Constant.ACTIVE_FLAG,
						MainetConstants.Common_Constant.ACN, new Organisation(orgId))
				.getLookUpId();
        final StringBuilder scrutinyServiceList = new StringBuilder(
                "select distinct tbServicesMstEntity from FormBuilderEntity formbuilderEntity,"
                        + " ServiceMaster tbServicesMstEntity where formbuilderEntity.smShortDesc=tbServicesMstEntity.smShortdesc"
                        + " and formbuilderEntity.orgid=tbServicesMstEntity.orgid"
                        + " and formbuilderEntity.slActiveStatus='A'"
                        + " and tbServicesMstEntity.smServActive=:status"

                        + " and formbuilderEntity.orgid=:orgId "
                        + " and tbServicesMstEntity.orgid=:orgId ");

        if (StringUtils.isNotEmpty(serviceCode)) {
            scrutinyServiceList.append(" and formbuilderEntity.smShortDesc=:serviceCode ");
        }
        if (deptId != null) {
            scrutinyServiceList.append(" and tbServicesMstEntity.tbDepartment.dpDeptid=:deptId ");
        }

        final Query query = entityManager.createQuery(scrutinyServiceList.toString());
        query.setParameter("orgId", orgId);
        query.setParameter("status", activeStatusId);

        if (deptId != null) {
        	query.setParameter("deptId", deptId);
        }
        if (StringUtils.isNotEmpty(serviceCode)) {
        	query.setParameter("serviceCode", serviceCode);
        }

        @SuppressWarnings("unchecked")
        final List<ServiceMaster> serviceMasterList = query.getResultList();

        final List<ScrutinyServiceDto> beans = new ArrayList<>();
        ScrutinyServiceDto scrutinyServiceDto = null;
        if ((serviceMasterList != null) && !serviceMasterList.isEmpty()) {
            for (final ServiceMaster serviceMaster : serviceMasterList) {
                scrutinyServiceDto = new ScrutinyServiceDto();
                scrutinyServiceDto.setSmServiceId(serviceMaster.getSmServiceId());
                scrutinyServiceDto.setSmServiceName(serviceMaster.getSmServiceName());
                scrutinyServiceDto.setSmServiceNameMar(serviceMaster.getSmServiceNameMar());
                scrutinyServiceDto.setDepartmentName(serviceMaster.getTbDepartment().getDpDeptdesc());
                scrutinyServiceDto.setDepartmentNameMar(serviceMaster.getTbDepartment().getDpNameMar());
                scrutinyServiceDto.setSmShortDesc(serviceMaster.getSmShortdesc());
                beans.add(scrutinyServiceDto);
            }
        }
        return beans;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.FormBuilderService#findAllScrutinyLabelData(java.
     * lang.Long, java.lang.Long)
     */
    @Override
    public List<FormBuilder> findAllFormBuilderLabelData(final String smShortdesc, final Long orgId) {

        final List<FormBuilderEntity> entities = formBuilderRepository.findAllFormLabelData(smShortdesc, orgId);
        final List<FormBuilder> beans = new ArrayList<>();
        for (final FormBuilderEntity tbScrutinyLabelsEntity : entities) {
            beans.add(mapper.mapFormBuilderEntityToFormBuilder(tbScrutinyLabelsEntity));
        }
        return beans;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.FormBuilderService#updateScrutinyLabel(com.abm.
     * mainetservice.web.masters.scrutinylabels.bean.ScrutinyLabelsDto, java.util.List,
     * com.abm.mainetservice.web.masters.scrutinylabels.bean.FormBuilder)
     */
    @Override
    public String updateFormBuilderLabel(final FormBuildersDto formBuildersDto, final List<FormBuilder> formbuilderList,
            final FormBuilder formBuilderTemp) {

        FormBuilderEntity formBuilderEntity = null;
        final Date curDate = new Date();
        int dbDataFound = 0;

        final List<FormBuilder> finalCheckList = new ArrayList<>();
        for (final FormBuilder newListElement : formBuildersDto.getScrutinyLabelsList()) {
            dbDataFound = 0;
            for (final FormBuilder dbListElement : formbuilderList) {
                if (newListElement.getSlLabelId() != null && dbListElement.getSlLabelId().equals(newListElement.getSlLabelId())) {
                    dbListElement.setSlLabelMar(newListElement.getSlLabelMar());
                    dbListElement.setSlPosition(newListElement.getSlPosition());
                    dbListElement.setLevels(newListElement.getLevels());
                    dbListElement.setGmId(newListElement.getGmId());
                    dbListElement.setSlLabel(newListElement.getSlLabel());
                    dbListElement.setSlDatatype(newListElement.getSlDatatype());
                    dbListElement.setSlPreValidation(newListElement.getSlPreValidation());
                    dbListElement.setSlFormName(newListElement.getSlFormName());
                    dbListElement.setSlFormMode(newListElement.getSlFormMode());
                    dbListElement.setSlValidationText(newListElement.getSlValidationText());

                    finalCheckList.add(dbListElement);

                    dbDataFound++;
                    break;
                }
            }
            if (dbDataFound == 0) {
                finalCheckList.add(newListElement);
            }
        }

        int count = 0;
        for (final FormBuilder dbListElement : formbuilderList) {
            count = 0;
            for (final FormBuilder fianlListElement : finalCheckList) {
                if (fianlListElement.getSlLabelId() != null && fianlListElement.getSlLabelId().equals(dbListElement.getSlLabelId())) {
                    count++;
                }
            }

            if (count == 0) {
                dbListElement.setSlActiveStatus(MainetConstants.STATUS.INACTIVE);
                finalCheckList.add(dbListElement);
            }
        }
        final long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        List<FormBuilderEntity> list = new ArrayList<>();
        List<Object> historyList = new ArrayList<>();

        // TODO : why if else
        for (final FormBuilder formbuilder : finalCheckList) {
            formBuilderEntity = new FormBuilderEntity();
            formbuilder.setSmShortDesc(formBuildersDto.getScrutinyLabels().getSmShortDesc());
            if (formbuilder.getSlLabelId() != null) {
                formbuilder.setLangId(formBuilderTemp.getLangId());
                formbuilder.setUserId(formBuilderTemp.getUserId());

                formbuilder.setLmoddate(formBuilderTemp.getLmoddate());
                if (StringUtils.isEmpty(formBuilderTemp.getSlActiveStatus())) {
                    formbuilder.setSlActiveStatus(formBuilderTemp.getSlActiveStatus());
                }
                mapper.mapFormBuilderToFormBuilderEntity(formbuilder, formBuilderEntity);

                // formBuilderEntity.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
                formBuilderEntity.setOrgid(orgId);
                list.add(formBuilderEntity);
            } else {
               /* final long slLabelId = seqGenFunctionUtility.generateSequenceNo(MainetConstants.CommonConstants.COM,
                        TB_FORMBUILDER_LABELS, FORM_LABEL_ID, orgId, null, null);
                formbuilder.setSlLabelId(slLabelId);*/
                formbuilder.setOrgid(UserSession.getCurrent().getOrganisation().getOrgid());
                formbuilder.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
                formbuilder.setUserId(UserSession.getCurrent().getEmployee().getEmpId());
                formbuilder.setLmoddate(curDate);
                formbuilder.setSlActiveStatus(MainetConstants.FlagA);

                mapper.mapFormBuilderToFormBuilderEntity(formbuilder, formBuilderEntity);

                // formBuilderEntity.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
                list.add(formBuilderEntity);

            }
        }

        formBuilderRepository.save(list);
        list.forEach(entity -> {
            FormBuilderEntityHistory history = new FormBuilderEntityHistory();
            BeanUtils.copyProperties(entity, history);
            history.sethStatus(MainetConstants.InsertMode.UPDATE.getStatus());
            historyList.add(history);
        });

        try {
            auditService.createHistoryForListObj(historyList);
        } catch (Exception e) {
            LOGGER.error("Could not make audit entry ", e);
        }

        return "success";
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.scrutinylabels.business.service.FormBuilderService#getScrutinyServices(java.lang.
     * Long)
     */
    @Override
    public List<ScrutinyServiceDto> getFormBuilderServices(final Long orgId) {
        final List<Object> result = formBuilderRepository.getFormServices(orgId);
        final List<ScrutinyServiceDto> beans = new ArrayList<>();

        final int listSize = result.size();
        ScrutinyServiceDto scrutinyServiceDto = null;
        for (int iCounter = 0; iCounter < listSize; iCounter++) {
            final Object[] obj = (Object[]) result.get(iCounter);
            scrutinyServiceDto = new ScrutinyServiceDto();
            if (obj[0] != null) {
                scrutinyServiceDto.setSmServiceName(obj[0].toString());
            }
            if (obj[1] != null) {
                scrutinyServiceDto.setSmServiceNameMar(obj[1].toString());
            }
            if (obj[2] != null) {
                scrutinyServiceDto.setSmShortDesc(obj[2].toString());
            }
            beans.add(scrutinyServiceDto);
        }
        return beans;
    }

}
