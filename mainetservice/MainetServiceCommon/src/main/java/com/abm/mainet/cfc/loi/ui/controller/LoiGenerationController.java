/*
 * Created on 5 Apr 2016 ( Time 11:43:25 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.cfc.loi.ui.controller;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.codehaus.jackson.map.ObjectMapper;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.ClassUtils;
import org.springframework.util.ReflectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.abm.mainet.cfc.checklist.service.IChecklistSearchService;
import com.abm.mainet.cfc.loi.service.TbLoiDetService;
import com.abm.mainet.cfc.loi.ui.model.LoiGenerationModel;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.constant.PrefixConstants.Prefix;
import com.abm.mainet.common.constant.ServiceEndpoints;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.domain.TbCfcApplicationMstEntity;
import com.abm.mainet.common.domain.TbWorkOrderDetailEntity;
import com.abm.mainet.common.dto.JsonViewObject;
import com.abm.mainet.common.dto.TbApprejMas;
import com.abm.mainet.common.dto.WaterNoDueDto;
import com.abm.mainet.common.exception.FrameworkException;
import com.abm.mainet.common.integration.property.dto.PropertyDetailDto;
import com.abm.mainet.common.integration.property.dto.PropertyInputDto;
import com.abm.mainet.common.master.service.DepartmentService;
import com.abm.mainet.common.repository.TbWorkOrderDetailJpaRepository;
import com.abm.mainet.common.repository.TbWorkOrderJpaRepository;
import com.abm.mainet.common.service.ICFCApplicationMasterService;
import com.abm.mainet.common.service.ServiceMasterService;
import com.abm.mainet.common.service.TbApprejMasService;
import com.abm.mainet.common.ui.controller.AbstractFormController;
import com.abm.mainet.common.utility.ApplicationContextProvider;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.RestClient;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;
import com.abm.mainet.common.workflow.service.IWorkflowTaskService;

@Controller
@RequestMapping(value = {"/LoiGeneration.html", "/LoiGenerationView.html"})
public class LoiGenerationController extends AbstractFormController<LoiGenerationModel> {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(LoiGenerationController.class);

    @Resource
    private TbLoiDetService tbLoiDetService; // Injected by Spring

    @Resource
    private TbApprejMasService tbApprejMasService;

    @Resource
    private ServiceMasterService serviceMaster;

    @Autowired
    private IChecklistSearchService checklistSearchService;

	@Autowired
	DepartmentService departmentService;
	
	@Autowired
    private ICFCApplicationMasterService iCFCAppMasterService;
	
	@Resource
    private TbWorkOrderDetailJpaRepository tbWorkOrderDetailJpaRepository;
	
	@Autowired
	private IWorkflowTaskService iWorkflowTaskService;
	
    @RequestMapping(method = { RequestMethod.GET, RequestMethod.POST })
    public ModelAndView index(final HttpServletRequest httpServletRequest) throws ClassNotFoundException, LinkageError {
        sessionCleanup(httpServletRequest);
        bindModel(httpServletRequest);
        final LoiGenerationModel model = getModel();
        final Long applicationId = Long.valueOf(httpServletRequest.getParameter("applId"));
        model.setAppId(applicationId);
        final Long serviceId = Long.valueOf(httpServletRequest.getParameter("serviceId"));
        model.setServiceId(serviceId);
        final Long labelId = Long.valueOf(httpServletRequest.getParameter("labelId"));
        model.setLabelId(labelId);
        final String lableValue = httpServletRequest.getParameter("labelVal");
        final Long level = Long.valueOf(httpServletRequest.getParameter("level"));
        TbCfcApplicationMstEntity cfcMst = iCFCAppMasterService.getCFCApplicationByApplicationId(applicationId, UserSession.getCurrent().getOrganisation().getOrgid());
        if(cfcMst.getRefNo() != null && !cfcMst.getRefNo().isEmpty()){
        	model.setRefNo(cfcMst.getRefNo());
        }
        model.getLabelValueDTO().setApplicationId(applicationId);
        model.getLabelValueDTO().setLableId(labelId);
        model.getLabelValueDTO().setLableValue(lableValue);
        model.getLabelValueDTO().setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
        model.getLabelValueDTO().setOrgId(UserSession.getCurrent().getOrganisation().getOrgid());
        model.getLabelValueDTO().setLevel(level);
        model.getLabelValueDTO().setUserId(UserSession.getCurrent().getEmployee().getEmpId());
        model.setApplicationDetails(applicationId, serviceId);

        // US#106604
        ServiceMaster service = serviceMaster.getServiceMaster(serviceId, UserSession.getCurrent().getOrganisation().getOrgid());
        if (service != null) {
            LookUp artTypeLookUp = CommonMasterUtility.getValueFromPrefixLookUp(
                    PrefixConstants.ADVERTISEMENT_AND_HOARDING_PREFIX.APP,
                    PrefixConstants.ADVERTISEMENT_AND_HOARDING_PREFIX.REM, UserSession.getCurrent().getOrganisation());
           
            if(Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(), MainetConstants.ENV_TCP)) {
            	 model.setTaskId(Long.valueOf(UserSession.getCurrent().getScrutinyCommonParamMap().get("taskId")));
            	 model.setLabelId(Long.valueOf(UserSession.getCurrent().getScrutinyCommonParamMap().get("workflowId")));
            	 model.setCurrentLevel(iWorkflowTaskService.findByTaskId(model.getTaskId()).getCurentCheckerLevel());
            	if(null==model.getEntity().getLoiRecordFound() || !model.getEntity().getLoiRecordFound().equals("N")) {
            		List<TbWorkOrderDetailEntity> detailEntityList = tbWorkOrderDetailJpaRepository.findByApplicationID(applicationId, UserSession.getCurrent().getOrganisation().getOrgid());
            		List<TbApprejMas> remarkMstList = tbApprejMasService.findByRemarkType(serviceId, artTypeLookUp.getLookUpId());
            		remarkMstList.forEach(remarkMst -> {
            		    detailEntityList.stream()
            		            .filter(detailEntity -> "Y".equalsIgnoreCase(detailEntity.getWdOthRemark()))
            		            .filter(detailEntity -> remarkMst.getArtId().equals(detailEntity.getWdRemarkId()))
            		            .findFirst()
            		            .ifPresent(detailEntity -> remarkMst.setArtN5(detailEntity.getWdId()));
            		});

            		model.setRemarkList(remarkMstList);
            	}else {
            		model.setRemarkList(tbApprejMasService.findByRemarkType(serviceId, artTypeLookUp.getLookUpId()));
            	}
            	
            }else {
            	 model.setRemarkList(tbApprejMasService.findByRemarkType(serviceId, artTypeLookUp.getLookUpId()));
            }
            model.setServiceShortName(service.getSmShortdesc());
            model.setDepartmentCode(service.getTbDepartment().getDpDeptcode());
            
			if ((MainetConstants.WaterServiceShortCode.WATER_NEW_CONNECION.equals(service.getSmShortdesc()) && Utility
					.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(), MainetConstants.ENV_SKDCL))) {
				LookUp propDuesCheck = null;
				try {
					propDuesCheck = CommonMasterUtility.getDefaultValue(PrefixConstants.NewWaterServiceConstants.CHECK_PROPERTY_DUES,
							UserSession.getCurrent().getOrganisation());
					if (propDuesCheck != null) {
						if (PrefixConstants.NewWaterServiceConstants.AT_TIME_OF_SCRUTINY.equals(propDuesCheck.getLookUpCode())
								|| PrefixConstants.NewWaterServiceConstants.BOTH.equals(propDuesCheck.getLookUpCode())) {
							this.getModel().setShowPropDues(true);
							 fetchPropOutstandingAmount(model, applicationId);
						}
					}
				} catch (Exception exception) {
					LOGGER.error("No prefix found for CPD(Check Property Dues)");
				}
			}            
        }// END
        //#140388
		if (service.getTbDepartment() != null && service.getTbDepartment().getDpDeptid() != null) {
			String deptCode = departmentService.getDeptCode(service.getTbDepartment().getDpDeptid());
			if (Utility.isEnvPrefixAvailable(UserSession.getCurrent().getOrganisation(), MainetConstants.ENV_SUDA)
					&& MainetConstants.TradeLicense.MARKET_LICENSE.equals(deptCode)) {
				this.getModel().setReamrkValidFlag(MainetConstants.FlagY);
			}
		}
        LookUp lookUp = null;
        try {
            lookUp = CommonMasterUtility.getValueFromPrefixLookUp("SCW", MainetConstants.ENV,
                    UserSession.getCurrent().getOrganisation());
        } catch (Exception e) {
        }

        if (lookUp != null && StringUtils.equals(MainetConstants.FlagY,
                lookUp.getOtherField())) {
            WaterNoDueDto waterNoDueDto = null;
            if (StringUtils.equals("WND", service.getSmShortdesc())) {

                Class<?> clazz = null;
                Object dynamicServiceInstance = null;
                String serviceClassName = null;
                serviceClassName = "com.abm.mainet.water.service.WaterNoDuesCertificateServiceImpl";

                clazz = ClassUtils.forName(serviceClassName,
                        ApplicationContextProvider.getApplicationContext().getClassLoader());

                dynamicServiceInstance = ApplicationContextProvider.getApplicationContext().getAutowireCapableBeanFactory()
                        .autowire(clazz, 4, false);
                final Method method = ReflectionUtils.findMethod(clazz,
                        ApplicationSession.getInstance().getMessage("getNoDuesApplicationDataForScrutiny"),
                        new Class[] { Long.class, Long.class });
                waterNoDueDto = (WaterNoDueDto) ReflectionUtils.invokeMethod(method, dynamicServiceInstance,
                        new Object[] { applicationId, UserSession.getCurrent().getOrganisation().getOrgid() });
                Map<String, Double> propDue = new HashMap<String, Double>();
                Map<String, Double> waterDue = new HashMap<String, Double>();
                Double total = getModel().getTotal();
                total += waterNoDueDto.getPropDueAmt();
                total += waterNoDueDto.getWaterDueAmt();
                propDue.put("Property Due Amount", waterNoDueDto.getPropDueAmt());
                waterDue.put("Water Due Amount", waterNoDueDto.getWaterDueAmt());
                model.setPropDues(propDue);
                model.setWaterDues(waterDue);
                model.setWndServiceFlag(MainetConstants.FlagY);
                model.setTotal(total);
            }
        }

        if ((getModel().getTotal() != null) && (getModel().getTotal().doubleValue() > 0d)) {
            getModel().setChargesDefined(MainetConstants.Common_Constant.YES);
        } else {
            getModel().setChargesDefined(MainetConstants.Common_Constant.NO);
        }
        
        

        return index();
    }

	private void fetchPropOutstandingAmount(final LoiGenerationModel model, final Long applicationId)
			throws ClassNotFoundException, LinkageError {
		Class<?> clazz = null;
        Object dynamicServiceInstance = null;
        String serviceClassName = null;
        serviceClassName = "com.abm.mainet.water.service.NewWaterConnectionServiceImpl";

        clazz = ClassUtils.forName(serviceClassName,
                ApplicationContextProvider.getApplicationContext().getClassLoader());

        dynamicServiceInstance = ApplicationContextProvider.getApplicationContext().getAutowireCapableBeanFactory()
                .autowire(clazz, 2, false);
        final Method method = ReflectionUtils.findMethod(clazz,MainetConstants.Property.GET_PROPERY_OUTSTANDING,
                new Class[] { Long.class, Long.class });
        PropertyDetailDto dto = (PropertyDetailDto) ReflectionUtils.invokeMethod(method, dynamicServiceInstance,
                new Object[] { applicationId, UserSession.getCurrent().getOrganisation().getOrgid() });
        if(dto !=null && dto.getTotalOutsatandingAmt()>0d) {
        Map<String, Double> propDue = new HashMap<String, Double>();            
        propDue.put("Property Due Amount", dto.getTotalOutsatandingAmt());
        model.setPropDues(propDue);
        }else {
        	model.setShowPropDues(false);
        }
	}

    private Double getPropertyDueAmt(PropertyInputDto propertyInputDto) {
        ResponseEntity<?> responseEntity = null;
        Double dueAmount = null;
        Object obj = new Object();
        try {
            responseEntity = RestClient.callRestTemplateClient(propertyInputDto, ServiceEndpoints.PROP_BY_PROP_NO_AND_FLATNO);
            String d = new JSONObject(obj).toString();
            try {
                PropertyDetailDto app = new ObjectMapper().readValue(d, PropertyDetailDto.class);
                dueAmount = app.getTotalOutsatandingAmt();
            } catch (Exception ex) {
                throw new FrameworkException("Exception occured while fetching Asset details : ", ex);

            }
        } catch (Exception exception) {
            throw new FrameworkException("Error occured while fetching Property detail ", exception);
        }

        return dueAmount;
    }

    @RequestMapping(params = "showDetails", method = RequestMethod.POST)
    public ModelAndView defaultLoad(@RequestParam("appNo") final long applicationId, @RequestParam("taskId") final long serviceId,
            @RequestParam("actualTaskId") final long taskId, final HttpServletRequest httpServletRequest) throws Exception {
        sessionCleanup(httpServletRequest);
        bindModel(httpServletRequest);
        final LoiGenerationModel model = getModel();
        model.setAppId(applicationId);
        model.setServiceId(serviceId);
        model.setTaskId(taskId);
        /*
         * final Long labelId = Long.valueOf(httpServletRequest.getParameter("labelId")); model.setLabelId(labelId); final String
         * lableValue = httpServletRequest.getParameter("labelVal"); final Long level =
         * Long.valueOf(httpServletRequest.getParameter("level"));
         */
        model.getLabelValueDTO().setApplicationId(applicationId);
        /*
         * model.getLabelValueDTO().setLableId(labelId); model.getLabelValueDTO().setLableValue(lableValue);
         */
        model.getLabelValueDTO().setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
        model.getLabelValueDTO().setOrgId(UserSession.getCurrent().getOrganisation().getOrgid());
        /* model.getLabelValueDTO().setLevel(level); */
        model.getLabelValueDTO().setUserId(UserSession.getCurrent().getEmployee().getEmpId());
        model.setApplicationDetails(applicationId, serviceId);
        if ((getModel().getTotal() != null) && (getModel().getTotal().doubleValue() > 0d)) {
            getModel().setChargesDefined(MainetConstants.Common_Constant.YES);
        } else {
            getModel().setChargesDefined(MainetConstants.Common_Constant.NO);
        }
        return index();

    }

    @RequestMapping(method = RequestMethod.POST, params = "generateLOI")
    public ModelAndView generateLOI(final HttpServletRequest httpServletRequest) {
        bindModel(httpServletRequest);
        final LoiGenerationModel model = getModel();
        if (model.saveLoiData()) {
            return jsonResult(JsonViewObject.successResult(model.getSuccessMessage()));
        } else {
            return defaultMyResult();
        }
    }
    
    @RequestMapping(method = RequestMethod.POST, params = "saveRemark")
    public ModelAndView saveRemark(final HttpServletRequest httpServletRequest) {
        bindModel(httpServletRequest);
        final LoiGenerationModel model = getModel();
        if (model.saveRemark()) {
            return jsonResult(JsonViewObject.successResult("Remark Saved SuccessFully"));
        } else {
            return defaultMyResult();
        }
    }

}
