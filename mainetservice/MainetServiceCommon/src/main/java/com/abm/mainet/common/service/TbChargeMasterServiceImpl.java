/*
 * Created on 17 Mar 2016 ( Time 19:21:30 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.service;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.integration.acccount.domain.TbSrcptFeesDetEntity;
import com.abm.mainet.common.integration.acccount.repository.TbServiceReceiptJpaRepository;
import com.abm.mainet.common.master.service.TbTaxMasService;

/**
 * Implementation of TbChargeMasterService
 */
@Component
@Transactional
public class TbChargeMasterServiceImpl implements TbChargeMasterService {

    @Autowired
    private TbServiceReceiptJpaRepository tbServiceReceiptJpaRepository;

    @Autowired
    private TbTaxMasService tbTaxMasService;

    @Override
    public Map<String, BigDecimal> getChargeDescByChgId(final Long applicationId, final long orgId) {
        final Map<String, BigDecimal> desc = new HashMap<>(0);
        String chargeData = null;
        final List<TbSrcptFeesDetEntity> chargeDescruption = tbServiceReceiptJpaRepository.finndTaxidFeeamount(applicationId,
                orgId);
        for (final TbSrcptFeesDetEntity descruption : chargeDescruption) {
            chargeData = tbTaxMasService.findTaxDescByTaxIdAndOrgId(descruption.getTaxId(), orgId);
            desc.put(chargeData, (descruption.getRfFeeamount().setScale(0, BigDecimal.ROUND_HALF_UP).setScale(2)));
        }
        return desc;
    }
    @Override
    public Map<String, BigDecimal> getChargeDescByChgIdByAppld(final Long applicationId, final long orgId) {
        final Map<String, BigDecimal> desc = new HashMap<>(0);
        String chargeData = null;
        final List<TbSrcptFeesDetEntity> chargeDescruption = tbServiceReceiptJpaRepository.finndTaxidFeeamountByAppId(applicationId,
                orgId);
        for (final TbSrcptFeesDetEntity descruption : chargeDescruption) {
            chargeData = tbTaxMasService.findTaxDescByTaxIdAndOrgId(descruption.getTaxId(), orgId);
            desc.put(chargeData, descruption.getRfFeeamount());
        }
        return desc;
    }
    
	@Override
	@Transactional
	public List<Object[]> countTaxCollection(Long orgId, String date1) {
		return tbServiceReceiptJpaRepository.countTaxCollection(orgId, date1);
	}
}
