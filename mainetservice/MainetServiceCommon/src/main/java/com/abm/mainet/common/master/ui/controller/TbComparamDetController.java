/*
 * Created on 24 Jun 2015 ( Time 19:53:21 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.master.dto.TbComparamDet;
import com.abm.mainet.common.master.dto.TbComparamMas;
import com.abm.mainet.common.master.ui.model.TbComparamMasListItem;
import com.abm.mainet.common.service.TbComparamDetService;
import com.abm.mainet.common.service.TbComparamMasService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.Message;
import com.abm.mainet.common.utility.MessageType;

/**
 * Spring MVC controller for 'TbComparamDet' management.
 */
@Controller
@RequestMapping("/TbComparamDet.html")
public class TbComparamDetController extends AbstractController {

    // --- Variables names ( to be used in JSP with Expression Language )
    private static final String MAIN_ENTITY_NAME = "tbComparamDet";
    private static final String MAIN_LIST_NAME = "list";

    // --- JSP pages names ( View name in the MVC model )
    private static final String JSP_FORM = "tbComparamDet/form";
    private static final String JSP_LIST = "tbComparamDet/list";

    // --- SAVE ACTION ( in the HTML form )
    private static final String SAVE_ACTION_CREATE = "/tbComparamDet/create";
    private static final String SAVE_ACTION_UPDATE = "/tbComparamDet/update";

    // --- Main entity service
    @Resource
    private TbComparamDetService tbComparamDetService; // Injected by Spring
    // --- Other service(s)
    @Resource
    private TbComparamMasService tbComparamMasService; // Injected by Spring

    // --------------------------------------------------------------------------------------
    /**
     * Default constructor
     */
    public TbComparamDetController() {
        super(TbComparamDetController.class, MAIN_ENTITY_NAME);
        log("TbComparamDetController created.");
    }

    // --------------------------------------------------------------------------------------
    // Spring MVC model management
    // --------------------------------------------------------------------------------------
    /**
     * Populates the combo-box "items" for the referenced entity "TbComparamMas"
     * @param model
     */
    private void populateListOfTbComparamMasItems(final Model model) {
        final List<TbComparamMas> list = tbComparamMasService.findAll();
        final List<TbComparamMasListItem> items = new LinkedList<>();
        for (final TbComparamMas tbComparamMas : list) {
            items.add(new TbComparamMasListItem(tbComparamMas));
        }
        model.addAttribute("listOfTbComparamMasItems", items);
    }

    /**
     * Populates the Spring MVC model with the given entity and eventually other useful data
     * @param model
     * @param tbComparamDet
     */
    private void populateModel(final Model model, final TbComparamDet tbComparamDet, final FormMode formMode) {
        // --- Main entity
        model.addAttribute(MAIN_ENTITY_NAME, tbComparamDet);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            // --- Other data useful in this screen in "create" mode (all fields)
            populateListOfTbComparamMasItems(model);
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
            // --- Other data useful in this screen in "update" mode (only non-pk fields)
            populateListOfTbComparamMasItems(model);
        }
    }

    // --------------------------------------------------------------------------------------
    // Request mapping
    // --------------------------------------------------------------------------------------
    /**
     * Shows a list with all the occurrences of TbComparamDet found in the database
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping()
    public String list(final Model model) {
        log("Action 'list'");
        final List<TbComparamDet> list = tbComparamDetService.findAll();
        model.addAttribute(MAIN_LIST_NAME, list);
        return JSP_LIST;
    }

    /**
     * Shows a form page in order to create a new TbComparamDet
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping("/form")
    public String formForCreate(final Model model) {
        log("Action 'formForCreate'");
        // --- Populates the model with a new instance
        final TbComparamDet tbComparamDet = new TbComparamDet();
        populateModel(model, tbComparamDet, FormMode.CREATE);
        return JSP_FORM;
    }

    /**
     * Shows a form page in order to update an existing TbComparamDet
     * @param model Spring MVC model
     * @param cpdId primary key element
     * @return
     */
    @RequestMapping(value = "/form/{cpdId}")
    public String formForUpdate(final Model model, @PathVariable("cpdId") final Long cpdId) {
        log("Action 'formForUpdate'");
        // --- Search the entity by its primary key and stores it in the model
        final TbComparamDet tbComparamDet = tbComparamDetService.findById(cpdId);
        populateModel(model, tbComparamDet, FormMode.UPDATE);
        return JSP_FORM;
    }

    /**
     * 'CREATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbComparamDet entity to be created
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(value = "/create") // GET or POST
    public String create(@Valid final TbComparamDet tbComparamDet, final BindingResult bindingResult, final Model model,
            final RedirectAttributes redirectAttributes, final HttpServletRequest httpServletRequest) {
        log("Action 'create'");
        try {
            if (!bindingResult.hasErrors()) {
                final TbComparamDet tbComparamDetCreated = tbComparamDetService.create(tbComparamDet);
                model.addAttribute(MAIN_ENTITY_NAME, tbComparamDetCreated);

                // ---
                messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS, MainetConstants.COMMON_STATUS.SAVE_OK));
                return redirectToForm(httpServletRequest, tbComparamDet.getCpdId());
            } else {
                populateModel(model, tbComparamDet, FormMode.CREATE);
                return JSP_FORM;
            }
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbComparamDet.error.create", e);
            populateModel(model, tbComparamDet, FormMode.CREATE);
            return JSP_FORM;
        }
    }

    /**
     * 'UPDATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbComparamDet entity to be updated
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(value = "/update") // GET or POST
    public String update(@Valid final TbComparamDet tbComparamDet, final BindingResult bindingResult, final Model model,
            final RedirectAttributes redirectAttributes, final HttpServletRequest httpServletRequest) {
        log("Action 'update'");
        try {
            if (!bindingResult.hasErrors()) {
                // --- Perform database operations
                final TbComparamDet tbComparamDetSaved = tbComparamDetService.update(tbComparamDet);
                model.addAttribute(MAIN_ENTITY_NAME, tbComparamDetSaved);
                // --- Set the result message
                messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS, MainetConstants.COMMON_STATUS.SAVE_OK));
                log("Action 'update' : update done - redirect");
                return redirectToForm(httpServletRequest, tbComparamDet.getCpdId());
            } else {
                log("Action 'update' : binding errors");
                populateModel(model, tbComparamDet, FormMode.UPDATE);
                return JSP_FORM;
            }
        } catch (final Exception e) {
            messageHelper.addException(model, "tbComparamDet.error.update", e);
            log("Action 'update' : Exception - " + e.getMessage());
            populateModel(model, tbComparamDet, FormMode.UPDATE);
            return JSP_FORM;
        }
    }

    /**
     * 'DELETE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param redirectAttributes
     * @param cpdId primary key element
     * @return
     */
    @RequestMapping(value = "/delete/{cpdId}") // GET or POST
    public String delete(final RedirectAttributes redirectAttributes, @PathVariable("cpdId") final Long cpdId) {
        log("Action 'delete'");
        try {
            tbComparamDetService.delete(cpdId);
            // --- Set the result message
            messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS, MainetConstants.DELETE));
        } catch (final Exception e) {
            messageHelper.addException(redirectAttributes, "tbComparamDet.error.delete", e);
        }
        return redirectToList();
    }

}
