/*
 * Created on 13 Apr 2016 ( Time 13:11:54 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.domain.LocationMasEntity;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbDeptLocation;
import com.abm.mainet.common.master.dto.TbLocationMas;
import com.abm.mainet.common.master.service.DeptLocationService;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.master.service.TbOrganisationService;
import com.abm.mainet.common.master.ui.model.TbDepLocMapResponse;
import com.abm.mainet.common.master.ui.model.TbDepartmentListItem;
import com.abm.mainet.common.master.ui.model.TbDeptLocationListItem;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.UserSession;

@Controller
@RequestMapping("/TbDeptLocation.html")
public class DeptLocationController extends AbstractController {

    private static final String TB_DEPT_LOCATION = "tbDeptLocation";

    private static final String MAIN_ENTITY_NAME = TB_DEPT_LOCATION;
    private static final String JSP_FORM = "tbDeptLocation/form";
    private static final String JSP_LIST = "tbDeptLocation/list";
    private static final String SAVE_ACTION_CREATE = "/tbDeptLocation/create";
    private static final String SAVE_ACTION_UPDATE = "/tbDeptLocation/update";
    private static final String JSP_CHILD_FORM = "tbDepLocMap/locationAddForm";
    private static final String DEPT_LIST = "deptList";
    private static final String LIST_OF_TB_DEPARTMENT_ITEMS = "listOfTbDepartmentItems";
    private static final String LIST_OF_TB_LOCATION = "listOfTbLocation";
    private static final String TB_DEPT_LOCATION_HTML_CREATE = "/TbDeptLocation.html/create";
    private static final String LIST_OF_TB_LOCATION_ITEMS = "listOfTbLocationItems";
    private static final String DP_DEPTID = "dpDeptid";

    @Resource
    private DeptLocationService tbDeptLocationService;
    @Resource
    private TbOrganisationService tbOrganisationService;
    @Resource
    private TbDepartmentService tbDepartmentService;

    List<TbDeptLocation> tbDepLocMapList = new ArrayList<>();

    public DeptLocationController() {
        super(DeptLocationController.class, MAIN_ENTITY_NAME);
        // log(WaterConstants.WATERMASTERS.DEPTLOCATIONMASTER.TB_DEPT_LOCATION_CONTROLLER_CREATED);
    }

    private void populateListOfTbDepartmentItems(final Model model) {
        final List<TbDepartment> list = tbDepartmentService.findAll();
        final List<TbDepartmentListItem> items = new LinkedList<>();
        model.addAttribute(DEPT_LIST, list);
        for (final TbDepartment tbDepartment : list) {
            items.add(new TbDepartmentListItem(tbDepartment));
        }
        model.addAttribute(LIST_OF_TB_DEPARTMENT_ITEMS, items);
    }

    private void populateListOfTbLocationItems(final Model model) {
        final List<LocationMasEntity> list = tbDeptLocationService
                .findLocationList(UserSession.getCurrent().getOrganisation().getOrgid());
        final List<TbDeptLocationListItem> items = new LinkedList<>();
        model.addAttribute(LIST_OF_TB_LOCATION, list);
        model.addAttribute(LIST_OF_TB_LOCATION_ITEMS, items);
    }

    private void populateModel(final Model model, final TbDeptLocation tbDeptLocation, final FormMode formMode) {
        model.addAttribute(MAIN_ENTITY_NAME, tbDeptLocation);
        model.addAttribute(MainetConstants.FORM_NAME, tbDeptLocation);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE);
            model.addAttribute(SAVE_ACTION, TB_DEPT_LOCATION_HTML_CREATE);
            populateListOfTbDepartmentItems(model);
            populateListOfTbLocationItems(model);
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE);
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
            populateListOfTbDepartmentItems(model);
            populateListOfTbLocationItems(model);
        }
    }

    @RequestMapping()
    public String list(final Model model) {
        log("Action 'list'");
        helpDoc("TbDeptLocation.html", model);
        tbDepLocMapList = new ArrayList<>();
        populateModel(model, new TbDeptLocation(), FormMode.CREATE);
        return JSP_LIST;
    }

    @RequestMapping("/form")
    public String formForCreate(final Model model) {
        log("Action 'formForCreate'");
        final TbDeptLocation tbDeptLocation = new TbDeptLocation();
        populateModel(model, tbDeptLocation, FormMode.CREATE);
        return JSP_FORM;
    }

    @RequestMapping(params = "create", method = RequestMethod.POST)
    public String create(@Valid final TbDeptLocation tbDeptLocation, final BindingResult bindingResult, final Model model,
            final RedirectAttributes redirectAttributes, final HttpServletRequest httpServletRequest) {
        log("Action 'create'");
        try {
            final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
            final int langId = UserSession.getCurrent().getLanguageId();
            final Long empId = UserSession.getCurrent().getEmployee().getEmpId();
            tbDeptLocation.setLgIpMac(UserSession.getCurrent().getEmployee().getEmppiservername());
            final TbDeptLocation tbDeptLocationCreated = tbDeptLocationService.saveDeptLocationData(tbDeptLocation, orgId, langId,
                    empId);

            tbDepLocMapList = tbDepartmentService.getDepartmentData(tbDeptLocation.getLocId(), orgId);
            model.addAttribute(MAIN_ENTITY_NAME, tbDeptLocationCreated);
            return MainetConstants.CommonConstants.SUCCESS_PAGE;
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbDeptLocation.error.create", e);
            return MainetConstants.DEFAULT_EXCEPTION_FORM_VIEW;
        }
    }

    @RequestMapping(params = "addChildForm")
    public String addChildForm(final Model model, @Valid final TbLocationMas tbLocationMas, final BindingResult bindingResult) {
        log("Action 'add Child Form'");
        final String viewName = JSP_CHILD_FORM;
        final String name = "yes";
        final TbDepartment department = new TbDepartment();
        final long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        final List<TbDepartment> deptList = tbDeptLocationService.getAllDeptList(orgId, tbLocationMas.getLocId());
        if (deptList.isEmpty()) {
            return name;
        } else {
            populateListOfTbLocationItems(model);
            model.addAttribute(DEPT_LIST, deptList);
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            model.addAttribute(MainetConstants.FORM_NAME, department);
            model.addAttribute(MAIN_ENTITY_NAME, department);
            return viewName;
        }
    }

    @RequestMapping(params = "getMapedEmpCount")
    public @ResponseBody String getMapedEmpCount2(@RequestParam(DP_DEPTID) final Long dpDeptid) {
        log("Action 'getcount'");
        String message = MainetConstants.PAYMENT_STATUS.FAILURE;
        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        try {
            message = tbDeptLocationService.getEmpCount(tbDepLocMapList, orgId, dpDeptid);
        } catch (final Exception e) {
            log("getMapedEmpCount : Exception - " + e.getMessage());
        }
        return message;
    }

    @RequestMapping(params = "getAvailableDeptCount")
    public @ResponseBody String getAvailableDeptCount(@RequestParam("locId") final Long locId) {
        log("Action 'getcount'");
        String message = MainetConstants.PAYMENT_STATUS.FAILURE;
        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        long count = 0;
        try {
            count = tbDeptLocationService.getAllDeptListcount(orgId, locId);
            if (count == 0) {
                message = MainetConstants.Common_Constant.YES;
            } else {
                message = MainetConstants.Common_Constant.NO;
            }

        } catch (final Exception e) {
            log("getAvailableDeptCount : Exception - " + e.getMessage());
        }
        return message;
    }

    @RequestMapping(params = "delete")
    public @ResponseBody String delete(@RequestParam(DP_DEPTID) final Long dpDeptid) {
        log("Action 'delete'");
        String message = MainetConstants.PAYMENT_STATUS.FAILURE;
        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();

        try {
            for (final TbDeptLocation tbDepLocData : tbDepLocMapList) {
                if (tbDepLocData.getDpDeptid().intValue() == dpDeptid.intValue()) {
                    // tbDepLocData.setAutLo2(CommonMasterConstants.CommonConstants.INACTIVE);
                    tbDeptLocationService.delete(tbDepLocData.getMapid());
                    tbDepLocMapList = tbDepartmentService.getDepartmentData(tbDepLocData.getLocId(), orgId);
                    /*
                     * String name=tbDepLocData.getAutLo1();
                     * tbDeptLocationService.saveDeptLocationDataAfterDelete(tbDepLocData,orgId,langId,empId);
                     * tbDepLocData.setAutLo1(name);
                     */
                    message = MainetConstants.PAYMENT_STATUS.SUCCESS;
                    break;
                }
            }
            message = MainetConstants.PAYMENT_STATUS.SUCCESS;

        } catch (final Exception e) {
            log("Action 'delete' : Exception - " + e.getMessage());
        }
        return message;
    }

    @RequestMapping(params = "getDepartmentData")
    public @ResponseBody void getDepartmentData(@RequestParam(MainetConstants.CommonConstants.LOCID) final Long locId,
            final Model model,
            final HttpServletRequest httpServletRequest) {
        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        try {
            tbDepLocMapList = tbDepartmentService.getDepartmentData(locId, orgId);
        } catch (final Exception e) {
            log("getDepartmentData : Exception - " + e.getMessage());
        }
    }

    @RequestMapping(params = "getChildGridData")
    public @ResponseBody TbDepLocMapResponse getChildGridData(final HttpServletRequest request, final Model model) {
        log("Action 'Get child grid Data'");
        final TbDepLocMapResponse response = new TbDepLocMapResponse();

        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
        final List<TbDeptLocation> depOrgMapGridList = new ArrayList<>();
        for (final TbDeptLocation tbDepLocData : tbDepLocMapList) {
            int langId = UserSession.getCurrent().getLanguageId();
            if (langId == 1) {
                tbDepLocData.setAutLo1(tbDepLocData.getAutLo1());
            } else {
                tbDepLocData.setAutLo1(tbDepLocData.getAutLo3());
            }
            depOrgMapGridList.add(tbDepLocData);
        }

        final int dataSize = depOrgMapGridList.size();
        response.setRows(depOrgMapGridList);
        response.setTotal(dataSize);
        response.setRecords(dataSize);
        response.setPage(page);

        model.addAttribute("list", depOrgMapGridList);

        return response;
    }

    @RequestMapping(params = "createChildData")
    public @ResponseBody String createChildData(@Valid final TbDepartment department, final BindingResult bindingResult,
            final Model model,
            final HttpServletRequest httpServletRequest) {
        log("Action 'create child data'");

        final TbDeptLocation tbDeptLocgMap = new TbDeptLocation();

        try {
            if (!bindingResult.hasErrors()) {
                int counter = 0;

                if (tbDepLocMapList.size() != 0) {
                    for (final TbDeptLocation tbDepLocData : tbDepLocMapList) {
                        if (tbDepLocData.getDpDeptid().longValue() == department.getDpDeptid().longValue()) {
                            if ((tbDepLocData.getIsdeleted() != null)
                                    && tbDepLocData.getIsdeleted().equals(MainetConstants.CommonConstants.ONE)) {
                                tbDepLocData.setDpDeptid(department.getDpDeptid());
                                tbDepLocData.setAutLo1(department.getDpDeptdesc());
                                tbDepLocData.setAutLo2(MainetConstants.Common_Constant.ACTIVE_FLAG);
                                // tbDepLocMapList.add(tbDepLocData);
                            }
                            counter++;
                            break;
                        } else {
                            counter = 0;
                        }
                    }
                    if (counter == 0) {
                        tbDeptLocgMap.setDpDeptid(department.getDpDeptid());
                        tbDeptLocgMap.setAutLo1(department.getDpDeptdesc());
                        tbDeptLocgMap.setAutLo2(MainetConstants.Common_Constant.ACTIVE_FLAG);
                        tbDepLocMapList.add(tbDeptLocgMap);
                    }
                } else {
                    tbDeptLocgMap.setDpDeptid(department.getDpDeptid());
                    tbDeptLocgMap.setAutLo1(department.getDpDeptdesc());
                    tbDeptLocgMap.setAutLo2(MainetConstants.Common_Constant.ACTIVE_FLAG);
                    tbDepLocMapList.add(tbDeptLocgMap);
                }
                model.addAttribute("tbDeporgMap", tbDeptLocgMap);
                return "tbDeporgMap";
            } else {
                return JSP_FORM;
            }
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbCustbanksMas.error.create", e);
            return JSP_FORM;
        }
    }
}
