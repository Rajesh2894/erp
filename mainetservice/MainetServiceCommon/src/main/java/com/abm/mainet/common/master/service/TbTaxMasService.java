/*
 * Created on 22 Apr 2016 ( Time 13:02:48 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.service;

import java.util.List;
import java.util.Map;

import org.springframework.data.repository.query.Param;

import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.TbTaxMasEntity;
import com.abm.mainet.common.integration.acccount.domain.AccountBudgetCodeEntity;
import com.abm.mainet.common.master.dto.TbTaxMas;
import com.abm.mainet.common.utility.LookUp;

/**
 * Business Service Interface for entity TbTaxMas.
 */
public interface TbTaxMasService {

    /**
     * Loads an entity from the database using its Primary Key
     *
     * @param taxId
     * @param orgId
     * @return entity
     */
    TbTaxMas findById(Long taxId, Long orgId);

    /**
     * Loads all entities.
     *
     * @return all entities
     */
    List<TbTaxMas> findAll();

    /**
     * Saves the given entity in the database (create or update)
     *
     * @param entity
     * @return entity
     */
    TbTaxMas save(TbTaxMas entity);

    /**
     * Updates the given entity in the database
     *
     * @param entity
     * @param dataList
     * @param deletedList
     * @param newList
     * @return
     */
    TbTaxMas update(TbTaxMas entity, List<String> newList,
            List<String> deletedList, List<String> dataList);

    /**
     * Creates the given entity in the database
     *
     * @param entity
     * @return
     */
    TbTaxMas create(TbTaxMas entity);

    /**
     * Deletes an entity using its Primary Key
     *
     * @param taxId
     */
    void delete(Long taxId);

    /**
     * @param taxId
     * @param orgid
     * @param dpDeptId
     * @return
     */
    List<TbTaxMas> findAllByTaxOrgId(Long taxId,
            Long orgid, Long dpDeptId);

    List<TbTaxMas> findAllByOrgId(Long orgid);

    /**
     * @param seqNum
     * @param dpDeptId
     * @param orgid
     * @param dispSeq
     * @return
     */
    int validateSequence(Long seqNum, Long dpDeptId,
            Long orgid, String dispSeq, Long taxApplicableAt);

    /**
     * @param orgId
     * @param dpDeptId
     * @param taxCategory
     * @param taxSubCategory
     * @return
     */
    Object[] getTaxCodeByTaxCatagory(Long orgId,
            Long dpDeptId, Long taxCategory,
            Long taxSubCategory);

    TbTaxMas findTaxByTaxIdAndOrgId(Long taxId, long orgid);

    /**
     * @param deptId
     * @param advanceId
     * @param orgid
     * @param lookUpId
     * @param taxApplicableAt
     * @return
     */
    List<TbTaxMasEntity> getTaxMasterByTaxCategoryId(Long deptId,
            Long advanceId, long orgid, long taxApplicableAt);

    /**
     * @param orgId
     * @param deptId
     * @param serviceId
     * @param taxGroup
     * @param taxCategory
     * @param taxSubCategory
     * @return
     */
    boolean validateServiseTax(long orgId, long deptId, long serviceId, String taxGroup, long taxCategory,
            long taxSubCategory);

    /**
     * @param orgid
     * @param deptId
     * @param chargeApplicableAt
     * @param taxSubCategory
     * @param time
     * @return
     */
    List<TbTaxMas> findAllTaxesForBillGeneration(long orgid, Long deptId,
            long chargeApplicableAt, Long taxSubCategory);

    Long fetchSacHeadIdForReceiptDet(Long orgId, Long taxId, String activePrefix);

    /**
     * @param taxId
     * @param orgid
     * @return
     */
    String findTaxDescByTaxIdAndOrgId(Long taxId, long orgid);

    /**
     * @param dpDeptId
     * @param orgid
     * @return
     */
    List<Long> findTaxByDeptIdAndOrgId(Long orgId, Long dpDeptId);

    List<TbTaxMas> findAllByDescId(Long taxDescId,
            Long orgid, Long dpDeptId);

    boolean validateTax(Long orgId, Long descId, Long deptId, Long taxAppl, String taxMethod, String taxGroup,
            Long taxCategory, Long taxSubCategory, String taxCode, Long serviceId);

    AccountBudgetCodeEntity fetchBudgetCodeMas(Long budgetCodeId);

    public TbTaxMas findTaxDetails(Long orgId, String taxCode);

    public String getCpdMode();

    List<LookUp> getAllTaxesBasedOnDept(Long orgId, Long deptId);

    List<TbTaxMas> fetchAllIndependentTaxes(long orgid, Long deptId,
            long chargeApplicableAt, Long taxSubCategory,long chargeApplicableAtBillRcpt);

    List<TbTaxMas> fetchAllDepenentTaxes(long orgid, Long deptId,
            long chargeApplicableAt, Long taxSubCategory,long chargeApplicableAtBillRcpt);

    Integer getNextDisplaySequence(Long orgId, Long deptId, Long taxApllicableType);

    Integer getNextCollectionSequence(Long orgId, Long deptId, Long taxApllicableType);

    TbTaxMas getTaxMasterByTaxCode(Long orgId, Long deptId, String taxCode);

    List<Long> getDistinctTaxCatByDept(Long orgId, Long deptId, List<Long> taxApllicableType);

    public List<LookUp> validateTaxCategory(String prefix, Organisation org);

    Long fetchSacHeadIdForReceiptDetByDemandClass(long orgid, Long taxId, String active, Long taxDMCClass);

    List<Long> fetchTaxIdByDeptIdForTaxGroup(Long govtTaxGrp, Long orgid, Long dpDeptid);

    List<TbTaxMasEntity> fetchAllApplicableServiceCharge(long serviceId, long orgId, Long taxApplicableAt);

    int getCountOfTaxesByTaxCat(Long taxCat, Long orgid, Long dpDeptid);

    List<TbTaxMasEntity> findAllTaxesByChargeAppAtAndTaxSubCat(Long orgid, Long deptId, Long chargeApplicableAt,
            Long taxSubCategory);

    List<TbTaxMas> findAllTaxesForBillPayment(long orgid, Long deptId, long chargeApplicableAt);
    
    List<TbTaxMas> findAllActiveTaxList(long orgid, Long deptId, long chargeApplicableAt);

    Long getTaxId(Long appicableAt ,Long orgId, Long deptId, Long taxCategory, Long taxSubCategory);
    
    List<TbTaxMas> getAllTaxForSupplementryBill(Long appicableAt, Long deptId, Long orgid);

    Long fetchSacHeadIdForSupplementryBill(Long orgId, Long taxId,Long appicableAt) ;

    List<TbTaxMas> findAllNotActiveTaxesForBillGeneration(long orgid, Long deptId,
            long chargeApplicableAt, Long taxSubCategory);

	List<LookUp> findAllTaxesBasedOnApplicableAt(Long orgId, Long deptId, long chargeApplicableAt);

	public List<TbTaxMas> findAllTaxesForBillGenerationByServiceId(final long orgid, final Long deptId,
			final long chargeApplicableAt,final Long serviceId);

	List<TbTaxMas> findAllByOrgIdAdnTaxDesc(Long orgid);

	String findTaxDescRegByTaxIdAndOrgId(Long taxId, long orgid);

	Long getTaxIdByServiceId(Long appicableAt, Long orgId, Long deptId, Long taxCategory, Long taxSubCategory,
			long serviceId, String taxActive);

	List<TbTaxMas> findTaxesByDescAndOrgId(String taxDesc, Long orgId);

	TbTaxMas getTaxIdByServiceIdOrgIdDeptId(Long serviceId, Long orgId, Long deptId);
	
	Long getDisplayIdByTaxId(Long taxId);
	
	TbTaxMas findByTaxDescIdAndOrgid(Long taxDescId,Long orgid);

	List<LookUp> getAllTaxesBasedOnDept(Long orgId, int langId, Long deptId);

	Map<Long, String> getTaxMasterByTaxCategoryIdByServiceId(Long smServiceId, Long taxCatId, long orgid);

	String getAcHeadFromTaxMaster(Long taxId, Long smServiceId, long orgid);
}

