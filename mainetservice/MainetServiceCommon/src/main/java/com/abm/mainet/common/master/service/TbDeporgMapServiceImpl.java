/*
 * Created on 27 Jul 2015 ( Time 17:56:33 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.DeptOrgMap;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbDeporgMap;
import com.abm.mainet.common.master.mapper.TbDeporgMapServiceMapper;
import com.abm.mainet.common.master.repository.TbDeporgMapJpaRepository;
import com.abm.mainet.common.service.DepartmentProvisionService;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;

/**
 * Implementation of TbDeporgMapService
 */
@Component
@Transactional
public class TbDeporgMapServiceImpl implements TbDeporgMapService {

    @Resource
    private TbDeporgMapJpaRepository tbDeporgMapJpaRepository;

    @Resource
    private TbDeporgMapServiceMapper tbDeporgMapServiceMapper;

    // @Resource
    // private DeptOrgMapProvisionService deptOrgMapProvisionService;

    @Resource
    private DepartmentProvisionService departmentProvisionService;

    @Resource
    private TbDepartmentService departmentService;

    @Override
    public TbDeporgMap findById(final Long mapId) {
        final DeptOrgMap tbDeporgMapEntity = tbDeporgMapJpaRepository.findOne(mapId);
        return tbDeporgMapServiceMapper.mapTbDeporgMapEntityToTbDeporgMap(tbDeporgMapEntity);
    }

    @Override
    public TbDeporgMap update(final TbDeporgMap tbDeporgMap) {
        final DeptOrgMap tbDeporgMapEntity = tbDeporgMapJpaRepository.findOne(tbDeporgMap.getMapId());
        tbDeporgMapServiceMapper.mapTbDeporgMapToTbDeporgMapEntity(tbDeporgMap, tbDeporgMapEntity);
        final DeptOrgMap tbDeporgMapEntitySaved = tbDeporgMapJpaRepository.save(tbDeporgMapEntity);
        TbDeporgMap updatedMapDTO = tbDeporgMapServiceMapper.mapTbDeporgMapEntityToTbDeporgMap(tbDeporgMapEntitySaved);

        /**
         * this service is used to push updated mapping data from MAINet to Other Application like GRP based on flag
         */
        TbDepartment tbDeptDto = departmentService.findById(tbDeporgMapEntitySaved.getDepartment().getDpDeptid());
        updatedMapDTO.setDpDeptcode(tbDeptDto.getDpDeptcode());
        updatedMapDTO.setDpDeptdesc(tbDeptDto.getDpDeptdesc());
        updatedMapDTO.setDpDeptdescReg(tbDeptDto.getDpNameMar());
        updatedMapDTO.setDeptStatus(tbDeptDto.getStatus());
        // deptOrgMapProvisionService.updateDeptOrgMapping(updatedMapDTO);

        departmentProvisionService.updateDepartment(updatedMapDTO);

        return updatedMapDTO;
    }

    public TbDeporgMapJpaRepository getTbDeporgMapJpaRepository() {
        return tbDeporgMapJpaRepository;
    }

    public void setTbDeporgMapJpaRepository(final TbDeporgMapJpaRepository tbDeporgMapJpaRepository) {
        this.tbDeporgMapJpaRepository = tbDeporgMapJpaRepository;
    }

    public TbDeporgMapServiceMapper getTbDeporgMapServiceMapper() {
        return tbDeporgMapServiceMapper;
    }

    public void setTbDeporgMapServiceMapper(final TbDeporgMapServiceMapper tbDeporgMapServiceMapper) {
        this.tbDeporgMapServiceMapper = tbDeporgMapServiceMapper;
    }

    @Override
    public List<TbDeporgMap> findDeprgById(final Long dpDeptid) {
        final List<DeptOrgMap> entities = tbDeporgMapJpaRepository.findDepOrgById(dpDeptid.longValue());
        final List<TbDeporgMap> beans = new ArrayList<>();
        for (final DeptOrgMap tbDeporgMapEntity : entities) {
            beans.add(tbDeporgMapServiceMapper.mapTbDeporgMapEntityToTbDeporgMap(tbDeporgMapEntity));
        }
        return beans;

    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.deporgmap.business.service.
     * TbDeporgMapService#createDepOrgData(com.abm.mainetservice.web.masters. deporgmap.bean.TbDeporgMap, java.util.List)
     */
    @Override
    public TbDeporgMap createDepOrgData(final TbDeporgMap tbDeporgMap, final List<TbDeporgMap> tbDeporgMapList) {

        DeptOrgMap deptOrgMap = null;
        Department department = null;
        final Date date = new Date();
        /*
         * final Organisation org = UserSession.getCurrent().getOrganisation(); final Employee sessionEmp =
         * UserSession.getCurrent().getEmployee(); final int langId = UserSession.getCurrent().getLanguageId();
         */
        for (final TbDeporgMap deporgMap : tbDeporgMapList) {
            if ((deporgMap.getMapId() == null) || (deporgMap.getMapId() == 0)) {
                deptOrgMap = new DeptOrgMap();
                department = new Department();

                department.setDpDeptid(deporgMap.getDpDeptid());
                tbDeporgMapServiceMapper.mapTbDeporgMapToTbDeporgMapEntity(tbDeporgMap, deptOrgMap);
                deptOrgMap.setDepartment(department);
                deptOrgMap.setOrgid(deptOrgMap.getOrgid());
                deptOrgMap.setUserId(deptOrgMap.getUserId());
                deptOrgMap.setLangId(deptOrgMap.getLangId());
                deptOrgMap.setLmoddate(date);
                deptOrgMap.setLgIpMac(Utility.getMacAddress());
                deptOrgMap.setMapStatus(deporgMap.getMapStatus());
                DeptOrgMap savedDeptOrgMapEntity = tbDeporgMapJpaRepository.save(deptOrgMap);

                /**
                 * this service is used to create Department Mapping with organization.
                 * @param savedDeptOrgMapDTO
                 */
                createProvisionPosting(savedDeptOrgMapEntity);

            }
        }
        return tbDeporgMap;
    }

    private void createProvisionPosting(DeptOrgMap savedDeptOrgMapEntity) {
        TbDeporgMap savedDeptOrgMapDTO = tbDeporgMapServiceMapper
                .mapTbDeporgMapEntityToTbDeporgMap(savedDeptOrgMapEntity);
        TbDepartment tbDeptDto = departmentService.findById(savedDeptOrgMapEntity.getDepartment().getDpDeptid());

        // set department details
        savedDeptOrgMapDTO.setDpDeptcode(tbDeptDto.getDpDeptcode());
        savedDeptOrgMapDTO.setDpDeptdesc(tbDeptDto.getDpDeptdesc());
        savedDeptOrgMapDTO.setDpDeptdescReg(tbDeptDto.getDpNameMar());
        savedDeptOrgMapDTO.setDeptStatus(tbDeptDto.getStatus());
        // deptOrgMapProvisionService.createDeptOrgMapping(savedDeptOrgMapDTO);
        departmentProvisionService.createDepartment(savedDeptOrgMapDTO);
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.deporgmap.business.service. TbDeporgMapService#getDepartmentData(java.lang.Long)
     */
    @Override
    public List<TbDeporgMap> getDepartmentData(final Long organisationId) {
        final List<TbDeporgMap> tbDeporgMapList = new ArrayList<>();
        TbDeporgMap deporgMap = null;
        DeptOrgMap deptOrgMapEntity = null;
        Department department = null;
        final List<Object> departmentList = tbDeporgMapJpaRepository.getDepartmentData(organisationId);

        final int dataSize = departmentList.size();
        for (int iCounter = 0; iCounter < dataSize; iCounter++) {
            final Object[] objData = (Object[]) departmentList.get(iCounter);
            department = (Department) objData[0];
            deptOrgMapEntity = (DeptOrgMap) objData[1];
            deporgMap = tbDeporgMapServiceMapper.mapTbDeporgMapEntityToTbDeporgMap(deptOrgMapEntity);

            deporgMap.setDpDeptid(department.getDpDeptid());
            deporgMap.setDpDeptdesc(department.getDpDeptdesc());
            deporgMap.setDpDeptdescReg(department.getDpNameMar());
            deporgMap.setDeptStatus(department.getStatus());
            deporgMap.setLgIpMac(deptOrgMapEntity.getLgIpMac());
            deporgMap.setUserId(Long.valueOf(deptOrgMapEntity.getUserId()));
            if (deptOrgMapEntity.getLmoddate() != null) {
                deporgMap.setLmoddate(deptOrgMapEntity.getLmoddate());
            }
            if (deptOrgMapEntity.getUpdatedBy() != null) {
                deporgMap.setUpdatedBy(Long.valueOf(deptOrgMapEntity.getUpdatedBy()));
            }
            if (deptOrgMapEntity.getUpdatedDate() != null) {
                deporgMap.setUpdatedDate(deptOrgMapEntity.getUpdatedDate());
            }

            tbDeporgMapList.add(deporgMap);
        }
        return tbDeporgMapList;
    }

    @Override
    public List<DeptOrgMap> checkDepOrgMapExist(final Long dpDeptId) {
        return tbDeporgMapJpaRepository.findDepOrgById(dpDeptId);
    }

    @Override
    @Transactional
    public void deleteMap(final Long mapId, final UserSession userSession) {
        DeptOrgMap deptOrgMapEntity = tbDeporgMapJpaRepository.findOne(mapId);

        TbDeporgMap mapedDTO = tbDeporgMapServiceMapper.mapTbDeporgMapEntityToTbDeporgMap(deptOrgMapEntity);
        mapedDTO.setMapStatus(MainetConstants.Common_Constant.INACTIVE_FLAG);
        // deptOrgMapProvisionService.updateDeptOrgMapping(mapedDTO);
        TbDepartment tbDeptDto = departmentService.findById(deptOrgMapEntity.getDepartment().getDpDeptid());
        // set department details
        mapedDTO.setDpDeptcode(tbDeptDto.getDpDeptcode());
        mapedDTO.setDpDeptdesc(tbDeptDto.getDpDeptdesc());
        mapedDTO.setDpDeptdescReg(tbDeptDto.getDpNameMar());
        mapedDTO.setDeptStatus(tbDeptDto.getStatus());
        departmentProvisionService.updateDepartment(mapedDTO);
        tbDeporgMapJpaRepository.deleteMapping(mapId);

    }

    @Override
    @Transactional
    public void createDefaultDepOrgMap(final DeptOrgMap deptOrgMap) {
        DeptOrgMap savedDeptOrgMapEntity = tbDeporgMapJpaRepository.save(deptOrgMap);
        /**
         * this service is used to create Department Mapping with organization.
         * @param savedDeptOrgMapDTO
         */
        createProvisionPosting(savedDeptOrgMapEntity);
    }

    @Override
    @Transactional
    public DeptOrgMap findByOrgIdDeptId(final Long orgId, final Long dpDeptId) {
        return tbDeporgMapJpaRepository.findByOrgIdDeptId(orgId, dpDeptId);
    }

    @Override
    public boolean validateActualLocationMapping(final Long deptId) {
        boolean isMapped = false;
        final int count = tbDeporgMapJpaRepository.findActualDeptMapping(deptId);
        if (count > 0) {
            isMapped = true;
        }
        return isMapped;
    }

}
