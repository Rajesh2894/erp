/*
 * Created on 22 Apr 2016 ( Time 13:02:34 ) Generated by Telosys Tools Generator
 * ( version 2.1.1 )
 */
package com.abm.mainet.common.master.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.Hibernate;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.audit.service.AuditService;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.BUG_HEAD_OPENING_BALANCE_MASTER;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.Employee;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.ServiceMaster;
import com.abm.mainet.common.domain.TbTaxDetMasEntity;
import com.abm.mainet.common.domain.TbTaxDetMasEntityHistory;
import com.abm.mainet.common.domain.TbTaxMasEntity;
import com.abm.mainet.common.domain.TbTaxMasEntityHistory;
import com.abm.mainet.common.integration.acccount.domain.AccountBudgetCodeEntity;
import com.abm.mainet.common.integration.acccount.repository.SecondaryheadMasterJpaRepository;
import com.abm.mainet.common.integration.acccount.service.SecondaryheadMasterService;
import com.abm.mainet.common.master.dto.TbTaxAcMappingBean;
import com.abm.mainet.common.master.dto.TbTaxDetMas;
import com.abm.mainet.common.master.dto.TbTaxMas;
import com.abm.mainet.common.master.mapper.TbTaxDetMasServiceMapper;
import com.abm.mainet.common.master.mapper.TbTaxMasServiceMapper;
import com.abm.mainet.common.master.repository.AccountTaxHeadMappingRepository;
import com.abm.mainet.common.master.repository.TbTaxDetMasJpaRepository;
import com.abm.mainet.common.master.repository.TbTaxMasJpaRepository;
import com.abm.mainet.common.repository.ServiceMasterRepository;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.SeqGenFunctionUtility;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;

/**
 * Implementation of TbTaxMasService
 */
@Component
@Transactional
public class TbTaxMasServiceImpl implements TbTaxMasService {

	@Resource
	private TbTaxMasJpaRepository tbTaxMasJpaRepository;

	@Resource
	private AccountTaxHeadMappingRepository accountTaxHeadMappingRepository;

	@Resource
	private TbTaxMasServiceMapper tbTaxMasServiceMapper;

	@Resource
	private TbTaxDetMasServiceMapper taxDetMasServiceMapper;

	@Resource
	SeqGenFunctionUtility seqGenFunctionUtility;

	@Resource
	private TbTaxDetMasJpaRepository tbTaxDetMasJpaRepository;

	@Resource
	private ServiceMasterRepository serviceMasterRespository;

	@Resource
	private TbTaxAcMappingService tbTaxBudgetcodeService;

	@Autowired
	private AuditService auditService;
	
	@Resource
	private SecondaryheadMasterJpaRepository secondaryheadMaster;

	public static final String TB_TAX_MAS = "TB_TAX_MAS";
	public static final String TAX_ID = "TAX_ID";
	public static final String TB_TAX_DET = "TB_TAX_DET";
	public static final String TD_TAXDET = "TD_TAXDET";

	private static final Logger LOGGER = Logger.getLogger(TbTaxMasServiceImpl.class);

	@Override
	public TbTaxMas findById(final Long taxId, final Long orgId) {
		final TbTaxMasEntity tbTaxMasEntity = tbTaxMasJpaRepository.findOne(taxId);
		final List<TbTaxDetMasEntity> listOfTbTaxDetMas = tbTaxDetMasJpaRepository
				.findByTaxOrgId(tbTaxMasEntity.getTaxId(), orgId);
		tbTaxMasEntity.setListOfTbTaxDetMas(listOfTbTaxDetMas);
		final List<TbTaxDetMas> taxDetMasList = new ArrayList<>();
		final List<String> taxDetMasIdList = new ArrayList<>();
		final TbTaxMas tbTaxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);

		if (tbTaxMasEntity.getDepartment() != null) {
			tbTaxMas.setDpDeptId(tbTaxMasEntity.getDepartment().getDpDeptid());
		}

		for (final TbTaxDetMasEntity tbTaxDetMasEntity : listOfTbTaxDetMas) {
			if (tbTaxDetMasEntity.getTdDependFact() != null) {
				taxDetMasIdList.add(tbTaxDetMasEntity.getTdDependFact().toString());
			}
			taxDetMasList.add(taxDetMasServiceMapper.mapTbTaxDetMasEntityToTbTaxDetMas(tbTaxDetMasEntity));
		}
		tbTaxMas.setTaxDetIdList(taxDetMasIdList);
		tbTaxMas.setTaxDetMasList(taxDetMasList);

		final TbTaxMasEntity account = accountTaxHeadMappingRepository.findByTaxId(taxId);

		tbTaxMas.setTaxHeadMapping(tbTaxMasServiceMapper.mapAccountToTax(account));
		if (tbTaxMasEntity.getTaxActive().equals(MainetConstants.Y_FLAG)) {
			tbTaxMas.setActiveChkBox(true);
		} else {
			tbTaxMas.setActiveChkBox(false);
		}

		return tbTaxMas;
	}

	@Override
	public List<TbTaxMas> findAll() {
		final Iterable<TbTaxMasEntity> entities = tbTaxMasJpaRepository.findAll();

		final List<TbTaxMas> beans = new ArrayList<>();
		for (final TbTaxMasEntity tbTaxMasEntity : entities) {
			beans.add(tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity));
		}
		return beans;
	}

	@Override
	public TbTaxMas save(final TbTaxMas tbTaxMas) {
		return save(tbTaxMas);
	}

	@Override
	public TbTaxMas create(final TbTaxMas tbTaxMas) {

		final TbTaxMasEntity tbTaxMasEntity = new TbTaxMasEntity();
		final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
		final Employee emp = UserSession.getCurrent().getEmployee();

		final long taxCode = seqGenFunctionUtility.generateSequenceNo(MainetConstants.CommonConstants.COM, TB_TAX_MAS,
				TAX_ID, orgId, null, null);
		tbTaxMas.setTaxCode(tbTaxMas.getDeptCode() + taxCode);

		final Department department = new Department();
		department.setDpDeptid(tbTaxMas.getDpDeptId());

		tbTaxMasEntity.setDepartment(department);

		final Long taxDescId = tbTaxMas.getTaxDescId();
		final LookUp lookupforDesc = CommonMasterUtility.getNonHierarchicalLookUpObject(taxDescId);
		tbTaxMas.setTaxDesc(lookupforDesc.getDescLangFirst());
		tbTaxMas.setTaxActive(MainetConstants.Y_FLAG);

		tbTaxMasServiceMapper.mapTbTaxMasToTbTaxMasEntity(tbTaxMas, tbTaxMasEntity);
		tbTaxMasEntity.setOrgid(orgId);
		tbTaxMasEntity.setCreatedBy(emp.getEmpId());
		tbTaxMasEntity.setCreatedDate(new Date());
		tbTaxMasEntity.setUpdatedBy(emp.getEmpId());
		tbTaxMasEntity.setUpdatedDate(new Date());
		tbTaxMasEntity.setLgIpMac(emp.getEmppiservername());
		final List<TbTaxDetMasEntity> taxDetMasEntityList = new ArrayList<>();
		TbTaxDetMasEntity tbTaxDetMasEntity = null;

		for (final String dependsData : tbTaxMas.getTaxDetIdList()) {
			tbTaxDetMasEntity = new TbTaxDetMasEntity();
			tbTaxDetMasEntity.setTdDependFact(Long.valueOf(dependsData));
			tbTaxDetMasEntity.setOrgid(orgId);
			tbTaxDetMasEntity.setStatus(MainetConstants.Common_Constant.ACTIVE_FLAG);

			tbTaxDetMasEntity.setCreatedBy(emp.getEmpId());
			tbTaxDetMasEntity.setLgIpMac(Utility.getMacAddress());
			tbTaxDetMasEntity.setTbTaxMas(tbTaxMasEntity);
			tbTaxDetMasEntity.setCreatedDate(new Date());
			taxDetMasEntityList.add(tbTaxDetMasEntity);
		}
		tbTaxMasEntity.setListOfTbTaxDetMas(taxDetMasEntityList);
		final TbTaxMasEntity tbTaxMasEntitySaved = tbTaxMasJpaRepository.save(tbTaxMasEntity);
		/**
		 * Defect #27535 added as History of tax master table is not getting maintained
		 * in DB
		 */
		try {
			List<Object> detHistList = new ArrayList<>();
			TbTaxMasEntityHistory tbTaxMasHist = new TbTaxMasEntityHistory();
			tbTaxMasHist.setStatus(MainetConstants.InsertMode.ADD.getStatus());
			auditService.createHistory(tbTaxMasEntity, tbTaxMasHist);
			tbTaxMasEntitySaved.getListOfTbTaxDetMas().forEach(savedDetEntity -> {
				TbTaxDetMasEntityHistory detHistory = new TbTaxDetMasEntityHistory();
				BeanUtils.copyProperties(savedDetEntity, detHistory);
				detHistory.setTbTaxMas(savedDetEntity.getTbTaxMas());
				detHistory.setHstatus(MainetConstants.InsertMode.ADD.getStatus());
				detHistList.add(detHistory);
			});
			auditService.createHistoryForListObj(detHistList);

		} catch (Exception exception) {
			LOGGER.error("Could not make audit entry for Tax Master " + tbTaxMasEntitySaved, exception);
		}

		TbTaxAcMappingBean tbTaxBudgetBeanSave = null;

		if (tbTaxMas.getTaxBudgetBean() != null) {
			for (final TbTaxAcMappingBean bean : tbTaxMas.getTaxBudgetBean()) {
				bean.setTaxbActive(MainetConstants.STATUS.ACTIVE);
				if (bean.getSacHeadId() != null) {
					tbTaxBudgetBeanSave = new TbTaxAcMappingBean();
					tbTaxBudgetBeanSave.setSacHeadId(bean.getSacHeadId());
					tbTaxBudgetBeanSave.setTaxId(tbTaxMasEntitySaved.getTaxId());
					tbTaxBudgetBeanSave.setTaxbActive(bean.getTaxbActive());
					tbTaxBudgetBeanSave.setDmdClass(bean.getDmdClass());
					tbTaxBudgetBeanSave.setCreatedBy(emp.getEmpId());
					tbTaxBudgetBeanSave.setOrgId(orgId);
					tbTaxBudgetBeanSave.setCreatedDate(new Date());
					tbTaxBudgetBeanSave.setLgIpMac(Utility.getMacAddress());
					tbTaxBudgetcodeService.create(tbTaxBudgetBeanSave);
				}
			}
		}

		return tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntitySaved);
	}

	@Override
	public TbTaxMas update(final TbTaxMas tbTaxMas, final List<String> newList, final List<String> deletedList,
			final List<String> dataList) {

		final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
		final Employee emp = UserSession.getCurrent().getEmployee();

		final Date curDate = new Date();
		final TbTaxMasEntity tbTaxMasEntity = tbTaxMasJpaRepository.findOne(tbTaxMas.getTaxId());
		if (tbTaxMas.isActiveChkBox()) {
			tbTaxMas.setTaxActive(MainetConstants.Y_FLAG);
		} else {
			tbTaxMas.setTaxActive(MainetConstants.N_FLAG);
		}
		tbTaxMas.setCreatedDate(tbTaxMasEntity.getCreatedDate());
		tbTaxMasServiceMapper.mapTbTaxMasToTbTaxMasEntity(tbTaxMas, tbTaxMasEntity);
		tbTaxMasEntity.setUpdatedBy(emp.getEmpId());
		tbTaxMasEntity.setUpdatedDate(curDate);
		tbTaxMasEntity.setUpdatedBy(emp.getEmpId());
		tbTaxMasEntity.setLgIpMacUpd(emp.getEmppiservername());
		final Long taxDescId = tbTaxMas.getTaxDescId();
		final LookUp lookupforDesc = CommonMasterUtility.getNonHierarchicalLookUpObject(taxDescId);
		tbTaxMasEntity.setTaxDesc(lookupforDesc.getDescLangFirst());

		final Department department = new Department();
		department.setDpDeptid(tbTaxMas.getDpDeptId());

		tbTaxMasEntity.setDepartment(department);

		final List<TbTaxDetMasEntity> listOfTbTaxDetMas = tbTaxDetMasJpaRepository
				.findByTaxOrgId(tbTaxMasEntity.getTaxId(), orgId);
		final List<TbTaxDetMasEntity> taxDetMasEntityList = new ArrayList<>();
		TbTaxDetMasEntity tbTaxDetMasEntity = null;

		for (final String dependsId : newList) {
			tbTaxDetMasEntity = new TbTaxDetMasEntity();
			// This sequence code is commented due to already sequence exists in Entity
			/*
			 * final long taxDetId =
			 * seqGenFunctionUtility.generateSequenceNo(MainetConstants.CommonConstants.COM,
			 * TB_TAX_DET, TD_TAXDET, orgId, null, null);
			 * tbTaxDetMasEntity.setTdTaxdet(taxDetId);
			 */
			tbTaxDetMasEntity.setTdDependFact(Long.valueOf(dependsId));
			tbTaxDetMasEntity.setOrgid(orgId);
			tbTaxDetMasEntity.setStatus(MainetConstants.Common_Constant.ACTIVE_FLAG);
			tbTaxDetMasEntity.setLgIpMac(Utility.getMacAddress());
			tbTaxDetMasEntity.setCreatedBy(emp.getEmpId());
			tbTaxDetMasEntity.setUpdatedDate(curDate);
			tbTaxDetMasEntity.setUpdatedBy(emp.getEmpId());
			tbTaxDetMasEntity.setTbTaxMas(tbTaxMasEntity);
			tbTaxDetMasEntity.setCreatedDate(new Date());
			taxDetMasEntityList.add(tbTaxDetMasEntity);
		}

		int counter = 0;
		for (final TbTaxDetMasEntity curDependsId : listOfTbTaxDetMas) {
			if (!CollectionUtils.isEmpty(deletedList)) {
				for (final String dependsId : deletedList) {
					if (curDependsId.getTdDependFact().intValue() != Integer.valueOf(dependsId)) {
						counter++;
					} else {
						counter = 0;
						break;
					}
				}

				if (counter == 0) {
					curDependsId.setCreatedBy(emp.getEmpId());
					curDependsId.setStatus(MainetConstants.Common_Constant.INACTIVE_FLAG);
					taxDetMasEntityList.add(curDependsId);
				}
			}
		}

		counter = 0;
		for (final TbTaxDetMasEntity curDependsId : listOfTbTaxDetMas) {
			for (final String dependsId1 : dataList) {
				if (curDependsId.getTdDependFact().intValue() != Integer.valueOf(dependsId1)) {
					counter++;
				} else {
					counter = 0;
					break;
				}
			}
			if (counter == 0) {
				curDependsId.setCreatedBy(emp.getEmpId());
				curDependsId.setUpdatedBy(UserSession.getCurrent().getEmployee().getEmpId());
				curDependsId.setUpdatedDate(curDate);
				curDependsId.setLgIpMacUpd(Utility.getMacAddress());
				taxDetMasEntityList.add(curDependsId);
			}
		}

		tbTaxMasEntity.setListOfTbTaxDetMas(taxDetMasEntityList);
		final TbTaxMasEntity tbTaxMasEntitySaved = tbTaxMasJpaRepository.save(tbTaxMasEntity);
		/**
		 * Defect #27535 added as History of tax master table is not getting maintained
		 * in DB
		 */
		try {
			List<Object> detHistList = new ArrayList<>();
			TbTaxMasEntityHistory tbTaxMasHist = new TbTaxMasEntityHistory();
			tbTaxMasHist.setStatus(MainetConstants.InsertMode.UPDATE.getStatus());
			auditService.createHistory(tbTaxMasEntity, tbTaxMasHist);
			tbTaxMasEntitySaved.getListOfTbTaxDetMas().forEach(savedDetEntity -> {
				TbTaxDetMasEntityHistory detHistory = new TbTaxDetMasEntityHistory();
				BeanUtils.copyProperties(savedDetEntity, detHistory);
				detHistory.setTbTaxMas(savedDetEntity.getTbTaxMas());
				detHistory.setHstatus(MainetConstants.InsertMode.UPDATE.getStatus());
				detHistList.add(detHistory);
			});
			auditService.createHistoryForListObj(detHistList);

		} catch (Exception exception) {
			LOGGER.error("Could not make audit entry for Tax Master " + tbTaxMasEntitySaved, exception);
		}

		final List<TbTaxAcMappingBean> beanList = tbTaxMas.getTaxBudgetBean();
		TbTaxAcMappingBean taxBean = null;
		if (beanList != null) {
			for (final TbTaxAcMappingBean bean : beanList) {
				if ((bean.getSacHeadId() != null) && (bean.getTaxbActive() != null)) {
					if (bean.getTaxbId() != null) {
						taxBean = tbTaxBudgetcodeService.findById(bean.getTaxbId());
						taxBean.setSacHeadId(bean.getSacHeadId());
						taxBean.setTaxbActive(bean.getTaxbActive());
						taxBean.setDmdClass(bean.getDmdClass());
						taxBean.setLgIpMac(Utility.getMacAddress());
						taxBean.setUpdatedDate(curDate);
						taxBean.setUpdatedBy(emp.getEmpId());
						tbTaxBudgetcodeService.update(taxBean);
					} else {
						taxBean = new TbTaxAcMappingBean();
						taxBean.setSacHeadId(bean.getSacHeadId());
						taxBean.setTaxbActive(bean.getTaxbActive());
						taxBean.setDmdClass(bean.getDmdClass());
						taxBean.setOrgId(orgId);
						taxBean.setLgIpMac(Utility.getMacAddress());
						taxBean.setCreatedBy(emp.getEmpId());
						taxBean.setCreatedDate(curDate);
						taxBean.setTaxId(tbTaxMasEntity.getTaxId());
						tbTaxBudgetcodeService.create(taxBean);
					}

				}
			}
		}
		return tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntitySaved);
	}

	@Override
	public void delete(final Long taxId) {
		tbTaxMasJpaRepository.delete(taxId);
	}

	public TbTaxMasJpaRepository getTbTaxMasJpaRepository() {
		return tbTaxMasJpaRepository;
	}

	public void setTbTaxMasJpaRepository(final TbTaxMasJpaRepository tbTaxMasJpaRepository) {
		this.tbTaxMasJpaRepository = tbTaxMasJpaRepository;
	}

	public TbTaxMasServiceMapper getTbTaxMasServiceMapper() {
		return tbTaxMasServiceMapper;
	}

	public void setTbTaxMasServiceMapper(final TbTaxMasServiceMapper tbTaxMasServiceMapper) {
		this.tbTaxMasServiceMapper = tbTaxMasServiceMapper;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.masters.taxmaster.business.service.TbTaxMasService
	 * #getTaxMasterByTaxCategoryId(com.abm.mainetservice.web.common.entity.
	 * Department, java.lang.Long, long, long)
	 */
	@Override
	public List<TbTaxMasEntity> getTaxMasterByTaxCategoryId(final Long deptId, final Long taxCatId, final long orgid,
			final long taxApplicableAt) {
		return tbTaxMasJpaRepository.getTaxMasterByTaxCategoryId(deptId, taxCatId, orgid, taxApplicableAt);
	}
	
	@Override
	public Map<Long, String> getTaxMasterByTaxCategoryIdByServiceId(final Long smServiceId, final Long taxCatId, final long orgid) {
		Map<Long, String> taxMasMap = new LinkedHashMap<>();
        List<Object[]> tax= secondaryheadMaster.getTaxMasterByTaxCategoryIdByServiceId(smServiceId, taxCatId, orgid);
        for (Object[] objects : tax) {
            if (objects[0] != null && objects[1] != null) {
            	taxMasMap.put((Long) objects[0], (String) objects[1]);
            }
        }
		return taxMasMap;
	}
	
	@Override
	public String getAcHeadFromTaxMaster(final Long taxId, final Long smServiceId, final long orgid) {
		String tax = secondaryheadMaster.getAcHeadFromTaxMaster(taxId, smServiceId, orgid);
		return tax;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.masters.taxmaster.business.service.TbTaxMasService
	 * #findAllByTaxOrgId(java.lang.Long, java.lang.Long)
	 */
	@Override
	public List<TbTaxMas> findAllByTaxOrgId(final Long taxId, final Long orgid, final Long dpDeptId) {

		List<TbTaxMasEntity> entities = Collections.emptyList();
		if ((taxId != null) && (dpDeptId == null)) {
			entities = tbTaxMasJpaRepository.findAllByTaxOrgId(taxId, orgid);
		} else if ((taxId != null) && (dpDeptId != null)) {
			entities = tbTaxMasJpaRepository.findAllByTaxDeptOrgId(taxId, orgid, dpDeptId);
		} else if ((taxId == null) && (dpDeptId != null)) {
			entities = tbTaxMasJpaRepository.findAllByDeptOrgId(dpDeptId, orgid);
		}

		final List<TbTaxMas> beans = new ArrayList<>();
		TbTaxMas tbTaxMas = null;

		final Organisation organisation = new Organisation();
		organisation.setOrgid(orgid);

		final List<LookUp> fsdPrefixData = CommonMasterUtility.getListLookup(PrefixConstants.LookUp.FLAT_SLAB_DEPEND,
				organisation);

		ServiceMaster serviceBean = null;

		for (final TbTaxMasEntity tbTaxMasEntity : entities) {
			tbTaxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
			for (final LookUp lookUp : fsdPrefixData) {
				if (!StringUtils.isEmpty(tbTaxMasEntity.getTaxMethod())
						&& (Long.parseLong(tbTaxMasEntity.getTaxMethod()) == lookUp.getLookUpId())) {
					tbTaxMas.setTaxMethodName(lookUp.getLookUpDesc());
					break;
				}
			}
			if (tbTaxMasEntity.getSmServiceId() != null) {
				serviceBean = serviceMasterRespository.findOne(tbTaxMasEntity.getSmServiceId());
				if (serviceBean != null && serviceBean.getSmServiceName() != null )
				tbTaxMas.setSmServiceName(serviceBean.getSmServiceName()); 
			} else {
				tbTaxMas.setSmServiceName(null);
			}
			if(tbTaxMas.getTaxGroup()!=null) {
			final String taxGroup = CommonMasterUtility
					.getNonHierarchicalLookUpObject(Long.valueOf(tbTaxMas.getTaxGroup()), organisation).getLookUpDesc();
			tbTaxMas.setTaxGroupName(taxGroup);
			}
			final String taxcategory2 = CommonMasterUtility
					.getHierarchicalLookUp(Long.valueOf(tbTaxMas.getTaxCategory2()), organisation).getLookUpDesc();
			tbTaxMas.setTaxCategory2Name(taxcategory2);

			beans.add(tbTaxMas);
		}
		return beans;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.masters.taxmaster.business.service.TbTaxMasService
	 * #findAllByOrgId(java.lang.Long)
	 */
	@Override
	public List<TbTaxMas> findAllByOrgId(final Long orgid) {
		final List<TbTaxMasEntity> entities = tbTaxMasJpaRepository.findAllByOrgId(orgid);

		final List<TbTaxMas> beans = new ArrayList<>();
		for (final TbTaxMasEntity tbTaxMasEntity : entities) {
			beans.add(tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity));
		}
		return beans;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.masters.taxmaster.business.service.TbTaxMasService
	 * #validateSequence(java.lang.Long, java.lang.Long, java.lang.Long)
	 */
	@Override
	public int validateSequence(final Long seqNum, final Long dpDeptId, final Long orgid, final String dispSeq,
			final Long taxApplicableAt) {
		int counter = 0;
		Long dataCounter = null;
		if (!StringUtils.isEmpty(dispSeq) && MainetConstants.DETAIL.equals(dispSeq)) {
			dataCounter = tbTaxMasJpaRepository.validateSequence(seqNum, dpDeptId, orgid, taxApplicableAt);
		} else {
			dataCounter = tbTaxMasJpaRepository.validateCollSequence(seqNum, dpDeptId, orgid, taxApplicableAt);
		}

		if (dataCounter != null) {
			counter = dataCounter.intValue();
		}
		return counter;
	}

	@Override
	public Object[] getTaxCodeByTaxCatagory(final Long orgId, final Long dpDeptId, final Long taxCategory,
			final Long taxSubCategory) {
		return tbTaxMasJpaRepository.getTaxCodeByTaxCatagory(orgId, dpDeptId, taxCategory, taxSubCategory);
	}

	@Override
	public boolean validateServiseTax(final long orgId, final long deptId, final long serviceId, final String taxGroup,
			final long taxCategory, final long taxSubCategory) {
		final long count = tbTaxMasJpaRepository.validateServiceTax(orgId, deptId, serviceId, taxGroup, taxCategory,
				taxSubCategory);
		return count == 0 ? true : false;
	}

	@Override
	public TbTaxMas findTaxByTaxIdAndOrgId(final Long taxId, final long orgid) {
		final Organisation organisation = new Organisation();
		organisation.setOrgid(orgid);
		final TbTaxMasEntity tbTaxMasEntity = tbTaxMasJpaRepository.findTaxByTaxIdAndOrgId(taxId, orgid);
		final List<LookUp> txnPrefixData = CommonMasterUtility.getListLookup(MainetConstants.PG_REQUEST_PROPERTY.TXN, organisation);
		
		//setting changed name of taxdesc from lookup
		if (tbTaxMasEntity != null && tbTaxMasEntity.getTaxDescId() != null) {
			for (final LookUp lookUp : txnPrefixData) {
				if (tbTaxMasEntity.getTaxDescId() == lookUp.getLookUpId()) {
						if(StringUtils.isNotBlank(lookUp.getDescLangFirst())) {
							tbTaxMasEntity.setTaxDesc(lookUp.getDescLangFirst());
						}
					break;
				}
			}
		}
		return tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.masters.taxmaster.business.service.TbTaxMasService
	 * #findAllTaxesForBillGeneration(long, java.lang.Long,
	 * com.abm.mainetservice.web.bean.LookUp, java.util.Date)
	 */
	@Override
	public List<TbTaxMas> findAllTaxesForBillGeneration(final long orgid, final Long deptId,
			final long chargeApplicableAt, final Long taxSubCategory) {
		List<TbTaxMasEntity> taxMascharges = null;
		if (taxSubCategory != null) {
			taxMascharges = tbTaxMasJpaRepository.findAllTaxesForBillGeneration(orgid, deptId, chargeApplicableAt,
					taxSubCategory);
		} else {
			taxMascharges = tbTaxMasJpaRepository.findAllTaxesForBillGeneration(orgid, deptId, chargeApplicableAt);
		}
		final List<TbTaxMas> beans = new ArrayList<>();
		TbTaxMas taxMas = null;
		if ((taxMascharges != null) && !taxMascharges.isEmpty()) {
			for (final TbTaxMasEntity tbTaxMasEntity : taxMascharges) {
				taxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
				beans.add(taxMas);
			}
		}
		return beans;
	}

	@Override
	public List<TbTaxMas> findAllTaxesForBillPayment(final long orgid, final Long deptId,
			final long chargeApplicableAt) {
		List<TbTaxMasEntity> taxMascharges = null;
		taxMascharges = tbTaxMasJpaRepository.findAllTaxesForBillPayment(orgid, deptId, chargeApplicableAt);
		final List<TbTaxMas> beans = new ArrayList<>();
		TbTaxMas taxMas = null;
		TbTaxDetMas dto = null;
		if ((taxMascharges != null) && !taxMascharges.isEmpty()) {
			for (final TbTaxMasEntity tbTaxMasEntity : taxMascharges) {
				taxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
				for (TbTaxDetMasEntity detEntity : tbTaxMasEntity.getListOfTbTaxDetMas()) {
					dto = new TbTaxDetMas();
					BeanUtils.copyProperties(detEntity, dto);
					taxMas.getTaxDetMasList().add(dto);
				}
				beans.add(taxMas);
			}
		}
		return beans;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.masters.taxmaster.business.service.TbTaxMasService#
	 * findTaxDescByTaxIdAndOrgId(java.lang.Long, long)
	 */
	@Override
	public String findTaxDescByTaxIdAndOrgId(final Long taxId, final long orgid) {
		return tbTaxMasJpaRepository.findTaxDescByTaxIdAndOrgId(taxId, orgid);
	}
	
	// #130728
	@Override
	public String findTaxDescRegByTaxIdAndOrgId(final Long taxId, final long orgid) {
		return tbTaxMasJpaRepository.findTaxDescRegByTaxIdAndOrgId(taxId, orgid);
	}

	@Override
	@Transactional(readOnly = true)
	public Long fetchSacHeadIdForReceiptDet(final Long orgId, final Long taxId, final String activePrefix) {
		return tbTaxMasJpaRepository.fetchSacHeadIdForReceiptDet(orgId, taxId, activePrefix);
	}

	@Override
	public List<Long> findTaxByDeptIdAndOrgId(final Long orgId, final Long dpDeptId) {
		final List<Long> taxDescIdList = tbTaxMasJpaRepository.findTaxByDeptIdAndOrgId(orgId, dpDeptId);
		return taxDescIdList;
	}

	@Override
	public List<TbTaxMas> findAllByDescId(final Long taxDescId, final Long orgid, final Long dpDeptId) {

		List<TbTaxMasEntity> entities = Collections.emptyList();

		if ((dpDeptId != null) && (taxDescId == null)) {
			entities = tbTaxMasJpaRepository.findAllByDeptOrgId(dpDeptId, orgid);
		} else {
			entities = tbTaxMasJpaRepository.findAllByDescId(taxDescId, orgid, dpDeptId);
		}

		final List<TbTaxMas> beans = new ArrayList<>();
		TbTaxMas tbTaxMas = null;

		final Organisation organisation = new Organisation();
		organisation.setOrgid(orgid);

		final List<LookUp> fsdPrefixData = CommonMasterUtility.getListLookup(PrefixConstants.LookUp.FLAT_SLAB_DEPEND,
				organisation);

		ServiceMaster serviceBean = null;
		final List<LookUp> txnPrefixData = CommonMasterUtility.getListLookup(MainetConstants.PG_REQUEST_PROPERTY.TXN, organisation);
		
		for (final TbTaxMasEntity tbTaxMasEntity : entities) {
			tbTaxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
			
			for (final LookUp lookUp : fsdPrefixData) {
				if (!StringUtils.isEmpty(tbTaxMasEntity.getTaxMethod())
						&& (Long.parseLong(tbTaxMasEntity.getTaxMethod()) == lookUp.getLookUpId())) {
					tbTaxMas.setTaxMethodName(lookUp.getLookUpDesc());
					break;
				}
			}
			//setting changed name of taxdesc from lookup
			if (tbTaxMasEntity.getTaxDescId() != null) {
				for (final LookUp lookUp : txnPrefixData) {
					if (tbTaxMasEntity.getTaxDescId() == lookUp.getLookUpId()) {
						tbTaxMas.setTaxDesc(lookUp.getLookUpDesc());
						break;
					}
				}
			}
			if (tbTaxMasEntity.getSmServiceId() != null) {
				serviceBean = serviceMasterRespository.findOne(tbTaxMasEntity.getSmServiceId());
				if(serviceBean!=null)
				tbTaxMas.setSmServiceName(serviceBean.getSmServiceName());
			} else {
				tbTaxMas.setSmServiceName(null);
			}

			final String taxGroup = CommonMasterUtility
					.getNonHierarchicalLookUpObject(Long.valueOf(tbTaxMas.getTaxGroup()), organisation).getLookUpDesc();
			tbTaxMas.setTaxGroupName(taxGroup);

			final String taxcategory2 = CommonMasterUtility
					.getHierarchicalLookUp(Long.valueOf(tbTaxMas.getTaxCategory2()), organisation).getLookUpDesc();
			tbTaxMas.setTaxCategory2Name(taxcategory2);

			beans.add(tbTaxMas);
		}
		return beans;
	}

	@Override
	@Transactional
	public boolean validateTax(final Long orgId, final Long descId, final Long deptId, final Long taxAppl,
			final String taxMethod, final String taxGroup, final Long taxCategory, final Long taxSubCategory,
			final String taxCode, final Long serviceId) {
		boolean isValid = true;
		List<TbTaxMasEntity> entityLst = null;
		TbTaxMas tbTaxMas = null;
		if (taxCode != null) {
			tbTaxMas = findTaxDetails(orgId, taxCode);
			if ((serviceId != null) && (serviceId != 0)) {
				if (!tbTaxMas.getTaxApplicable().equals(taxAppl) || !tbTaxMas.getTaxMethod().equals(taxMethod)
						|| !tbTaxMas.getTaxGroup().equals(taxGroup) || !tbTaxMas.getTaxCategory1().equals(taxCategory)
						|| !tbTaxMas.getTaxCategory2().equals(taxSubCategory)
						|| !tbTaxMas.getSmServiceId().equals(serviceId)) {
					entityLst = tbTaxMasJpaRepository.validateTaxByServiceId(orgId, deptId, descId, taxAppl, taxMethod,
							taxGroup, taxCategory, taxSubCategory, serviceId);

					if (entityLst.size() > 0) {
						isValid = false;
					}
				}
			} else {
				if (!tbTaxMas.getTaxApplicable().equals(taxAppl) || !tbTaxMas.getTaxMethod().equals(taxMethod)
						|| !tbTaxMas.getTaxGroup().equals(taxGroup) || !tbTaxMas.getTaxCategory1().equals(taxCategory)
						|| !tbTaxMas.getTaxCategory2().equals(taxSubCategory)) {
					entityLst = tbTaxMasJpaRepository.validateTax(orgId, deptId, descId, taxAppl, taxMethod, taxGroup,
							taxCategory, taxSubCategory);
					if (entityLst.size() > 0) {
						isValid = false;
					}
				}
			}

		} else {
			if ((serviceId != null) && (serviceId != 0)) {
				entityLst = tbTaxMasJpaRepository.validateTaxByServiceId(orgId, deptId, descId, taxAppl, taxMethod,
						taxGroup, taxCategory, taxSubCategory, serviceId);

				if (entityLst.size() > 0) {
					isValid = false;
				}
			} else {
				entityLst = tbTaxMasJpaRepository.validateTax(orgId, deptId, descId, taxAppl, taxMethod, taxGroup,
						taxCategory, taxSubCategory);
				if (entityLst.size() > 0) {
					isValid = false;
				}
			}
		}
		return isValid;
	}

	@Override
	@Transactional
	public AccountBudgetCodeEntity fetchBudgetCodeMas(final Long budgetCodeId) {
		return tbTaxMasJpaRepository.fetchBudgetCodeMas(budgetCodeId);
	}

	@Override
	@Transactional(readOnly = true)
	public TbTaxMas findTaxDetails(final Long orgId, final String taxCode) {
		final TbTaxMasEntity entity = tbTaxMasJpaRepository.findTaxDetails(orgId, taxCode);
		TbTaxMas tbTaxMas = new TbTaxMas();
		tbTaxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(entity);
		return tbTaxMas;
	}

	@Override
	public String getCpdMode() {
		final LookUp lookup = CommonMasterUtility.getDefaultValue(BUG_HEAD_OPENING_BALANCE_MASTER.SLI_PREFIX_VALUE);
		if (lookup != null) {
			return lookup.getLookUpCode();
		} else {
			return null;
		}
	}

	@Override
	@Transactional(readOnly = true)
	public List<LookUp> getAllTaxesBasedOnDept(final Long orgId, final Long deptId) {
		List<Object[]> taxList = null;
		final List<LookUp> taxlookupList = new ArrayList<>();
		if ((orgId != null) && (deptId != null)) {
			taxList = tbTaxMasJpaRepository.getAllTaxesBasedOnDept(orgId, deptId);
			LookUp look = null;
			for (final Object[] tax : taxList) {
			        //D#39539 filter active tax only
			        if(tax[3]!= null && tax[3].toString().equals(MainetConstants.FlagY)) {
			            look = new LookUp();
	                                look.setLookUpId(Long.parseLong((tax[0].toString())));
	                                final String name = tax[1].toString() + "(" + tax[2].toString() + ")";
	                                look.setDescLangFirst(name);
	                                taxlookupList.add(look);
			        }
			}
		}
		return taxlookupList;
	}

	@Override
	@Transactional(readOnly = true)
	public List<LookUp> findAllTaxesBasedOnApplicableAt(final Long orgId, final Long deptId,final long chargeApplicableAt) {
		List<TbTaxMasEntity> taxList = null;
		Organisation org = new Organisation();
		final List<LookUp> taxlookupList = new ArrayList<>();
		if ((orgId != null) && (deptId != null)) {
			taxList = tbTaxMasJpaRepository.findAllTaxesForBillPayment(orgId, deptId, chargeApplicableAt);
			   if (taxList != null && !taxList.isEmpty()) {
				   taxList.forEach(taxMas -> {
		                LookUp lookUp = new LookUp();
		                lookUp.setLookUpCode(taxMas.getTaxCode());
		                lookUp.setLookUpId(taxMas.getTaxId());
		                String desc = CommonMasterUtility
		                        .getNonHierarchicalLookUpObject(taxMas.getTaxDescId(), org)
		                        .getLookUpDesc() + "("+(lookUp.getLookUpCode())+")";		               
		                if (desc != null && !desc.isEmpty()) {
		                    lookUp.setDescLangFirst(desc);
		                }
		                taxlookupList.add(lookUp);
		            });
		        }
		}
		return taxlookupList;
	}
	
	@Override
	@Transactional(readOnly = true)
	public List<TbTaxMas> fetchAllIndependentTaxes(long orgid, Long deptId, long chargeApplicableAt,
			Long taxSubCategory,long chargeApplicableAtBillRcpt) {
		List<TbTaxMasEntity> taxMascharges = null;
		if (taxSubCategory != null) {
			taxMascharges = tbTaxMasJpaRepository.fetchAllIndependentTaxes(orgid, deptId, chargeApplicableAt,
					taxSubCategory,chargeApplicableAtBillRcpt);
		} else {
			taxMascharges = tbTaxMasJpaRepository.fetchAllIndependentTaxes(orgid, deptId, chargeApplicableAt,chargeApplicableAtBillRcpt);
		}
		final List<TbTaxMas> beans = new ArrayList<>();
		TbTaxMas taxMas = null;
		TbTaxDetMas dto = null;
		if ((taxMascharges != null) && !taxMascharges.isEmpty()) {
			for (final TbTaxMasEntity tbTaxMasEntity : taxMascharges) {
				taxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
				for (TbTaxDetMasEntity detEntity : tbTaxMasEntity.getListOfTbTaxDetMas()) {
					dto = new TbTaxDetMas();
					BeanUtils.copyProperties(detEntity, dto);
					taxMas.getTaxDetMasList().add(dto);
				}
				beans.add(taxMas);
			}
		}
		return beans;
	}

	@Override
	@Transactional(readOnly = true)
	public List<TbTaxMas> fetchAllDepenentTaxes(long orgid, Long deptId, long chargeApplicableAt, Long taxSubCategory,long chargeApplicableAtBillRcpt) {
		List<TbTaxMasEntity> taxMascharges = null;
		if (taxSubCategory != null) {
			taxMascharges = tbTaxMasJpaRepository.fetchAllDepenentTaxes(orgid, deptId, chargeApplicableAt,
					taxSubCategory,chargeApplicableAtBillRcpt);
		} else {
			taxMascharges = tbTaxMasJpaRepository.fetchAllDepenentTaxes(orgid, deptId, chargeApplicableAt,chargeApplicableAtBillRcpt);
		}
		final List<TbTaxMas> beans = new ArrayList<>();
		TbTaxMas taxMas = null;
		TbTaxDetMas dto = null;
		if ((taxMascharges != null) && !taxMascharges.isEmpty()) {
			for (final TbTaxMasEntity tbTaxMasEntity : taxMascharges) {
				taxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
				for (TbTaxDetMasEntity detEntity : tbTaxMasEntity.getListOfTbTaxDetMas()) {
					dto = new TbTaxDetMas();
					BeanUtils.copyProperties(detEntity, dto);
					taxMas.getTaxDetMasList().add(dto);
				}
				beans.add(taxMas);
			}
		}
		return beans;
	}

	@Override
	public Integer getNextDisplaySequence(Long orgId, Long deptId, Long taxApllicableType) {
		Integer maxDispNo = tbTaxMasJpaRepository.getNextDisplaySequence(orgId, deptId, taxApllicableType);
		if (maxDispNo == null)
			maxDispNo = 1;
		return maxDispNo;
	}

	@Override
	public Integer getNextCollectionSequence(Long orgId, Long deptId, Long taxApllicableType) {
		Integer maxCollNo = tbTaxMasJpaRepository.getNextCollectionSequence(orgId, deptId, taxApllicableType);
		if (maxCollNo == null)
			maxCollNo = 1;
		return maxCollNo;
	}

	@Override
	public List<Long> getDistinctTaxCatByDept(Long orgId, Long deptId, List<Long> taxApllicableType) {
		return tbTaxMasJpaRepository.getDistinctTaxCatByDept(orgId, deptId, taxApllicableType);
	}

	@Override
	public TbTaxMas getTaxMasterByTaxCode(Long orgId, Long deptId, String taxCode) {
		final TbTaxMasEntity entity = tbTaxMasJpaRepository.getTaxMasterByTaxCode(orgId, deptId, taxCode);
		return tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(entity);
	}

	@Override
	public List<LookUp> validateTaxCategory(String prefix, Organisation org) {
		return CommonMasterUtility.getListLookup(prefix, org);
	}

	@Override
	@Transactional
	public List<TbTaxMasEntity> fetchAllApplicableServiceCharge(long serviceId, long orgId, Long taxApplicableAt) {
		List<TbTaxMasEntity> charges = tbTaxMasJpaRepository.fetchAllApplicableTaxes(serviceId, orgId, taxApplicableAt,
				"Y");
		if (charges == null || charges.isEmpty()) {
			throw new NullPointerException(
					"Charges not found from TB_TAX_MAS Table, either charge does not exist or existing charge is expired");
		}
		// initialize proxy
		for (TbTaxMasEntity taxMasEntity : charges) {
			Hibernate.initialize(taxMasEntity.getListOfTbTaxDetMas());
		}
		return charges;
	}

	@Override
	public Long fetchSacHeadIdForReceiptDetByDemandClass(long orgid, Long taxId, String active, Long tddTaxid) {
		return tbTaxMasJpaRepository.fetchSacHeadIdForReceiptDetByDemandClass(orgid, taxId, active, tddTaxid);
	}

	@Override
	public List<Long> fetchTaxIdByDeptIdForTaxGroup(Long govtTaxGrp, Long orgid, Long dpDeptid) {
		return tbTaxMasJpaRepository.fetchTaxIdByDeptIdForTaxGroup(govtTaxGrp.toString(), orgid, dpDeptid);
	}

	@Override
	public int getCountOfTaxesByTaxCat(Long taxCat, Long orgid, Long dpDeptid) {
		return tbTaxMasJpaRepository.getCountOfTaxesByTaxCat(taxCat, orgid, dpDeptid);
	}

	@Override
	public List<TbTaxMasEntity> findAllTaxesByChargeAppAtAndTaxSubCat(Long orgid, Long deptId, Long chargeApplicableAt,
			Long taxSubCategory) {
		return tbTaxMasJpaRepository.findAllTaxesByChargeAppAtAndTaxSubCat(orgid, deptId, chargeApplicableAt,
				taxSubCategory);
	}

	@Override
	public Long getTaxId(Long appicableAt, Long orgId, Long deptId, Long taxCategory, Long taxSubCategory) {
		return tbTaxMasJpaRepository.getTaxId(appicableAt, orgId, deptId, taxCategory, taxSubCategory);
	}
	
	@Override
	public Long getTaxIdByServiceId(Long appicableAt, Long orgId, Long deptId, Long taxCategory, Long taxSubCategory,long serviceId,String taxActive) {
		return tbTaxMasJpaRepository.getTaxIdByServiceId(appicableAt, orgId, deptId, taxCategory, taxSubCategory,serviceId,taxActive);
	}

	@Override
	public List<TbTaxMas> getAllTaxForSupplementryBill(Long appicableAt, Long deptId, Long orgid) {

		List<TbTaxMasEntity> entities = Collections.emptyList();
		entities = tbTaxMasJpaRepository.getAllTaxForSupplementryBill(appicableAt, deptId, orgid);
		final List<TbTaxMas> beans = new ArrayList<>();
		TbTaxMas tbTaxMas = null;

		final Organisation organisation = new Organisation();
		organisation.setOrgid(orgid);

		final List<LookUp> fsdPrefixData = CommonMasterUtility.getListLookup(PrefixConstants.LookUp.FLAT_SLAB_DEPEND,
				organisation);

		ServiceMaster serviceBean = null;

		for (final TbTaxMasEntity tbTaxMasEntity : entities) {
			tbTaxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
			for (final LookUp lookUp : fsdPrefixData) {
				if (!StringUtils.isEmpty(tbTaxMasEntity.getTaxMethod())
						&& (Long.parseLong(tbTaxMasEntity.getTaxMethod()) == lookUp.getLookUpId())) {
					tbTaxMas.setTaxMethodName(lookUp.getLookUpDesc());
					break;
				}
			}
			if (tbTaxMasEntity.getSmServiceId() != null) {
				serviceBean = serviceMasterRespository.findOne(tbTaxMasEntity.getSmServiceId());
				tbTaxMas.setSmServiceName(serviceBean.getSmServiceName());
			} else {
				tbTaxMas.setSmServiceName(null);
			}

			final String taxGroup = CommonMasterUtility
					.getNonHierarchicalLookUpObject(Long.valueOf(tbTaxMas.getTaxGroup()), organisation).getLookUpDesc();
			tbTaxMas.setTaxGroupName(taxGroup);

			final String taxcategory2 = CommonMasterUtility
					.getHierarchicalLookUp(Long.valueOf(tbTaxMas.getTaxCategory2()), organisation).getLookUpDesc();
			tbTaxMas.setTaxCategory2Name(taxcategory2);

			beans.add(tbTaxMas);
		}
		return beans;
	}

	@Override
	@Transactional(readOnly = true)
	public Long fetchSacHeadIdForSupplementryBill(final Long orgId, final Long taxId, Long applicableAtId) {
		return tbTaxMasJpaRepository.fetchSacHeadIdForSupplementryBill(orgId, taxId, applicableAtId);
	}

	@Override
	public List<TbTaxMas> findAllNotActiveTaxesForBillGeneration(long orgid, Long deptId, long chargeApplicableAt,
			Long taxSubCategory) {
		List<TbTaxMasEntity> taxMascharges = null;
		if (taxSubCategory != null) {
			taxMascharges = tbTaxMasJpaRepository.findAllNotActiveTaxesForBillGeneration(orgid, deptId,
					chargeApplicableAt, taxSubCategory);
		} else {
			taxMascharges = tbTaxMasJpaRepository.findAllNotActiveTaxesForBillGeneration(orgid, deptId,
					chargeApplicableAt);
		}
		final List<TbTaxMas> beans = new ArrayList<>();
		TbTaxMas taxMas = null;
		if ((taxMascharges != null) && !taxMascharges.isEmpty()) {
			for (final TbTaxMasEntity tbTaxMasEntity : taxMascharges) {
				taxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
				beans.add(taxMas);
			}
		}
		return beans;
	}

	@Override
	public List<TbTaxMas> findAllActiveTaxList(long orgid, Long deptId, long chargeApplicableAt) {
		List<TbTaxMasEntity> taxMascharges = null;
		taxMascharges = tbTaxMasJpaRepository.findAllActiveTaxList(orgid, deptId, chargeApplicableAt);
		final List<TbTaxMas> beans = new ArrayList<>();
		TbTaxMas taxMas = null;
		TbTaxDetMas dto = null;
		if ((taxMascharges != null) && !taxMascharges.isEmpty()) {
			for (final TbTaxMasEntity tbTaxMasEntity : taxMascharges) {
				taxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
				for (TbTaxDetMasEntity detEntity : tbTaxMasEntity.getListOfTbTaxDetMas()) {
					dto = new TbTaxDetMas();
					BeanUtils.copyProperties(detEntity, dto);
					taxMas.getTaxDetMasList().add(dto);
				}
				beans.add(taxMas);
			}
		}
		return beans;
	}
	
	@Override
	public List<TbTaxMas> findAllTaxesForBillGenerationByServiceId(final long orgid, final Long deptId,
			final long chargeApplicableAt, final Long serviceId) {
		List<TbTaxMasEntity> taxMascharges = null;

		taxMascharges = tbTaxMasJpaRepository.findAllTaxesForBillGenerationByServiceId(orgid, deptId,
				chargeApplicableAt, serviceId);
		final List<TbTaxMas> beans = new ArrayList<>();
		TbTaxMas taxMas = null;
		if ((taxMascharges != null) && !taxMascharges.isEmpty()) {
			for (final TbTaxMasEntity tbTaxMasEntity : taxMascharges) {
				taxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
				beans.add(taxMas);
			}
		}else
			throw new NullPointerException(
					"Record not found for ServiceId "+serviceId+". Please add tax group and respective "
							+ "service for tax in tax master configuration");
		return beans;
	}
	
	//To Find TbTaxMas for Works Module base on Tax Des
	@Override
	public List<TbTaxMas> findAllByOrgIdAdnTaxDesc(final Long orgid) {
		final List<TbTaxMasEntity> entities = tbTaxMasJpaRepository.findAllByOrgIdAdnTaxDesc(orgid);

		final List<TbTaxMas> beans = new ArrayList<>();
		for (final TbTaxMasEntity tbTaxMasEntity : entities) {
			beans.add(tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity));
		}
		return beans;
	}
	
	/**
	 * Find list of taxes with given description and orgId
	 */
	@Override
	public List<TbTaxMas> findTaxesByDescAndOrgId(final String taxDesc, final Long orgId) {
		List<TbTaxMas> beans = null;
		try {
			List<TbTaxMasEntity> taxes = tbTaxMasJpaRepository.getTaxesByDescAndOrgId(taxDesc, orgId);
			beans = new ArrayList<>();
			for (final TbTaxMasEntity tbTaxMasEntity : taxes) {
				try {
					beans.add(tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity));
				}catch(Exception ex) {
					LOGGER.error("Error occured while mapping tax entity with dto in mapTbTaxMasEntityToTbTaxMas");
				}
			}
		}catch(Exception ex) {
			LOGGER.error("Could not find taxes with description :" +taxDesc);
		}
		return beans;
	}

	@Override
	public TbTaxMas getTaxIdByServiceIdOrgIdDeptId(Long serviceId, Long orgId, Long deptId) {
		TbTaxMas taxMas = null;
		try {
			TbTaxMasEntity tbTaxMasEntity = tbTaxMasJpaRepository.getTaxIdByServiceIdOrgIdDeptId(serviceId, orgId, deptId);
			try {
				taxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
			}catch(Exception ex) {
				LOGGER.error("Error occured while mapping tax entity with dto in mapTbTaxMasEntityToTbTaxMas");
			}
		}catch(Exception ex) {
			LOGGER.error("Could not find tax for service id :" + serviceId);
		}
		return taxMas;
	}

	@Override
	public Long getDisplayIdByTaxId(Long taxId) {
		return tbTaxMasJpaRepository.getDisplaySeqByTaxId(taxId);
	}

	@Override
	@Transactional(readOnly=true)
	public TbTaxMas findByTaxDescIdAndOrgid(Long taxDescId, Long orgId) {
		TbTaxMas taxMas = null;
		try {
			TbTaxMasEntity tbTaxMasEntity = tbTaxMasJpaRepository.findByTaxDescIdAndOrgid(taxDescId, orgId);
			try {
				taxMas = tbTaxMasServiceMapper.mapTbTaxMasEntityToTbTaxMas(tbTaxMasEntity);
			}catch(Exception ex) {
				LOGGER.error("Tax is not defined with NOCMC");
			}
		}catch(Exception ex) {
			LOGGER.error("Tax is not defined with NOCMC");
		}
		return taxMas;
	}
	
	@Override
	@Transactional(readOnly = true)
	public List<LookUp> getAllTaxesBasedOnDept(final Long orgId,final int langId, final Long deptId) {
		List<Object[]> taxList = null;
		final List<LookUp> taxlookupList = new ArrayList<>();
		if ((orgId != null) && (deptId != null)) {
			taxList = tbTaxMasJpaRepository.getAllTaxesBasedOnDept(orgId, deptId);
			LookUp look = null;
			for (final Object[] tax : taxList) {
			        //D#39539 filter active tax only
			        if(tax[3]!= null && tax[3].toString().equals(MainetConstants.FlagY)) {
			            look = new LookUp();
	                                look.setLookUpId(Long.parseLong((tax[0].toString())));
	                                final String name = tax[1].toString() + "(" + tax[2].toString() + ")";
	                                look.setDescLangFirst(name);
	                                if (langId > 0 && langId == MainetConstants.REGIONAL_LANGUAGE_ID) {
	                                	 String nameReg = tbTaxMasJpaRepository.findTaxDescRegByTaxIdAndOrgId(Long.parseLong((tax[0].toString())),orgId);
	                                	 nameReg = nameReg + "(" + tax[2].toString() + ")";
	 	                                 look.setDescLangSecond(nameReg);
	                                }
	                                taxlookupList.add(look);
			        }
			}
		}
		return taxlookupList;
	}
}
