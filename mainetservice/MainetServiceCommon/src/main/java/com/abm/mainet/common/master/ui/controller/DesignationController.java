/*
 * Created on 10 Dec 2015 ( Time 18:28:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.domain.Designation;
import com.abm.mainet.common.master.dto.DesignationBean;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbOrganisation;
import com.abm.mainet.common.master.service.DesignationService;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.master.service.TbOrganisationService;
import com.abm.mainet.common.master.ui.model.DesignationResponse;
import com.abm.mainet.common.master.ui.model.TbOrganisationListItem;
import com.abm.mainet.common.master.ui.validator.DesignationValidator;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.Message;
import com.abm.mainet.common.utility.MessageType;
import com.abm.mainet.common.utility.UserSession;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageConfig;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

@Controller
@RequestMapping("/Designation.html")
public class DesignationController extends AbstractController {

    private static final String SHOW_BREAD_CUMB = "ShowBreadCumb";
    private static final String MAIN_ENTITY_NAME = "designationBean";
    private static final String MAIN_LIST_NAME = "list";
    private static final String JSP_FORM = "designation/form";
    private static final String JSP_LIST = "designation/list";
    private static final String SAVE_ACTION_CREATE = "Designation.html?create";
    private static final String SAVE_ACTION_UPDATE = "Designation.html?update";
    private static final String View = "View";
    // private static final String IS_ADMIN = "isAdmin";

    List<DesignationBean> list = null;

    @Autowired
    private DesignationService designationService;

    @Autowired
    private TbOrganisationService tbOrganisationService;

    @Autowired
    private TbDepartmentService tbDepartmentService;

    public DesignationController() {
        super(DesignationController.class, MAIN_ENTITY_NAME);
        log("DesignationController created.");
    }

    private void populateListOfTbOrganisationItems(final Model model) {
        final List<TbOrganisation> list = tbOrganisationService.findAll();
        final List<TbOrganisationListItem> items = new LinkedList<>();
        for (final TbOrganisation tbOrganisation : list) {
            items.add(new TbOrganisationListItem(tbOrganisation));
        }
        model.addAttribute("listOfTbOrganisationItems", items);
    }
    
    public String generateQRCode() throws WriterException, IOException {
		QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix bitMatrix = qrCodeWriter.encode("http://192.168.100.110:8070/CitizenHome.html#", BarcodeFormat.QR_CODE, 220, 220);

 

        ByteArrayOutputStream pngOutputStream = new ByteArrayOutputStream();
        MatrixToImageConfig con = new MatrixToImageConfig();

 

        MatrixToImageWriter.writeToStream(bitMatrix, "PNG", pngOutputStream, con);
        byte[] pngData = pngOutputStream.toByteArray();
        String fileBase64 = Base64.getEncoder().encodeToString(pngData);
        return fileBase64;
    }

    private void populateModel(final Model model, final DesignationBean designation, final FormMode formMode) {

        if (formMode == FormMode.CREATE) {
            designation.setMode("Create");
            model.addAttribute(MODE, MODE_CREATE);
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        } else if (formMode == FormMode.UPDATE) {
            designation.setMode("Update");
            model.addAttribute(MODE, MODE_UPDATE);
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
            populateListOfTbOrganisationItems(model);
        }
        model.addAttribute(MAIN_ENTITY_NAME, designation);
    }

    @RequestMapping()
    public String list(final Model model,final HttpServletRequest request) throws WriterException, IOException {
        log("Action 'list'");
        list = designationService.findAll();
        model.addAttribute(SHOW_BREAD_CUMB, false);
        model.addAttribute(MAIN_LIST_NAME, list);
        helpDoc("Designation.html", model);
        model.addAttribute("qrcode", generateQRCode());
        return JSP_LIST;
    }

    @RequestMapping(params = "getGridData")
    public @ResponseBody DesignationResponse gridData(final HttpServletRequest request, final Model model) {
        log("Action 'Get grid Data'");

        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
        list = designationService.findAll();
        final List<DesignationBean> listOfDesgBean = new ArrayList<>();
        for (final DesignationBean bean : list) {
            listOfDesgBean.add(bean);
        }
        Collections.sort(listOfDesgBean);
        final DesignationResponse DesignationResponse = new DesignationResponse();
        DesignationResponse.setRows(listOfDesgBean);
        DesignationResponse.setTotal(list.size());
        DesignationResponse.setRecords(list.size());
        DesignationResponse.setPage(page);

        model.addAttribute(MAIN_LIST_NAME, list);

        return DesignationResponse;
    }

    @RequestMapping(params = "form")
    public String formForCreate(final Model model) {
        log("Action 'list'");

        final DesignationBean designationBean = new DesignationBean();
        final List<TbDepartment> list = tbDepartmentService.findAll();
        Collections.sort(list);
        model.addAttribute(MAIN_LIST_NAME, list);
        populateModel(model, designationBean, FormMode.CREATE);
        return JSP_FORM;
    }

    @RequestMapping(params = "formForUpdate")
    public String formForUpdate(@RequestParam("dsgid") final Long dsgid, final Model model) {
        log("Action 'formForUpdate'");

        DesignationBean designation = null;
        if (dsgid != null) {
            designation = designationService.findById(dsgid);
            model.addAttribute("status", designation.getIsdeleted());
            populateModel(model, designation, FormMode.UPDATE);
        } else {
            designation = new DesignationBean();
            populateModel(model, designation, FormMode.CREATE);
        }
        return JSP_FORM;
    }

    @RequestMapping(params = "create", method = RequestMethod.POST)
    public ModelAndView create(final DesignationBean designationBean, final BindingResult bindingResult, final Model model,
            final RedirectAttributes redirectAttributes, final HttpServletRequest httpServletRequest) {
        log("Action 'create'");

        final DesignationValidator validator = new DesignationValidator();
        validator.validate(designationBean, bindingResult);

        final String shortCode = designationBean.getDsgshortname();

        if (shortCode != null) {
            designationBean.setDsgshortname(shortCode.toUpperCase());
        }

        if (designationBean.getDsgname() != null) {
            final Designation desgn = designationService.findByName(designationBean.getDsgname().trim());
            if (desgn != null) {
                bindingResult.addError(new ObjectError("dsgname", designationBean.getDsgname() + " is already present"));
            }
        }

        if (designationBean.getDsgshortname() != null) {
            final Designation desgnShortNme = designationService.findByShortname(designationBean.getDsgshortname().trim());
            if (desgnShortNme != null) {
                if (!desgnShortNme.getDsgid().equals(designationBean.getDsgid())) {
                    bindingResult
                            .addError(new ObjectError("dsgshortname", designationBean.getDsgshortname() + " is already present"));
                }
            }
        }

        try {

            if (!bindingResult.hasErrors()) {
                designationBean.setLgIpMac(UserSession.getCurrent().getEmployee().getEmppiservername());
                designationBean.setIsdeleted(MainetConstants.CommonConstants.ZERO);
                final DesignationBean designationSaved = designationService.create(designationBean);
                model.addAttribute(MAIN_ENTITY_NAME, designationSaved);
                messageHelper.addMessage(model, new Message(MessageType.SUCCESS, MainetConstants.COMMON_STATUS.SAVE_OK));
                return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                        MainetConstants.COMMON_STATUS.SUCCESS);

            } else {
                model.addAttribute(BindingResult.MODEL_KEY_PREFIX + MainetConstants.FORM_NAME, bindingResult);
                populateModel(model, designationBean, FormMode.CREATE);
                return new ModelAndView(JSP_FORM);
            }
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "designation.error.create", e);
            populateModel(model, designationBean, FormMode.CREATE);
            e.printStackTrace();
            return new ModelAndView(JSP_FORM);
        }
    }

    @RequestMapping(params = "update", method = RequestMethod.POST)
    public ModelAndView update(final DesignationBean designationBean, final BindingResult bindingResult, final Model model,
            final RedirectAttributes redirectAttributes, final HttpServletRequest httpServletRequest) {
        log("Action 'update'");

        final DesignationValidator validator = new DesignationValidator();
        validator.validate(designationBean, bindingResult);
        final String shortCode = designationBean.getDsgshortname();

        final Long updatedBy = UserSession.getCurrent().getEmployee().getEmpId();

        if (shortCode != null) {
            designationBean.setDsgshortname(shortCode.toUpperCase());
        }

        if (designationBean.getDsgname() != null) {
            final Designation desgn = designationService.findByName(designationBean.getDsgname().trim());
            if (desgn != null) {
                if (!desgn.getDsgid().equals(designationBean.getDsgid())) {
                    bindingResult.addError(new ObjectError("dsgname", designationBean.getDsgname() + " is already present"));
                }
            }

        }

        if (designationBean.getDsgshortname() != null) {
            final Designation desgnShortNme = designationService.findByShortname(designationBean.getDsgshortname().trim());
            if (desgnShortNme != null) {
                if (!desgnShortNme.getDsgid().equals(designationBean.getDsgid())) {
                    bindingResult
                            .addError(new ObjectError("dsgshortname", designationBean.getDsgshortname() + " is already present"));
                }
            }
        }

        // Not required as per Redmine defect #2524
        /*
         * if(designationBean.getDsgid()!=null){
         * isValidForDelete=designationService.validateDsgnFrmOrgDsgMaster(designationBean.getDsgid(),UserSession.getCurrent().
         * getOrganisation().getOrgid()); } if(!isValidForDelete){ ValidationUtils.rejectIfEmpty(bindingResult,
         * CommonMasterConstants.CommonConstants.ISDELETED,MainetConstants.BLANK,ApplicationSession.getInstance().getMessage(
         * "master.desg.deactivate")); }
         */

        try {

            if (!bindingResult.hasErrors()) {
                if ((designationBean.getIsdeleted() == null) || (designationBean.getIsdeleted() == MainetConstants.BLANK)) {
                    designationBean.setIsdeleted(MainetConstants.CommonConstants.ONE);
                } else {
                    designationBean.setIsdeleted(MainetConstants.CommonConstants.ZERO);
                }

                designationBean.setLgIpMacUpd(UserSession.getCurrent().getEmployee().getEmppiservername());
                final DesignationBean designationUpdated = designationService.update(designationBean, updatedBy);
                model.addAttribute(MAIN_ENTITY_NAME, designationUpdated);
                messageHelper.addMessage(model, new Message(MessageType.SUCCESS, MainetConstants.COMMON_STATUS.SAVE_OK));
                return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                        MainetConstants.COMMON_STATUS.SUCCESS);

            } else {
                model.addAttribute(BindingResult.MODEL_KEY_PREFIX + MainetConstants.FORM_NAME, bindingResult);
                populateModel(model, designationBean, FormMode.UPDATE);
                return new ModelAndView(JSP_FORM);
            }
        } catch (final Exception e) {
            log("Action 'update' : Exception - " + e.getMessage());
            messageHelper.addException(model, "designation.error.create", e);
            populateModel(model, designationBean, FormMode.UPDATE);
            e.printStackTrace();
            return new ModelAndView(JSP_FORM);
        }
    }

    @RequestMapping(params = "viewMode")
    public String update(@Valid final DesignationBean designation, final BindingResult bindingResult, final Model model,
            final HttpServletRequest httpServletRequest, @RequestParam("MODE1") final String viewmode) {
        log("Action 'update'");
        String viewReturned = MainetConstants.BLANK;

        try {
            if (designation.getDsgid() != null) {
                if (viewmode.endsWith(View)) {
                    model.addAttribute(MODE, View);
                    final DesignationBean designationBean = designationService.findById(designation.getDsgid());
                    log("Action 'update' : update done - redirect");
                    populateModel(model, designationBean, FormMode.UPDATE);
                    model.addAttribute(MODE, viewmode);
                    viewReturned = JSP_FORM;
                } else {
                    model.addAttribute(MODE, MODE_CREATE);
                }
            } else {
                log("Action 'list'");
                final List<TbDepartment> list = tbDepartmentService.findAll();
                model.addAttribute(MAIN_LIST_NAME, list);
            }

            return viewReturned;

        } catch (final Exception e) {
            messageHelper.addException(model, "designation.error.update", e);
            log("Action 'update' : Exception - " + e.getMessage());
            populateModel(model, designation, FormMode.UPDATE);
            return JSP_FORM;
        }
    }

    @RequestMapping(params = "checkIfDesOrgMapExists")
    public @ResponseBody boolean checkIfDesOrgMapExists(@RequestParam("dsgid") final Long dsgId) {
        log("Action 'check for Designation-Organization Map'");
        boolean isMapped = false;
        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        isMapped = designationService.findByOrgIdDestId(orgId, dsgId);
        return isMapped;
    }

}
