/*
 * Created on 13 Apr 2016 ( Time 13:12:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.DeptLocationEntity;
import com.abm.mainet.common.domain.LocationMasEntity;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbDeptLocation;
import com.abm.mainet.common.master.mapper.TbDeptLocationServiceMapper;
import com.abm.mainet.common.master.repository.DeptLocationJpaRepository;
import com.abm.mainet.common.master.repository.TbDepartmentJpaRepository;
import com.abm.mainet.common.utility.Utility;

/**
 * Implementation of TbDeptLocationService
 */
@Component
@Transactional
public class DeptLocationServiceImpl implements DeptLocationService {

    @Resource
    private DeptLocationJpaRepository deptLocationJpaRepository;

    @Resource
    private TbDepartmentJpaRepository deptRepository;

    @Resource
    private TbDeptLocationServiceMapper tbDeptLocationServiceMapper;

    @Override
    public TbDeptLocation findById(final Long mapid) {
        final DeptLocationEntity tbDeptLocationEntity = deptLocationJpaRepository.findOne(mapid);
        return tbDeptLocationServiceMapper.mapTbDeptLocationEntityToTbDeptLocation(tbDeptLocationEntity);
    }

    @Override
    public List<TbDeptLocation> findAll() {
        final Iterable<DeptLocationEntity> entities = deptLocationJpaRepository.findAll();
        final List<TbDeptLocation> beans = new ArrayList<>();
        for (final DeptLocationEntity tbDeptLocationEntity : entities) {
            beans.add(tbDeptLocationServiceMapper.mapTbDeptLocationEntityToTbDeptLocation(tbDeptLocationEntity));
        }
        return beans;
    }

    @Override
    public TbDeptLocation save(final TbDeptLocation tbDeptLocation) {
        return update(tbDeptLocation);
    }

    @Override
    public TbDeptLocation create(final TbDeptLocation tbDeptLocation) {
        DeptLocationEntity tbDeptLocationEntity = null;
        if (tbDeptLocation.getMapid() != null) {
            tbDeptLocationEntity = deptLocationJpaRepository.findOne(tbDeptLocation.getMapid());
        }

        if (tbDeptLocationEntity != null) {
            throw new IllegalStateException("already.exists");
        }
        tbDeptLocationEntity = new DeptLocationEntity();
        tbDeptLocationServiceMapper.mapTbDeptLocationToTbDeptLocationEntity(tbDeptLocation, tbDeptLocationEntity);
        final DeptLocationEntity tbDeptLocationEntitySaved = deptLocationJpaRepository.save(tbDeptLocationEntity);
        return tbDeptLocationServiceMapper.mapTbDeptLocationEntityToTbDeptLocation(tbDeptLocationEntitySaved);
    }

    @Override
    public TbDeptLocation update(final TbDeptLocation tbDeptLocation) {
        final DeptLocationEntity tbDeptLocationEntity = deptLocationJpaRepository.findOne(tbDeptLocation.getMapid());
        tbDeptLocationServiceMapper.mapTbDeptLocationToTbDeptLocationEntity(tbDeptLocation, tbDeptLocationEntity);
        final DeptLocationEntity tbDeptLocationEntitySaved = deptLocationJpaRepository.save(tbDeptLocationEntity);
        return tbDeptLocationServiceMapper.mapTbDeptLocationEntityToTbDeptLocation(tbDeptLocationEntitySaved);
    }

    @Override
    public void delete(final Long mapid) {
        deptLocationJpaRepository.delete(mapid);
    }

    public DeptLocationJpaRepository getTbDeptLocationJpaRepository() {
        return deptLocationJpaRepository;
    }

    public void setTbDeptLocationJpaRepository(final DeptLocationJpaRepository deptLocationJpaRepository) {
        this.deptLocationJpaRepository = deptLocationJpaRepository;
    }

    public TbDeptLocationServiceMapper getTbDeptLocationServiceMapper() {
        return tbDeptLocationServiceMapper;
    }

    public void setTbDeptLocationServiceMapper(final TbDeptLocationServiceMapper tbDeptLocationServiceMapper) {
        this.tbDeptLocationServiceMapper = tbDeptLocationServiceMapper;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.deptlocmap.business.service.TbDeptLocationService#findLocationList(long)
     */
    @Override
    public List<LocationMasEntity> findLocationList(final long orgId) {
        return deptLocationJpaRepository.getLocationList(orgId);
    }

    /*
     * (non-Javadoc)
     * @see
     * com.abm.mainetservice.web.masters.deptlocmap.business.service.TbDeptLocationService#saveDeptLocationData(java.util.List)
     */
    @Override
    public TbDeptLocation saveDeptLocationData(final TbDeptLocation deptLocationMap, final Long orgId, final int langId,
            final Long empId) {
        final DeptLocationEntity tbDeptLocationEntity = new DeptLocationEntity();

        deptLocationMap.setIsdeleted(MainetConstants.CommonConstants.ZERO);
        deptLocationMap.setAutLo1(MainetConstants.CommonConstants.BLANK);
        deptLocationMap.setOrgid(orgId);
        deptLocationMap.setUserId(empId);
        tbDeptLocationEntity.setLgIpMac(deptLocationMap.getLgIpMac());
        tbDeptLocationServiceMapper.mapTbDeptLocationToTbDeptLocationEntity(deptLocationMap, tbDeptLocationEntity);
        deptLocationJpaRepository.save(tbDeptLocationEntity);
        return tbDeptLocationServiceMapper.mapTbDeptLocationEntityToTbDeptLocation(tbDeptLocationEntity);
    }

    @Override
    public TbDeptLocation saveDeptLocationDataAfterDelete(final TbDeptLocation deptLocationMap, final Long orgId,
            final int langId, final Long empId) {
        DeptLocationEntity tbDeptLocationEntity = null;
        final Date date = new Date();
        tbDeptLocationEntity = new DeptLocationEntity();
        deptLocationMap.setIsdeleted(MainetConstants.CommonConstants.ONE);
        deptLocationMap.setAutLo1(MainetConstants.CommonConstants.BLANK);
        deptLocationMap.setUpdatedBy(empId);
        deptLocationMap.setLgIpMacUpd(Utility.getMacAddress());
        deptLocationMap.setUpdatedDate(date);
        deptLocationMap.setMapid(deptLocationMap.getMapid());
        tbDeptLocationServiceMapper.mapTbDeptLocationToTbDeptLocationEntity(deptLocationMap, tbDeptLocationEntity);
        setUpDeptLoc(deptLocationMap, tbDeptLocationEntity, deptLocationMap.getDpDeptid(), date, orgId, langId, empId);
        deptLocationJpaRepository.save(tbDeptLocationEntity);
        return deptLocationMap;
    }

    @Override
    public String getEmpCount(final List<TbDeptLocation> tbDepLocMapList, final Long orgId, final Long dpDeptid) {

        long count = 0;
        String message = MainetConstants.PAYMENT_STATUS.FAILURE;
        for (final TbDeptLocation tbDepLocData : tbDepLocMapList) {
            if (tbDepLocData.getDpDeptid().intValue() == dpDeptid.intValue()) {
                count = deptLocationJpaRepository.getEmpCount(orgId, tbDepLocData.getDpDeptid(), tbDepLocData.getLocId());
                if (count == 0) {
                    message = MainetConstants.Common_Constant.YES;
                } else {
                    message = MainetConstants.Common_Constant.NO;
                }
                break;
            }
        }
        return message;

    }

    @Override
    public List<TbDepartment> getAllDeptList(final long orgId, final Long locId) {
        return deptLocationJpaRepository.getAllDept(orgId, locId);
    }

    @Override
    public long getAllDeptListcount(final long orgId, final Long locId) {
        return deptLocationJpaRepository.getAllDeptCount(orgId, locId);
    }

    /**
     * @param deptLocationMap
     * @param tbDeptLocationEntity
     * @param department
     * @param date
     */
    private void setUpDeptLoc(final TbDeptLocation deptLocationMap, final DeptLocationEntity tbDeptLocationEntity,
            final Long deptId, final Date date,
            final Long orgId, final int langId, final Long empId) {
        tbDeptLocationEntity.setIsnetwork(0L);
        tbDeptLocationEntity.setIsrecordroom(0L);
        tbDeptLocationEntity.setIsoutward(0L);
        tbDeptLocationEntity.setIsregistry(0L);
        tbDeptLocationEntity.setLangId(Long.valueOf(langId));
        tbDeptLocationEntity.setLgIpMac(Utility.getMacAddress());
        tbDeptLocationEntity.setTbOrganisation(new Organisation(orgId));
        tbDeptLocationEntity.setLgIpMac(Utility.getMacAddress());
        tbDeptLocationEntity.setLangId(Long.valueOf(langId));
        tbDeptLocationEntity.setUserId(empId);
        tbDeptLocationEntity.setLocId(deptLocationMap.getLocId());
        tbDeptLocationEntity.setOndate(date);
        final Organisation org = new Organisation();
        org.setOrgid(orgId);
        tbDeptLocationEntity.setTbOrganisation(org);
        final Department dept = new Department();
        dept.setDpDeptid(deptId);
        tbDeptLocationEntity.setTbDepartment(dept);
        tbDeptLocationEntity.setOntime(new SimpleDateFormat(MainetConstants.CommonConstants.DATE_FORMAT_HH_mm_ss).format(date));
        tbDeptLocationEntity.setUpdatedBy(empId);
        tbDeptLocationEntity.setUpdatedDate(date);
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainet.common.master.service.DeptLocationService#getDeptLocationCount(java.lang.Long, java.lang.Long)
     */
    @Override
    public int getDeptLocationCount(Long orgId, Long locId) {
        return deptLocationJpaRepository.getDeptLocationCount(orgId, locId);
    }
}
