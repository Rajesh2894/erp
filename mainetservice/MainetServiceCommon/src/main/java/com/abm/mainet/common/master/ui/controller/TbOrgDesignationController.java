/*
 * Created on 6 Apr 2016 ( Time 17:23:09 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.master.dto.DesignationBean;
import com.abm.mainet.common.master.dto.TbOrgDesignation;
import com.abm.mainet.common.master.service.DesignationService;
import com.abm.mainet.common.master.service.TbOrgDesignationService;
import com.abm.mainet.common.master.service.TbOrganisationService;
import com.abm.mainet.common.master.ui.model.TbOrgDesignationResponse;
import com.abm.mainet.common.service.IEmployeeService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.UserSession;

/**
 * Spring MVC controller for 'TbOrgDesignation' management.
 */
@Controller
@RequestMapping("/OrgDesignation.html")
public class TbOrgDesignationController extends AbstractController {

    // --- Variables names ( to be used in JSP with Expression Language )
    private static final String MAIN_ENTITY_NAME = "tbOrgDesignation";
    private static final String MAIN_LIST_NAME = "list";

    // --- JSP pages names ( View name in the MVC model )
    private static final String JSP_FORM = "tbOrgDesignation/form";
    private static final String JSP_ADD_DESGN = "tbOrgDesignation/list";

    // --- SAVE ACTION ( in the HTML form )
    private static final String SAVE_ACTION_CREATE = "OrgDesignation.html?create";
    private static final String SAVE_ACTION_UPDATE = "OrgDesignation.html?update";

    // --- Main entity service
    @Resource
    private TbOrgDesignationService tbOrgDesignationService; // Injected by Spring
    // --- Other service(s)
    @Resource
    private TbOrganisationService tbOrganisationService; // Injected by Spring

    @Autowired
    private DesignationService designationService; // Injected by Spring

    @Resource
    private IEmployeeService employeeService;

    List<DesignationBean> desgList = new ArrayList<>();
    List<TbOrgDesignation> orgDesignationList = new ArrayList<>();

    // --------------------------------------------------------------------------------------
    /**
     * Default constructor
     */
    public TbOrgDesignationController() {
        super(TbOrgDesignationController.class, MAIN_ENTITY_NAME);
        log("TbOrgDesignationController created.");
    }

    /**
     * Populates the Spring MVC model with the given entity and eventually other useful data
     * @param model
     * @param tbOrgDesignation
     */
    private void populateModel(final Model model, final TbOrgDesignation tbOrgDesignation, final FormMode formMode) {
        // --- Main entity
        model.addAttribute(MAIN_ENTITY_NAME, tbOrgDesignation);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
        }
    }

    // --------------------------------------------------------------------------------------
    // Request mapping
    // --------------------------------------------------------------------------------------
    /**
     * Shows a list with all the occurrences of TbOrgDesignation found in the database
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping()
    public String list(final Model model) {
        log("Action 'list'");
        helpDoc("OrgDesignation.html", model);
        final TbOrgDesignation tbOrgDesignation = new TbOrgDesignation();
        populateModel(model, tbOrgDesignation, FormMode.CREATE);
        return JSP_FORM;
    }

    @RequestMapping(params = "getGridData")
    public @ResponseBody TbOrgDesignationResponse getGridData(
            final HttpServletRequest request, final Model model) {
        log("Action 'Get child grid Data'");
        final TbOrgDesignationResponse response = new TbOrgDesignationResponse();
        final int page = Integer.parseInt(request.getParameter("page"));

        final List<TbOrgDesignation> orgDesgList = new ArrayList<>();
        orgDesignationList = tbOrgDesignationService.findAllByOrigId(UserSession.getCurrent().getOrganisation().getOrgid());
        for (final TbOrgDesignation tbDesOrgData : orgDesignationList) {
            if ("A".equals(tbDesOrgData.getMapStatus())) {
                orgDesgList.add(tbDesOrgData);
            }
        }
        Collections.sort(orgDesgList);
        final int dataSize = orgDesgList.size();
        response.setRows(orgDesgList);
        response.setTotal(dataSize);
        response.setRecords(dataSize);
        response.setPage(page);
        model.addAttribute(MAIN_LIST_NAME, orgDesgList);
        return response;
    }

    /**
     * Shows a form page in order to create a new TbOrgDesignation
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping(params = "addDesignation")
    public String addDesignation(final Model model/* , @RequestParam("orgId") Long orgid */) {
        log("Action 'addDesignation'");
        // --- Populates the model with a new instance
        final DesignationBean designationBean = new DesignationBean();
        final Organisation org = UserSession.getCurrent().getOrganisation();
        final List<DesignationBean> desgList = designationService.findAll();
        final List<DesignationBean> orgDesgList = new ArrayList<>();
        search: for (final DesignationBean desglist : desgList) {

            for (final TbOrgDesignation orgDesglist : orgDesignationList) {
                if ((desglist.getDsgid().longValue() == orgDesglist.getDsgid().longValue())
                        && (orgDesglist.getMapStatus().equals(MainetConstants.STATUS.ACTIVE))) {
                    continue search;
                }
            }
            orgDesgList.add(desglist);
        }
        model.addAttribute(MainetConstants.CommonMasterUi.DESC_LIST, orgDesgList);
        model.addAttribute(MainetConstants.CommonMasterUi.DESIGNATION_BEAN, designationBean);
        if (orgDesgList.size() == 0) {
            if (UserSession.getCurrent().getLanguageId() == 1) {
                model.addAttribute("errormsg", ApplicationSession.getInstance().getMessage("master.orgDesMap.valmsg.allempmapped")
                        + MainetConstants.WHITE_SPACE + org.getONlsOrgname());
            } else {
                model.addAttribute("errormsg", ApplicationSession.getInstance().getMessage("master.orgDesMap.valmsg.allempmapped")
                        + MainetConstants.WHITE_SPACE + org.getONlsOrgnameMar());
            }

        }
        return JSP_ADD_DESGN;
    }

    @RequestMapping(params = "createChildData") // GET or POST TbOrgDesignation
    public @ResponseBody String createChildData(@Valid final DesignationBean designationBean, final BindingResult bindingResult,
            final Model model,
            final HttpServletRequest httpServletRequest) {
        log("Action 'create child data'");

        final TbOrgDesignation tbOrgDesignation = new TbOrgDesignation();
        TbOrgDesignation tbOrgDesignationCreated = null;

        try {
            if (!bindingResult.hasErrors()) {
                int counter = 0;
                if (orgDesignationList.size() != 0) {
                    for (final TbOrgDesignation orgDesignation : orgDesignationList) {
                        if (orgDesignation.getDsgid().intValue() == designationBean.getDsgid().intValue()) {
                            counter++;
                            break;
                        } else {
                        }
                        counter = 0;
                    }
                    if (counter == 0) {
                        tbOrgDesignation.setDsgid(designationBean.getDsgid());
                        tbOrgDesignation.setDesgName(designationBean.getDsgname());
                        tbOrgDesignation.setDesgShortName(designationBean.getDsgshortname());
                        tbOrgDesignation.setOrgid(UserSession.getCurrent().getOrganisation().getOrgid());
                        orgDesignationList.add(tbOrgDesignation);
                        tbOrgDesignationCreated = tbOrgDesignationService.createDesgOrgData(tbOrgDesignation, orgDesignationList);

                    } else {
                        return MainetConstants.CommonConstants.ERROR;
                    }
                } else {
                    tbOrgDesignation.setDsgid(designationBean.getDsgid());
                    tbOrgDesignation.setDesgName(designationBean.getDsgname());
                    tbOrgDesignation.setDesgShortName(designationBean.getDsgshortname());
                    tbOrgDesignation.setOrgid(UserSession.getCurrent().getOrganisation().getOrgid());
                    orgDesignationList.add(tbOrgDesignation);
                    tbOrgDesignationCreated = tbOrgDesignationService.createDesgOrgData(tbOrgDesignation, orgDesignationList);
                }
                model.addAttribute(MainetConstants.CommonMasterUi.TB_ORGINATION, tbOrgDesignationCreated);
                return MainetConstants.CommonMasterUi.TB_ORGINATION;
            } else {
                return JSP_FORM;
            }
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbCustbanksMas.error.create", e);
            return JSP_FORM;
        }
    }

    /**
     * Shows a form page in order to update an existing TbOrgDesignation
     * @param model Spring MVC model
     * @param mapId primary key element
     * @return
     */
    @RequestMapping(params = "formForUpdate")
    public String formForUpdate(final Model model, @RequestParam("mapId") final Long mapId) {
        log("Action 'formForUpdate'");
        // --- Search the entity by its primary key and stores it in the model
        final TbOrgDesignation tbOrgDesignation = tbOrgDesignationService.findById(mapId);
        populateModel(model, tbOrgDesignation, FormMode.UPDATE);
        return JSP_FORM;
    }

    /**
     * 'CREATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbOrgDesignation entity to be created
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "create") // GET or POST
    public ModelAndView create(@Valid final TbOrgDesignation tbOrgDesignation, final BindingResult bindingResult,
            final Model model,
            final HttpServletRequest httpServletRequest) {
        log("Action 'create'");

        try {
            if (!bindingResult.hasErrors()) {
                final TbOrgDesignation tbOrgDesignationCreated = tbOrgDesignationService.createDesgOrgData(tbOrgDesignation,
                        orgDesignationList);
                model.addAttribute(MAIN_ENTITY_NAME, tbOrgDesignationCreated);
                model.addAttribute(MainetConstants.CommonConstants.SUCCESS_PAGE, "OrgDesignation.html");
                return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                        MainetConstants.COMMON_STATUS.SUCCESS);
            } else {
                populateModel(model, tbOrgDesignation, FormMode.CREATE);
                return new ModelAndView(JSP_FORM);
            }
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbOrgDesignation.error.create", e);
            populateModel(model, tbOrgDesignation, FormMode.CREATE);
            return new ModelAndView(JSP_FORM);
        }
    }

    /**
     * 'UPDATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbOrgDesignation entity to be updated
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "update") // GET or POST
    public ModelAndView update(@Valid final TbOrgDesignation tbOrgDesignation, final BindingResult bindingResult,
            final Model model,
            final HttpServletRequest httpServletRequest) {
        log("Action 'update'");
        try {
            if (!bindingResult.hasErrors()) {
                // --- Perform database operations
                final TbOrgDesignation tbOrgDesignationSaved = tbOrgDesignationService.update(tbOrgDesignation);
                model.addAttribute(MAIN_ENTITY_NAME, tbOrgDesignationSaved);
                // --- Set the result message
                log("Action 'update' : update done - redirect");
                return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                        MainetConstants.COMMON_STATUS.SUCCESS);
            } else {
                log("Action 'update' : binding errors");
                populateModel(model, tbOrgDesignation, FormMode.UPDATE);
                return new ModelAndView(JSP_FORM);
            }
        } catch (final Exception e) {
            messageHelper.addException(model, "tbOrgDesignation.error.update", e);
            log("Action 'update' : Exception - " + e.getMessage());
            populateModel(model, tbOrgDesignation, FormMode.UPDATE);
            return new ModelAndView(JSP_FORM);
        }
    }

    /**
     * 'DELETE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param redirectAttributes
     * @param mapId primary key element
     * @return
     */
    @RequestMapping(params = "delete") // GET or POST
    public @ResponseBody String delete(@RequestParam("mapId") final Long mapId) {
        log("Action 'delete'");
        String message = MainetConstants.COMMON_STATUS.FAILURE;
        tbOrgDesignationService.deleteMap(mapId);
        message = MainetConstants.COMMON_STATUS.SUCCESS;
        return message;
    }

    @RequestMapping(params = "checkEmpExists")
    public @ResponseBody boolean checkEmpExists(@RequestParam("mapId") final Long mapId) {
        final TbOrgDesignation tbOrgDesignation = tbOrgDesignationService.findById(mapId);
        boolean exist = true;
        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        final List<Object[]> empList = employeeService.getAllEmpByDesignation(tbOrgDesignation.getDsgid(), orgId);
        if (empList.size() == 0) {
            exist = false;
        }
        return exist;
    }

}
