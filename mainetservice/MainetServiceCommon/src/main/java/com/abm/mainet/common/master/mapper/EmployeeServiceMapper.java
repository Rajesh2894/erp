/*
 * Created on 19 Aug 2015 ( Time 17:12:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.mapper;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.Designation;
import com.abm.mainet.common.domain.Employee;
import com.abm.mainet.common.domain.EmployeeWardZoneMapping;
import com.abm.mainet.common.domain.LocationMasEntity;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.dto.EmployeeDTO;
import com.abm.mainet.common.master.dto.EmployeeBean;
import com.abm.mainet.common.master.repository.EmployeeWardZoneMapRepository;
import com.abm.mainet.common.utility.AbstractServiceMapper;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class EmployeeServiceMapper extends AbstractServiceMapper {
	
	
	@Autowired EmployeeWardZoneMapRepository empWardZoneRepository;

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;

	/**
	 * Constructor.
	 */
	public EmployeeServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	public EmployeeDTO mapEmployeeTOEmployeeDTO(final Employee employee) {

		if (employee == null) {
			return null;
		}

		final EmployeeDTO employeeDTO = map(employee, EmployeeDTO.class);

		return employeeDTO;
	}

	/**
	 * Mapping from 'EmployeeEntity' to 'Employee'
	 * 
	 * @param employeeEntity
	 */
	public EmployeeBean mapEmployeeEntityToEmployee(final Employee employeeEntity) {
		if (employeeEntity == null) {
			return null;
		}

		// --- Generic mapping
		final EmployeeBean employee = map(employeeEntity, EmployeeBean.class);

		// --- Link mapping ( link to TbOrganisation )
		if (employeeEntity.getOrganisation() != null) {
			employee.setOrgid(Long.valueOf(employeeEntity.getOrganisation().getOrgid()));
		}
		// --- Link mapping ( link to Designation )
		if (employeeEntity.getDesignation() != null) {
			employee.setDsgid(employeeEntity.getDesignation().getDsgid());
			if (UserSession.getCurrent().getLanguageId() == 1) {
				employee.setDesignName(employeeEntity.getDesignation().getDsgname());
			} else {
				employee.setDesignName(employeeEntity.getDesignation().getDsgnameReg());
			}
		}
		// --- Link mapping ( link to TbLocationMas )
		if (employeeEntity.getTbLocationMas() != null) {
			employee.setDepid(employeeEntity.getTbLocationMas().getLocId());
			if (UserSession.getCurrent().getLanguageId() == 1) {
				employee.setLocation(employeeEntity.getTbLocationMas().getLocNameEng());
			} else {
				employee.setLocation(employeeEntity.getTbLocationMas().getLocNameReg());
			}
		}
		// --- Link mapping ( link to TbDepartment )
		if (employeeEntity.getTbDepartment() != null) {
			employee.setDpDeptid(Long.valueOf(employeeEntity.getTbDepartment().getDpDeptid()));
			if (UserSession.getCurrent().getLanguageId() == 1) {
				employee.setDeptName(employeeEntity.getTbDepartment().getDpDeptdesc());
			} else {
				employee.setDeptName(employeeEntity.getTbDepartment().getDpNameMar());
			}
		}

		if (employeeEntity.getEmpphotopath() != null) {
			employee.setEmpphotoPath(employeeEntity.getEmpphotopath());
		}
		if (employeeEntity.getScansignature() != null) {
			employee.setScansignature(employeeEntity.getScansignature());
		}
		if (employeeEntity.getEmpuiddocpath() != null) {
			employee.setEmpuiddocPath(employeeEntity.getEmpuiddocpath());
		}
		return employee;
	}

	/**
	 * Mapping from 'Employee' to 'EmployeeEntity'
	 * 
	 * @param employee
	 * @param employeeEntity
	 */
	public void mapEmployeeToEmployeeEntity(final EmployeeBean employee, final Employee employeeEntity) {
		if (employee == null) {
			return;
		}

		// --- Generic mapping
		map(employee, employeeEntity);

		// --- Link mapping ( link : employee )
		if (hasLinkToTbOrganisation(employee)) {
			final Organisation tbOrganisation1 = new Organisation();
			tbOrganisation1.setOrgid(employee.getOrgid().longValue());
			employeeEntity.setOrganisation(tbOrganisation1);
		} else {
			employeeEntity.setOrganisation(null);
		}

		// --- Link mapping ( link : employee )
		if (hasLinkToDesignation(employee)) {
			final Designation designation2 = new Designation();
			designation2.setDsgid(employee.getDsgid());
			employeeEntity.setDesignation(designation2);
		} else {
			employeeEntity.setDesignation(null);
		}

		// --- Link mapping ( link : employee )
		if (hasLinkToTbLocationMas(employee)) {
			final LocationMasEntity tbLocationMas3 = new LocationMasEntity();
			tbLocationMas3.setLocId(employee.getDepid());
			employeeEntity.setTbLocationMas(tbLocationMas3);
		} else {
			employeeEntity.setTbLocationMas(null);
		}

		// --- Link mapping ( link : employee )
		if (hasLinkToTbDepartment(employee)) {
			final Department tbDepartment4 = new Department();
			tbDepartment4.setDpDeptid(employee.getDpDeptid().longValue());
			employeeEntity.setTbDepartment(tbDepartment4);
		} else {
			employeeEntity.setTbDepartment(null);
		}

		if (employee.getIsEmpPhotoDeleted().equals(MainetConstants.Common_Constant.YES)) {
			employeeEntity.setEmpphotopath(null);
		} else {
			if (employee.getEmpphotoPath() != null) {
				employeeEntity.setEmpphotopath(employee.getEmpphotoPath());
			}
			if (employee.getScansignature() != null) {
				employeeEntity.setScansignature(employee.getScansignature());
			}
			if (employee.getEmpuiddocPath() != null) {
				employeeEntity.setEmpuiddocpath(employee.getEmpuiddocPath());
			}
		}

	}

	/**
	 * Verify that TbOrganisation id is valid.
	 * 
	 * @param TbOrganisation TbOrganisation
	 * @return boolean
	 */
	private boolean hasLinkToTbOrganisation(final EmployeeBean employee) {
		if (employee.getOrgid() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Designation id is valid.
	 * 
	 * @param Designation Designation
	 * @return boolean
	 */
	private boolean hasLinkToDesignation(final EmployeeBean employee) {
		if (employee.getDsgid() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that TbLocationMas id is valid.
	 * 
	 * @param TbLocationMas TbLocationMas
	 * @return boolean
	 */
	private boolean hasLinkToTbLocationMas(final EmployeeBean employee) {
		if (employee.getDepid() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that TbDepartment id is valid.
	 * 
	 * @param TbDepartment TbDepartment
	 * @return boolean
	 */
	private boolean hasLinkToTbDepartment(final EmployeeBean employee) {
		if (employee.getDpDeptid() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(final ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

	public EmployeeBean mapEmployeeEntityToEmployeeWithRole(Employee employeeEntity, Map<Long, String> groupLookup) {
		if (employeeEntity == null) {
			return null;
		}

		// --- Generic mapping
		final EmployeeBean employee = map(employeeEntity, EmployeeBean.class);

		// --- Link mapping ( link to TbOrganisation )
		if (employeeEntity.getOrganisation() != null) {
			employee.setOrgid(Long.valueOf(employeeEntity.getOrganisation().getOrgid()));
		}
		// --- Link mapping ( link to Designation )
		if (employeeEntity.getDesignation() != null) {
			employee.setDsgid(employeeEntity.getDesignation().getDsgid());
			if (UserSession.getCurrent().getLanguageId() == 1) {
				employee.setDesignName(employeeEntity.getDesignation().getDsgname());
			} else {
				employee.setDesignName(employeeEntity.getDesignation().getDsgnameReg());
			}
		}
		// --- Link mapping ( link to TbLocationMas )
		if (employeeEntity.getTbLocationMas() != null) {
			employee.setDepid(employeeEntity.getTbLocationMas().getLocId());
			if (UserSession.getCurrent().getLanguageId() == 1) {
				employee.setLocation(employeeEntity.getTbLocationMas().getLocNameEng());
			} else {
				employee.setLocation(employeeEntity.getTbLocationMas().getLocNameReg());
			}
		}
		// --- Link mapping ( link to TbDepartment )
		if (employeeEntity.getTbDepartment() != null) {
			employee.setDpDeptid(Long.valueOf(employeeEntity.getTbDepartment().getDpDeptid()));
			if (UserSession.getCurrent().getLanguageId() == 1) {
				employee.setDeptName(employeeEntity.getTbDepartment().getDpDeptdesc());
			} else {
				employee.setDeptName(employeeEntity.getTbDepartment().getDpNameMar());
			}
		}

		// String moduleName = entitlementDao.getEntitles(employee.getGmid(),
		// employee.getOrgid());

		// employee.setModuleName(moduleName);

		// List<Long> roleList =
		// workflowService.findEmployeeRole(employeeEntity.getEmpId(),
		// employeeEntity.getDesignation().getDsgid());
		/*
		 * if(groupLookup!=null) { StringBuilder sb = new StringBuilder();
		 * sb.append(groupLookup.get(employeeEntity.getGmid())); for(Long role :
		 * roleList) { if(role!=null && !role.equals(employeeEntity.getGmid())) {
		 * sb.append(", "); sb.append(groupLookup.get(role)); }else { } }
		 * 
		 * employee.setRoleName(sb.toString()); }
		 */
		//employee.setEmpNo(employeeEntity.getEmpNo());

		EmployeeWardZoneMapping employeeWardZoneMapping = empWardZoneRepository.findByEmpId(employeeEntity.getEmpId());

		if (employeeWardZoneMapping != null) {

			employee.setHiddenWardId(employeeWardZoneMapping.getLoc2());
			employee.setHiddenZoneId(employeeWardZoneMapping.getLoc1());
			employee.setHiddenSectorTehsilId(employeeWardZoneMapping.getLoc3());
			employee.setHiddenSectorId(employeeWardZoneMapping.getLoc4());

			try {
				List<Long> list = Stream.of(employeeWardZoneMapping.getLoc1().split(",")).map(Long::parseLong)
						.collect(Collectors.toList());
				List<LookUp> lookUpList = CommonMasterUtility.getLevelData("DDZ", 2,
						UserSession.getCurrent().getOrganisation());
				employee.setWardList(lookUpList.stream().filter(lookUp -> list.contains(lookUp.getLookUpParentId()))
						.collect(Collectors.toList()));

				List<Long> listTehsil = Stream.of(employeeWardZoneMapping.getLoc2().split(",")).map(Long::parseLong)
						.collect(Collectors.toList());
				List<LookUp> lookUpListTehsil = CommonMasterUtility.getLevelData("DDZ", 3,
						UserSession.getCurrent().getOrganisation());
				employee.setSectorTehsilList(
						lookUpListTehsil.stream().filter(lookUp -> listTehsil.contains(lookUp.getLookUpParentId()))
								.collect(Collectors.toList()));
				
				List<Long> listSector = Stream.of(employeeWardZoneMapping.getLoc3().split(",")).map(Long::parseLong)
						.collect(Collectors.toList());
				List<LookUp> lookUpListSector = CommonMasterUtility.getLevelData("DDZ", 4,
						UserSession.getCurrent().getOrganisation());
				employee.setSectorList(
						lookUpListSector.stream().filter(lookUp -> listSector.contains(lookUp.getLookUpParentId()))
								.collect(Collectors.toList()));
			} catch (Exception e) {

			}
			
			 
		}

		return employee;
	}

}