/*
 * Created on 16 Jul 2016 ( Time 14:47:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.integration.acccount.service;

import java.util.List;
import java.util.Map;

import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.integration.acccount.domain.AccountHeadSecondaryAccountCodeMasterEntity;
import com.abm.mainet.common.integration.acccount.dto.AccountSecondaryHeadMasterExportDto;
import com.abm.mainet.common.integration.acccount.dto.SecondaryheadMaster;
import com.abm.mainet.common.integration.acccount.dto.TbSacheadAccMapDTO;
import com.abm.mainet.common.utility.LookUp;

/**
 * Business Service Interface for entity TbAcSecondaryheadMaster.
 */
public interface SecondaryheadMasterService {

    /**
     * Loads an entity from the database using its Primary Key
     * @param sacHeadId
     * @return entity
     */
    SecondaryheadMaster findBySacHeadId(Long sacHeadId, Long orgId);

    /**
     * Loads all entities.
     * @return all entities
     */
    List<SecondaryheadMaster> findAll(Long orgId);

    /**
     * Saves the given entity in the database (create or update)
     * @param entity
     * @return entity
     */
    SecondaryheadMaster save(SecondaryheadMaster entity);

    /**
     * Updates the given entity in the database
     * @param entity
     * @return
     */
    SecondaryheadMaster update(SecondaryheadMaster entity);

    /**
     * Creates the given entity in the database
     * @param entity
     * @return
     */
    SecondaryheadMaster saveSecondaryHeadData(SecondaryheadMaster entity, Organisation orgId, int langId);

    /**
     * Deletes an entity using its Primary Key
     * @param sacHeadId
     */
    void delete(Long sacHeadId);

    public Map<Long, String> getSecondaryHeadCodeLastLevels(Long orgId);

    public Map<Long, String> findAllById(Long primaryAcHeadId);

    public Map<Long, String> findPrimarySecondaryHead(Long orgid);

    public Map<Long, String> findPrimarySecondaryHeadForJournalVoucher(Long orgid);

    public String findByPacHeadId(Long sacHeadId, Long orgId);

    public String findBysacHeadCodeDesc(Long sacHeadId, Long orgId);

    public String findByPrimarySacHeadCodeDesc(Long sacHeadId);

    public Map<Long, String> findStatusPrimarySecondaryHeadData(Long orgid, Organisation organisation, int langId);

    public Map<Long, String> getSecondaryHeadCodeOnlyLastLevels(Long orgId);

    public Map<Long, String> findPrimarySecondaryHeadDepTypes(Long depTypeId, Long statusId, Long orgId);

    public Map<Long, String> findBudgetHeadDepTypes(Long depTypeId, Long cpdDepositType, Long statusId, Long orgId);

    public Map<Long, String> findAccountHeadDepTypes(Long depTypeId, Long depSubTypeId, Long statusId, Long orgId);

    public List<SecondaryheadMaster> findByAllGridSearchData(Long fundId, Long fieldId, Long pacHeadId, Long functionId,
            Long sacHeadId, Long ledgerTypeId, Long defaultOrgId);

    /**
     * use this method to get all AccountHead List order by ASC of Head Description organization wise , will return all active and
     * inactive both
     * @param orgId
     * @return
     */
    List<LookUp> findAccountHeadsByOrgId(Long orgId);

    List<Object[]> findSacHeadIdDescAllData(Long orgId, Long statusId);

    /**
     * use this service to get ExpenditureHeads dropdown list
     *
     * @param orgId
     * @return {@code Map<key,value>} of Expenditure Heads items
     */
    Map<Long, String> findExpenditureHeadMap(Long orgId);

    /**
     * use this service to get Deduction Head dropdown list
     *
     * @param orgId
     * @return {@code Map<key,value>} of Deduction Heads items
     */
    Map<Long, String> findDeductionHeadMap(Long orgId);

    Map<Long, String> getAcHeadCodeInReceieptEntry(Long activeStatusId, Long orgId);

    String getAccountHeadCodeInReceieptDetEntry(Long sacHeadId);

    Long vendorIdWiseGetFunctionIdValue(Long VmVendorid);

    List<AccountHeadSecondaryAccountCodeMasterEntity> getSecondaryHeadcodesForTax(Long orgId);

    String findByAccountHead(Long accountHeadId);

    List<LookUp> findAccountHeadsByOrgIdBankBook(Long orgId);

    List<AccountHeadSecondaryAccountCodeMasterEntity> getSacHeadCode(Long orgId);

    /**
     * use this service to get ExpenditureHeads dropdown list in View Mode
     *
     * @param orgId
     * @return {@code Map<key,value>} of Expenditure Heads items
     */
    Map<Long, String> findExpenditureHeadMapForView(Long orgId);

    Map<Long, String> getAllFinincialYear(Long orgId, int langId);

    List<LookUp> findAccountHeadsByOrgIdCashHead(Long orgId, Long sacHeadId);

    Map<Long, String> getSecondaryHeadcodesForIncomeAndExpenditure(Long orgId);

    Long getSacHeadIdByBudgetCodeId(Long prBudgetCodeid, Long orgId);

    Map<Long, String> getAcHeadCodeInReceieptCategoryTypeEntry(Long activeStatusId, Long orgId, String recCategoryType);

    Map<Long, String> getDirectAcHeadCodeByOrgId(Long orgId);

    String vendorIdWiseGetAccountHeadCodeValue(Long vmVendorid);

    List<AccountHeadSecondaryAccountCodeMasterEntity> getSecondaryHeadcodesForWorks(Long orgId);

    List<LookUp> findAccountHeadsByOrgIdAndStatusId(Long orgId, Integer langId);

    List<Object[]> findByLedgerHeadTypeAndAccountHead(Long orgId, Long acCatagory, Long acType,
            Long statusId);

    // export excel sheet secondary head master data into Data Base
    void saveSecondaryHeadExportData(AccountSecondaryHeadMasterExportDto accountSecondaryHeadMasterExportDto,
            Organisation defaultOrg, int langId);

    List<AccountHeadSecondaryAccountCodeMasterEntity> getActiveSacHeadCodeDeatails(Long orgId, Long activeStatusId);

    Map<Long, String> getTaxMasBillDeductionAcHeadAllDetails(Long orgid, Long taxMasLookUpId);

    Map<Long, String> getSecondaryHeadDesc(Long orgId);

    Map<Long, String> getTaxMasBillPaymentsAcHeadAllDetails(Long orgid, Long taxMasLookUpId);

    Map<Long, String> getTaxMasBillDeductionAcHeadDescAllDetails(Long orgid, Long taxMasLookUpId);

    Map<Long, String> findStatusWiseObjectHeadData(Organisation organisation, int langId);

    boolean checkDupFunPriDescExist(SecondaryheadMaster bean, Long activeStatusId);

    Map<Long, String> findExpenditureHeadMapAccountTypeIsOthers(Long orgid);

    List<LookUp> findExpenditureAccountHeadOnly(Long orgId, Integer langId, String cpdValue);

    String findSacHeadCodeBySacHeadId(Long sacHeadId);

    Map<Long, String> getDeductionHeadForAdvAdjustment(Long orgId, Long AdvanceId);
    
    Map<Long, String> getTaxMasBillDeductionTaxId(Long orgId, Long AdvanceId);

	AccountHeadSecondaryAccountCodeMasterEntity findOne(Long orgId, Long sacHeadId);

	Long getSacHeadIdByBudgetId(Long prBudgetCodeid, Long orgId);

	Map<Long, String> findStatusPrimarySecondaryHeadDataFuntId(Long orgid, Organisation organisation, int langId,
			Long functionId);

	Map<Long, String> getTaxMasBillDeductionAcHeadAllDetails(Long orgid, Long taxMasLookUpId, Long taxMasLookUpSubId);

	Map<Long, String> findStatusPrimarySecondaryHeadDataDeposit(Long orgid, Organisation organisation, int langId);

	Map<Long, String> getAcHeadCode(Long orgId);

	Map<Long, String> oldSecondaryHeadDescMap(Long orgId);

	void saveSecondaryHeadBankMapDataBatch(List<TbSacheadAccMapDTO> tbSacheadAccMapDTOs);
	
	boolean doesCombinationExist(Long sacHeadId, Long baAccountId);
	
	
	
}

	
