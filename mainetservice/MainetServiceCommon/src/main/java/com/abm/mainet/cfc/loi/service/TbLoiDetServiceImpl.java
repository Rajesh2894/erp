/*

 * Created on 5 Apr 2016 ( Time 11:43:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.cfc.loi.service;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;

import javax.annotation.Resource;
import javax.jws.WebService;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.ClassUtils;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ReflectionUtils;

import com.abm.mainet.cfc.loi.dao.ILoiMasterPaymentDAO;
import com.abm.mainet.cfc.loi.domain.TbLoiDetEntity;
import com.abm.mainet.cfc.loi.domain.TbLoiDetEntityKey;
import com.abm.mainet.cfc.loi.domain.TbLoiDetHistEntity;
import com.abm.mainet.cfc.loi.domain.TbLoiMasEntity;
import com.abm.mainet.cfc.loi.domain.TbLoiMasHistEntity;
import com.abm.mainet.cfc.loi.dto.LoiPaymentSearchDTO;
import com.abm.mainet.cfc.loi.dto.TbLoiDet;
import com.abm.mainet.cfc.loi.dto.TbLoiMas;
import com.abm.mainet.cfc.loi.mapper.TbLoiDetServiceMapper;
import com.abm.mainet.cfc.loi.repository.TbLoiDetJpaHistRepository;
import com.abm.mainet.cfc.loi.repository.TbLoiDetJpaRepository;
import com.abm.mainet.cfc.loi.repository.TbLoiMasJpaHistRepository;
import com.abm.mainet.cfc.loi.repository.TbLoiMasJpaRepository;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.TbTaxMasEntity;
import com.abm.mainet.common.exception.FrameworkException;
import com.abm.mainet.common.integration.acccount.domain.TbServiceReceiptMasEntity;
import com.abm.mainet.common.integration.acccount.domain.TbSrcptFeesDetEntity;
import com.abm.mainet.common.integration.acccount.dto.TbServiceReceiptMasBean;
import com.abm.mainet.common.master.dto.TbServicesMst;
import com.abm.mainet.common.master.dto.TbTaxMas;
import com.abm.mainet.common.master.repository.TbTaxMasJpaRepository;
import com.abm.mainet.common.master.service.TbServicesMstService;
import com.abm.mainet.common.master.service.TbTaxMasService;
import com.abm.mainet.common.service.IOrganisationService;
import com.abm.mainet.common.service.IReceiptEntryService;
import com.abm.mainet.common.utility.ApplicationContextProvider;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.SeqGenFunctionUtility;
import com.abm.mainet.common.utility.Utility;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * Implementation of TbLoiDetService
 */
@WebService(endpointInterface = "com.abm.mainet.cfc.loi.service.TbLoiDetService")
@Api(value = "/tbLoiDetService")
@Path("/tbLoiDetService")
@Service
public class TbLoiDetServiceImpl implements TbLoiDetService {
	private static final Logger LOGGER = Logger.getLogger(TbLoiDetServiceImpl.class);
	@Resource
	private TbLoiDetJpaRepository tbLoiDetJpaRepository;

	@Resource
	private TbLoiDetServiceMapper tbLoiDetServiceMapper;

	@Autowired
	private MessageSource messageSource;

	@Autowired
	private TbLoiMasService iTbLoiMasService;

	@Autowired
	private ILoiMasterPaymentDAO iLoiMasterPaymentDAO;

	@Autowired
	private IReceiptEntryService iRecieptEntry;
	@Autowired
	private TbServicesMstService serviceMstService;
	@Autowired
	IOrganisationService iOrganisationService;
	@Resource
	private TbLoiMasJpaRepository tbLoiMasJpaRepository;

	@Resource
	private SeqGenFunctionUtility seqGenFunctionUtility;

	@Resource
	private TbLoiMasJpaRepository tbLoiMasRepo;

	@Resource
	private TbLoiMasJpaHistRepository tbLoiMasHistRepo;

	@Resource
	private TbLoiDetJpaHistRepository tbLoiDetHistRepo;

	@Resource
	private TbTaxMasService taxMasService;
	@Autowired
	private DishonourChargeEntryService dihonurChrgeEntryservice;
	
	@Autowired
    private TbTaxMasJpaRepository tbTaxMasJpaRepository;
    
    @Autowired
    private com.abm.mainet.common.service.IReceiptEntryService receiptEntryService;

	@Override
	public TbLoiDet create(final TbLoiDet tbLoiDet) {
		final TbLoiDetEntityKey id = new TbLoiDetEntityKey(tbLoiDet.getLoiDetId(), tbLoiDet.getOrgid());
		TbLoiDetEntity tbLoiDetEntity = tbLoiDetJpaRepository.findOne(id);
		if (tbLoiDetEntity != null) {
			throw new IllegalStateException("already.exists");
		}
		tbLoiDetEntity = new TbLoiDetEntity();
		tbLoiDetServiceMapper.mapTbLoiDetToTbLoiDetEntity(tbLoiDet, tbLoiDetEntity);
		final TbLoiDetEntity tbLoiDetEntitySaved = tbLoiDetJpaRepository.save(tbLoiDetEntity);
		return tbLoiDetServiceMapper.mapTbLoiDetEntityToTbLoiDet(tbLoiDetEntitySaved);
	}

	@Override
	public TbLoiDet update(final TbLoiDet tbLoiDet) {
		final TbLoiDetEntityKey id = new TbLoiDetEntityKey(tbLoiDet.getLoiDetId(), tbLoiDet.getOrgid());
		final TbLoiDetEntity tbLoiDetEntity = tbLoiDetJpaRepository.findOne(id);
		tbLoiDetServiceMapper.mapTbLoiDetToTbLoiDetEntity(tbLoiDet, tbLoiDetEntity);
		final TbLoiDetEntity tbLoiDetEntitySaved = tbLoiDetJpaRepository.save(tbLoiDetEntity);
		return tbLoiDetServiceMapper.mapTbLoiDetEntityToTbLoiDet(tbLoiDetEntitySaved);
	}

	public TbLoiDetJpaRepository getTbLoiDetJpaRepository() {
		return tbLoiDetJpaRepository;
	}

	public void setTbLoiDetJpaRepository(final TbLoiDetJpaRepository tbLoiDetJpaRepository) {
		this.tbLoiDetJpaRepository = tbLoiDetJpaRepository;
	}

	public TbLoiDetServiceMapper getTbLoiDetServiceMapper() {
		return tbLoiDetServiceMapper;
	}

	public void setTbLoiDetServiceMapper(final TbLoiDetServiceMapper tbLoiDetServiceMapper) {
		this.tbLoiDetServiceMapper = tbLoiDetServiceMapper;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.loi.service.TbLoiDetService#getModuleWiseCharges(
	 * java.lang.Long, java.lang.Long)
	 */
	@SuppressWarnings("unchecked")
	@Override
	@Transactional
	public Map<Long, Double> getModuleWiseCharges(final Long applicationId, final Long serviceId,
			final String serviceShortDesc, final long orgId) throws ClassNotFoundException, LinkageError {
		Map<Long, Double> amount = null;
		Class<?> clazz = null;
		Object dynamicServiceInstance = null;
		String serviceClassName = null;
		serviceClassName = messageSource.getMessage(serviceShortDesc, new Object[] {}, StringUtils.EMPTY,
				Locale.ENGLISH);

		clazz = ClassUtils.forName(serviceClassName,
				ApplicationContextProvider.getApplicationContext().getClassLoader());

		dynamicServiceInstance = ApplicationContextProvider.getApplicationContext().getAutowireCapableBeanFactory()
				.autowire(clazz, 4, false);
		final Method method = ReflectionUtils.findMethod(clazz,
				ApplicationSession.getInstance().getMessage("loidet.msg.loiCharges"),
				new Class[] { Long.class, Long.class, Long.class });
		amount = (Map<Long, Double>) ReflectionUtils.invokeMethod(method, dynamicServiceInstance,
				new Object[] { applicationId, serviceId, orgId });
		return amount;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.web.loi.service.TbLoiDetService#
	 * findLoiDetailsByLoiMasAndOrgId(com.abm.mainetservice.web.loi.bean. TbLoiMas,
	 * java.lang.Long)
	 */
	@Override
	@Transactional(readOnly = true)
	public LoiPaymentSearchDTO findLoiDetailsByLoiMasAndOrgId(final TbLoiMas master, final Long orgId) {
		Organisation org = new Organisation();
		org.setOrgid(orgId);
		Map<Long, Double> charges = null;
		Map<String, Double> chargeDesc = null;
		final LoiPaymentSearchDTO dto = new LoiPaymentSearchDTO();
		// #120105-> code updated for dashboard data based on env prefix
		final List<TbLoiDetEntity> tbLoiDetEntity = iLoiMasterPaymentDAO
				.findLoiDetailsByLoiMasAndOrgId(master.getLoiId(), orgId);
		if ((tbLoiDetEntity != null) && !tbLoiDetEntity.isEmpty()) {
			charges = new HashMap<>(0);
			for (final TbLoiDetEntity det : tbLoiDetEntity) {
				Double amt = charges.get(det.getLoiChrgid());
				if (det.getLoiAmount() != null) {
					if (amt == null) {
						charges.put(det.getLoiChrgid(), det.getLoiAmount().doubleValue());
					} else {
						charges.put(det.getLoiChrgid(), det.getLoiAmount().doubleValue() + amt);
					}
				}
			}
			if(Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_ASCL)) {
        		TbServiceReceiptMasEntity receiptDetailsByAppId = receiptEntryService.getReceiptDetailsByAppId(master.getLoiApplicationId(), orgId);
        		if(receiptDetailsByAppId != null) {
        			for (TbSrcptFeesDetEntity receiptDet : receiptDetailsByAppId.getReceiptFeeDetail()) {
            			Long taxDescId = tbTaxMasJpaRepository.getTaxDescIdByTaxId(receiptDet.getTaxId());
            			LookUp lookUp = CommonMasterUtility.getNonHierarchicalLookUpObject(taxDescId, org);
            			if(lookUp != null && StringUtils.equals(lookUp.getLookUpCode(), "APC")) {
            				dto.setApplicationFee(receiptDet.getRfFeeamount().doubleValue());
            				dto.setApplicationFeeTaxId(receiptDet.getTaxId());
            			}
    				}
        		}
        	}
			if (charges != null) {
				final List<Long> ids = new ArrayList<>(0);
				for (final Entry<Long, Double> entry : charges.entrySet()) {
					ids.add(entry.getKey());
				}
               //D#136539
				String editableFlag=MainetConstants.FlagN;
				if(StringUtils.isNotEmpty(master.getDeptShortCode())&& (master.getDeptShortCode().equals(MainetConstants.DEPT_SHORT_NAME.WATER) || (master.getDeptShortCode().equals(MainetConstants.RightToService.RTS_DEPT_CODE)))){
					editableFlag=MainetConstants.FlagY;
				}
				final Map<Long, String> chargedesc = iTbLoiMasService.getChargeDescByChgId(ids, orgId,
						editableFlag);
				if (chargedesc != null) {
					chargeDesc = new LinkedHashMap<>();
					for (final Entry<Long, Double> entry : charges.entrySet()) {
						for (final Entry<Long, String> entrydesc : chargedesc.entrySet()) {
							if (entry.getKey().equals(entrydesc.getKey())) {
								// code added for roymd off the chrge value Defect#121682 point-9
								chargeDesc.put(entrydesc.getValue(), Double.valueOf(Math.ceil(entry.getValue())));
								if (entry.getValue() != null) {
									dto.setTotal(dto.getTotal() + Double.valueOf(Math.ceil(entry.getValue())));
								}
							}
						}
					}
				}
			}

		}
		dto.setChargeDesc(chargeDesc);
		dto.setLoiCharges(charges);
		if(Utility.isEnvPrefixAvailable(org, MainetConstants.ENV_ASCL)) {
			if((StringUtils.isNotEmpty(master.getDeptShortCode()) && master.getDeptShortCode().equals(MainetConstants.DEPT_SHORT_NAME.PROPERTY))
					&& (StringUtils.isNotEmpty(master.getServiceShortCode()) && master.getServiceShortCode().equals(MainetConstants.Property.MUT))){
				dto.setTotalAmntInclApplFee(dto.getTotal());
				dto.setTotal(dto.getTotal() - (dto.getApplicationFee()));
			}		
		}
		return dto;

	}

	@Override
	public List<TbLoiDetEntity> findLoiDetailsByLoiIdAndOrgId(Long loiId, Long orgId) {

		return tbLoiDetJpaRepository.findLoiDetailsByLoiMasAndOrgId(loiId, orgId);
	}

	@SuppressWarnings("unchecked")
	@Override
	@Transactional
	public boolean saveServiceWiseAdvanceCharges(String serviceShortCode, Map<Long, Double> chargeDesc,
			Long applicationNo, Long receiptid, Long taxId, Long deptId, Long userId, Long orgId)
			throws ClassNotFoundException, LinkageError {
		boolean successFlag = false;
		try {
			Class<?> clazz = null;
			Object dynamicServiceInstance = null;
			String serviceClassName = null;
			serviceClassName = messageSource.getMessage(serviceShortCode, new Object[] {}, StringUtils.EMPTY,
					Locale.ENGLISH);
			clazz = ClassUtils.forName(serviceClassName,
					ApplicationContextProvider.getApplicationContext().getClassLoader());
			dynamicServiceInstance = ApplicationContextProvider.getApplicationContext().getAutowireCapableBeanFactory()
					.autowire(clazz, 4, false);
			final Method method = ReflectionUtils.findMethod(clazz,
					ApplicationSession.getInstance().getMessage("loidet.save.advance.payment"),
					new Class[] { Map.class, Long.class, Long.class, Long.class, Long.class, Long.class, Long.class });
			successFlag = (boolean) ReflectionUtils.invokeMethod(method, dynamicServiceInstance,
					new Object[] { chargeDesc, applicationNo, receiptid, taxId, deptId, userId, orgId });
		} catch (Exception exception) {
			throw new FrameworkException("Problem occured while calling saveAdvancePayment method", exception);
		}

		return successFlag;
	}

	@Override
	@Consumes("application/json")
	@POST
	@ApiOperation(value = "For saving cheque dishonour charges in loi table", notes = "For saving cheque dishonour charges in loi table", response = Boolean.class)
	@Path("/saveDishonourCharges/{receiptId}/receiptId/{dishonorAmt}/dishonorAmt/{orgId}/orgId/{userId}/userId/{remark}/remark")
	public boolean saveDishonourCharges(@PathParam("receiptId") Long receiptId,
			@PathParam("dishonorAmt") BigDecimal dishonorAmt, @PathParam("orgId") Long orgId,
			@PathParam("userId") Long userId,@PathParam("remark") String remark) {
		TbServiceReceiptMasBean rcptBean = null;
		TbLoiMasEntity loiMasEnt = null;
		Organisation organisation = iOrganisationService.getOrganisationById(orgId);
		if (receiptId != null) {
			rcptBean = iRecieptEntry.findReceiptById(receiptId, orgId);
		}
		// for bifurcationg Application time charge or Scrutiny time chrges
		if (Utility.isEnvPrefixAvailable(organisation, MainetConstants.ENV_SKDCL)) {
			if (rcptBean != null && !CollectionUtils.isEmpty(rcptBean.getReceiptFeeDetail())) {
				TbServicesMst serviceMst = serviceMstService.findById(rcptBean.getSmServiceId());
				if (serviceMst != null && serviceMst.getTbDepartment().getDpDeptcode()
						.equals(MainetConstants.TradeLicense.MARKET_LICENSE)) {
					TbTaxMas taxMas = taxMasService.findById(rcptBean.getReceiptFeeDetail().get(0).getTaxId(), orgId);
					if (taxMas != null && taxMas.getTaxApplicable() != null) {
						LookUp lookup = CommonMasterUtility.getNonHierarchicalLookUpObject(taxMas.getTaxApplicable(),
								organisation);
						if ((lookup != null && lookup.getLookUpCode() != null)
								&& lookup.getLookUpCode().equals(MainetConstants.ChargeApplicableAt.APPLICATION)) {
                         try {
							dihonurChrgeEntryservice.saveDishonourCharge(rcptBean.getApmApplicationId(), orgId, userId,
									dishonorAmt, remark);
                         }
                         catch (Exception e) {
                        	 LOGGER.error("Exception at the time of saveDishonourCharge  ");
						}
							return true;
						}
					}
				}
			}
		}

		if (rcptBean != null && rcptBean.getApmApplicationId() != null) {
			// getting loi master details
			loiMasEnt = tbLoiMasJpaRepository.findloiByApplicationIdAndOrgId(rcptBean.getApmApplicationId(), orgId);
			if (loiMasEnt != null) {
				TbLoiMasHistEntity loiMasHist = new TbLoiMasHistEntity();
				try {
					BeanUtils.copyProperties(loiMasHist, loiMasEnt);
					loiMasHist.setLangId(1L);
					loiMasHist.setLoiId(loiMasEnt.getLoiId());
					loiMasHist.setOrgid(orgId);
					// saving loi master details in history table
					tbLoiMasHistRepo.save(loiMasHist);
				} catch (Exception e) {
					LOGGER.error("Exceptiion at the time of save LoiMasHist data ");
				}
				loiMasEnt.setLoiPaid(MainetConstants.FlagN);
				loiMasEnt.setLoiAmount(dishonorAmt.add(loiMasEnt.getLoiAmount()));
				loiMasEnt.setUpdatedDate(new Date());
				loiMasEnt.setUpdatedBy(userId);
				loiMasEnt.setLoiPayMode(MainetConstants.FlagN);
				// saving loi master details in master table
				tbLoiMasJpaRepository.save(loiMasEnt);
				try {
					if (rcptBean.getSmServiceId() != null && loiMasEnt.getLoiId() != null) {
						// fetching loi details in by loi id
						List<TbLoiDetEntity> loiDetListEnt = tbLoiDetJpaRepository
								.findLoiDetailsByLoiMasAndOrgId(loiMasEnt.getLoiId(), orgId);
						List<TbLoiDetHistEntity> entHist = new ArrayList<TbLoiDetHistEntity>();
						if (!CollectionUtils.isEmpty(loiDetListEnt)) {
							for (TbLoiDetEntity detEnt : loiDetListEnt) {
								if (detEnt.getLoiDetId() != null) {
									TbLoiDetHistEntity detHist = new TbLoiDetHistEntity();
									BeanUtils.copyProperties(detHist, detEnt);
									detHist.setLoiDetId(detEnt.getLoiDetId());
									detHist.setLangId(1L);
									detHist.setOrgid(orgId);
									entHist.add(detHist);
								}

							}
						}
						if (!CollectionUtils.isEmpty(entHist)) {
							// saving loi details data in history table
							tbLoiDetHistRepo.save(entHist);
						}
					}
				} catch (Exception e) {
					LOGGER.error("Exceptiion at the time of save LoiDetHist data ");
				}
				TbServicesMst serviceMst = serviceMstService.findById(rcptBean.getSmServiceId());
				final LookUp chargeApplicableAt = CommonMasterUtility.getValueFromPrefixLookUp(
						PrefixConstants.NewWaterServiceConstants.SCRUTINY, PrefixConstants.NewWaterServiceConstants.CAA,
						organisation);
				LookUp lookUp1 = CommonMasterUtility.getHieLookupByLookupCode("CDC", "TAC", 2, orgId);
				List<TbTaxMasEntity> taxesMaster = null;
				try {
					// fetching dishonur tax details by deptId ,orgid and subcategoryId
					taxesMaster = taxMasService.findAllTaxesByChargeAppAtAndTaxSubCat(orgId,
							serviceMst.getTbDepartment().getDpDeptid(), chargeApplicableAt.getLookUpId(),
							lookUp1.getLookUpId());

					TbLoiDetEntity tbloiEntity = new TbLoiDetEntity();
					tbloiEntity.setOrgid(orgId);
					final Long primaryKeyDet = seqGenFunctionUtility.generateSequenceNo(
							MainetConstants.DEPT_SHORT_NAME.CFC_CENTER, MainetConstants.LOI.TB_LOI_DET,
							MainetConstants.LOI.LOI_DET_ID, tbloiEntity.getOrgid(), null, null);
					tbloiEntity.setLoiDetId(primaryKeyDet);
					tbloiEntity.setLoiMasId(loiMasEnt.getLoiId());
					tbloiEntity.setLmoddate(new Date());
					tbloiEntity.setUserId(userId);

					if (!CollectionUtils.isEmpty(taxesMaster)) {
						tbloiEntity.setLoiChrgid(taxesMaster.get(0).getTaxId());
						tbloiEntity.setLoiAmount(dishonorAmt);
					}
					// saving Loi Detail Table
					TbLoiDetEntity entity = tbLoiDetJpaRepository.save(tbloiEntity);
					if (entity != null) {
						return true;
					}
				} catch (Exception e) {
					LOGGER.error("Exception occured at the time of saving Dishonure charges in LoiDetails table");
				}
			}
		}

		return false;
	}
}
