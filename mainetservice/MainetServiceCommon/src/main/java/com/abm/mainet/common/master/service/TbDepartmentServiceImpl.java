/*
 * Created on 27 Jul 2015 ( Time 17:56:33 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.audit.service.AuditService;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.DepartmentHistory;
import com.abm.mainet.common.domain.DeptLocationEntity;
import com.abm.mainet.common.domain.DeptOrgMap;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.dto.TbDepartmentDTO;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.dto.TbDeptLocation;
import com.abm.mainet.common.master.mapper.TbDepartmentServiceMapper;
import com.abm.mainet.common.master.mapper.TbDeporgMapServiceMapper;
import com.abm.mainet.common.master.mapper.TbDeptLocationServiceMapper;
import com.abm.mainet.common.master.repository.TbDepartmentJpaRepository;
import com.abm.mainet.common.service.DepartmentProvisionService;
import com.abm.mainet.common.service.TbComparamDetService;
import com.abm.mainet.common.utility.Utility;


/**
 * Implementation of TbDepartmentService
 */
@Component
public class TbDepartmentServiceImpl implements TbDepartmentService {

    @Resource
    private TbDepartmentJpaRepository tbDepartmentJpaRepository;

    @Resource
    private TbDepartmentServiceMapper tbDepartmentServiceMapper;

    @Resource
    private TbDeptLocationServiceMapper tbDeptLocationServiceMapper;

    @Resource
    private TbDeporgMapServiceMapper tbDeporgMapServiceMapper;

    @Resource
    TbComparamDetService tbComparamDetService;

    @Resource
    TbOrganisationService tbOrganisationService;

    @Resource
    private AuditService auditService;

    @Resource
    private TbDeporgMapService tbDeporgMapService;

    @Resource
    private DepartmentProvisionService departmentProvisionService;

    private static final String ISDEFAULTORG = "Y";

    @Override
    @Transactional
    public TbDepartment findById(final Long dpDeptid) {
        final Department tbDepartmentEntity = tbDepartmentJpaRepository.findOne(dpDeptid);
        final TbDepartment tbDepartment = tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity);
        if (tbDepartment.getDpCheck().equals(MainetConstants.Y_FLAG)) {
            tbDepartment.setActiveChkBox(true);
        } else {
            tbDepartment.setActiveChkBox(false);
        }
        return tbDepartment;
    }

    @Override
    @Transactional
    public List<TbDepartment> findAll() {
        final List<TbDepartment> beans = new ArrayList<>();
        try {
            final Iterable<Department> entities = tbDepartmentJpaRepository.findAllByDeptIdOrgID();

            for (final Department tbDepartmentEntity : entities) {
                beans.add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
            }
        } catch (final Exception e) {
            e.printStackTrace();
        }
        return beans;
    }
    
	@Override
    @Transactional
    public List<TbDepartment> findByEmpId(Long empId,Long orgId) {
        final List<TbDepartment> beans = new ArrayList<>();
        try {
        	 List<Object[]>     entities = tbDepartmentJpaRepository.findAllByEmpIdOrgID(empId,orgId);

				for (Object[] arr : entities) {
					TbDepartment dept = new TbDepartment();
					if (dept != null) {
						if (arr[0] != null)
							dept.setDpDeptid(Long.valueOf(arr[0].toString()));
						if (arr[1] != null)
							dept.setDpDeptcode(arr[1].toString());
						if (arr[2] != null)
							dept.setDpDeptdesc(arr[2].toString());
						if (arr[3] != null)
							dept.setDpNameMar(arr[3].toString());
						beans.add(dept);
					}
				}
        } catch (final Exception e) {
            e.printStackTrace();
        }
        return beans;
    }

    @Override
    @Transactional
    public TbDepartment save(final TbDepartment tbDepartment) {
        return update(tbDepartment);
    }

    @Override
    @Transactional
    public TbDepartment create(final TbDepartment tbDepartment, final Long orgId) {

        final Department tbDepartmentEntity = new Department();

        tbDepartmentServiceMapper.mapTbDepartmentToTbDepartmentEntity(tbDepartment, tbDepartmentEntity);
        if (tbDepartment.isActiveChkBox()) {
            tbDepartmentEntity.setDpCheck(MainetConstants.Y_FLAG);
        } else {
            tbDepartmentEntity.setDpCheck(MainetConstants.N_FLAG);
        }
        tbDepartmentEntity.setLgIpMac(tbDepartment.getLgIpMac());
        final Department tbDepartmentEntitySaved = tbDepartmentJpaRepository.save(tbDepartmentEntity);
        TbDepartment depatmentDto = tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntitySaved);

        // used to post created department details on other environment using web service.
        // departmentProvisionService.createDepartment(depatmentDto);

        final DeptOrgMap deptOrgMap = new DeptOrgMap();

        deptOrgMap.setMapStatus(MainetConstants.STATUS.ACTIVE);
        deptOrgMap.setLangId(tbDepartmentEntitySaved.getLangId());
        deptOrgMap.setLmoddate(new Date());
        deptOrgMap.setDepartment(tbDepartmentEntitySaved);
        deptOrgMap.setOrgid(orgId);
        deptOrgMap.setUserId(tbDepartmentEntitySaved.getUserId());
        deptOrgMap.setLgIpMac(tbDepartment.getLgIpMac());
        tbDeporgMapService.createDefaultDepOrgMap(deptOrgMap);

        return depatmentDto;
    }

    @Override
    @Transactional
    public TbDepartment update(final TbDepartment tbDepartment) {
        final Department tbDepartmentEntity = tbDepartmentJpaRepository.findOne(tbDepartment.getDpDeptid());
        tbDepartmentServiceMapper.mapTbDepartmentToTbDepartmentEntity(tbDepartment, tbDepartmentEntity);
        if (tbDepartment.isActiveChkBox()) {
            tbDepartmentEntity.setDpCheck(MainetConstants.Y_FLAG);
        } else {
            tbDepartmentEntity.setDpCheck(MainetConstants.N_FLAG);
        }
        tbDepartmentEntity.setUpdatedDate(new Date());
        tbDepartmentEntity.setLgIpMacUpd(tbDepartment.getLgIpMacUpd());
        final DepartmentHistory tbDepartmentHistoryEntity = new DepartmentHistory();
        auditService.createHistory(tbDepartmentEntity, tbDepartmentHistoryEntity);

        final Department tbDepartmentEntitySaved = tbDepartmentJpaRepository.save(tbDepartmentEntity);

        TbDepartment departmentDTO = tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntitySaved);

        // used to post updated department details on other environment using web service
        // departmentProvisionService.updateDepartment(departmentDTO);

        return departmentDTO;
    }

    @Override
    @Transactional
    public void delete(final Long dpDeptid) {
        final Department tbDepartmentEntity = tbDepartmentJpaRepository.findOne(dpDeptid);
        tbDepartmentEntity.setStatus(MainetConstants.STATUS.INACTIVE);
        tbDepartmentJpaRepository.save(tbDepartmentEntity);
    }

    public TbDepartmentJpaRepository getTbDepartmentJpaRepository() {
        return tbDepartmentJpaRepository;
    }

    public void setTbDepartmentJpaRepository(final TbDepartmentJpaRepository tbDepartmentJpaRepository) {
        this.tbDepartmentJpaRepository = tbDepartmentJpaRepository;
    }

    public TbDepartmentServiceMapper getTbDepartmentServiceMapper() {
        return tbDepartmentServiceMapper;
    }

    public void setTbDepartmentServiceMapper(final TbDepartmentServiceMapper tbDepartmentServiceMapper) {
        this.tbDepartmentServiceMapper = tbDepartmentServiceMapper;
    }

    @Override
    @Transactional
    public List<TbDepartment> findActualDepartment() {
        final List<Department> entities = tbDepartmentJpaRepository.findActualDepartment();
        final List<TbDepartment> beans = new ArrayList<>();
        for (final Department tbDepartmentEntity : entities) {
            beans.add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
        }
        return beans;
    }

    @Override
    @Transactional
    public List<TbDepartment> findByOrgId(final Long orgId, final Long langId) {
        final List<DeptOrgMap> deporgMapEntityList = tbDepartmentJpaRepository.findByOrgId(orgId);
        Iterable<Department> entities = null;
        final List<TbDepartment> beans = new ArrayList<>();
        if ((deporgMapEntityList != null) && !deporgMapEntityList.isEmpty()) {
            final List<Long> deptIds = new ArrayList<>();
            for (final DeptOrgMap deporgMapEntity : deporgMapEntityList) {
                deptIds.add(Long.valueOf(deporgMapEntity.getDepartment().getDpDeptid()));
            }

            if (langId.intValue() == 1) {
                entities = tbDepartmentJpaRepository.findAllByDeptId(deptIds);
            } else {
                entities = tbDepartmentJpaRepository.findAllByDeptIdReg(deptIds);
            }
        }

        if (entities != null) {
            for (final Department tbDepartmentEntity : entities) {
                beans.add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
            }
        }
        return beans;
    }

    @Override
    public List<TbDeptLocation> getDepartmentData(final Long locId, final Long orgId) {
        final List<TbDeptLocation> tbDepLocMapList = new ArrayList<>();
        TbDeptLocation depLocMap = null;
        DeptLocationEntity deptLocMapEntity = null;
        Department department = null;
        final List<Object> departmentList = tbDepartmentJpaRepository.getDepartmentData(locId, orgId);

        final int dataSize = departmentList.size();
        for (int iCounter = 0; iCounter < dataSize; iCounter++) {
            final Object[] objData = (Object[]) departmentList.get(iCounter);
            department = (Department) objData[0];
            deptLocMapEntity = (DeptLocationEntity) objData[1];
            depLocMap = tbDeptLocationServiceMapper.mapTbDeptLocationEntityToTbDeptLocation(deptLocMapEntity);
            depLocMap.setDpDeptid(department.getDpDeptid());
            depLocMap.setAutLo1(department.getDpDeptdesc());
            if (department.getDpNameMar() != null && !department.getDpNameMar().isEmpty()) {
                depLocMap.setAutLo3(department.getDpNameMar());
            }
            if (MainetConstants.CommonConstants.ZERO.equals(deptLocMapEntity.getIsdeleted())) {
                depLocMap.setAutLo2(MainetConstants.FlagA);
            }
            depLocMap.setLgIpMac(deptLocMapEntity.getLgIpMac());
            depLocMap.setUserId(Long.valueOf(deptLocMapEntity.getUserId()));
            depLocMap.setMapid(deptLocMapEntity.getMapid());
            if (deptLocMapEntity.getUpdatedBy() != null) {
                depLocMap.setUpdatedBy(Long.valueOf(deptLocMapEntity.getUpdatedBy()));
            }
            if (deptLocMapEntity.getUpdatedDate() != null) {
                depLocMap.setUpdatedDate(deptLocMapEntity.getUpdatedDate());
            }
            if (depLocMap != null) {
                tbDepLocMapList.add(depLocMap);
            }
        }
        return tbDepLocMapList;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service. TbDepartmentService#searchDeptData(java.lang.Long,
     * java.lang.String)
     */
    @Override
    @Transactional
    public List<TbDepartment> searchDeptData(final Long department, final String deptCode) {

        List<Department> entities = Collections.emptyList();
        if ((department != null) && StringUtils.isEmpty(deptCode)) {
            entities = tbDepartmentJpaRepository.searchDeptData(department);
        } else if ((department != null) && !StringUtils.isEmpty(deptCode)) {
            entities = tbDepartmentJpaRepository.searchDeptData(department, deptCode);
        } else if ((department == null) && !StringUtils.isEmpty(deptCode)) {
            entities = tbDepartmentJpaRepository.searchDeptData(deptCode);
        } else {
            entities = tbDepartmentJpaRepository.findAllByDeptIdOrgID();
        }

        final List<TbDepartment> beans = new ArrayList<>();
        for (final Department tbDepartmentEntity : entities) {
            beans.add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
        }
        return beans;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service.
     * TbDepartmentService#validateDepartment(java.lang.String, com.abm.mainetservice.web.common.entity.Organisation)
     */
    @Override
    @Transactional
    public int validateDepartment(final String deptName, final Organisation organisation) {
        int count = 0;
        final Long recCount = tbDepartmentJpaRepository.validateDepartment(deptName);
        if (recCount != null) {
            count = recCount.intValue();
        }
        return count;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service.
     * TbDepartmentService#getDepartmentNameByShortCode(java.lang.String, java.lang.Long)
     */
    @Override
    @Transactional
    public String getDepartmentNameByDeptCode(final String deptCode, final Long langId) {
        final Department dept = tbDepartmentJpaRepository.searchDeptData(deptCode).get(0);
        if (langId == 2) {
            return dept.getDpNameMar();

        } else {
            return dept.getDpDeptdesc();

        }
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service.
     * TbDepartmentService#findDepartmentShortCodeByDeptId(long, long)
     */
    @Override
    @Transactional
    public String findDepartmentShortCodeByDeptId(final long deptId, final long orgId) {

        final String deptShortCOde = tbDepartmentJpaRepository.findDepartmentShortCode(deptId, orgId);

        return deptShortCOde;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service.
     * TbDepartmentService#findDepartmentDescByDeptId(long)
     */
    @Override
    @Transactional
    public String findDepartmentDescByDeptId(final long deptId) {

        final String deptDesc = tbDepartmentJpaRepository.fetchDepartmentDescById(deptId);

        return deptDesc;
    }
    
    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service. TbDepartmentService#findDepartmentPrefixName(long,
     * long)
     */
    @Override
    @Transactional
    public String findDepartmentPrefixName(final long deptId, final long orgId) {
        return tbDepartmentJpaRepository.findDepartmentPrefixName(deptId, orgId);
    }
    
    

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service. TbDepartmentService#findDepartmentWithPrefix(long)
     */
    @Override
    @Transactional
    public List<TbDepartment> findDepartmentWithPrefix(final long orgId) {
        final List<TbDepartment> beans = new ArrayList<>();
        final Iterable<Department> entities = tbDepartmentJpaRepository.findDepartmentWithPrefix(orgId);
        for (final Department tbDepartmentEntity : entities) {
            beans.add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
        }

        return beans;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service.
     * TbDepartmentService#isDpPrefixTypeHerarchy(java.lang.String)
     */
    @Override
    public String isDpPrefixTypeHerarchy(final String deptCode, final String dpPrefix) {
        String cpmType = tbDepartmentJpaRepository.isDpPrefixTypeHerarchy(deptCode, dpPrefix);
        if (cpmType == null) {
            cpmType = MainetConstants.BLANK;
        }
        return cpmType;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service.
     * TbDepartmentService#isDpPrefixTypeHerarchy(java.lang.String, java.lang.String)
     */

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service.
     * TbDepartmentService#findAllDepartmentByOrganization(long, java.lang.String)
     */
    @Override
    @Transactional(readOnly = true)
    public List<Object[]> findAllDepartmentByOrganization(final long orgId, final String isActive) {
        final List<Object[]> deptList = tbDepartmentJpaRepository.findAllDepartmentByOrganization(Long.valueOf(orgId),
                isActive);
        return deptList;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service.
     * TbDepartmentService#finDeptListForLocation(java.lang.Long)
     */
    @Override
    public List<TbDepartment> finDeptListForLocation(final Long locId) {
        final List<TbDepartment> beans = new ArrayList<>();
        final Iterable<Department> entities = tbDepartmentJpaRepository.finDeptListForLocation(locId);
        for (final Department tbDepartmentEntity : entities) {
            beans.add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
        }

        return beans;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.masters.department.business.service. TbDepartmentService#findDepartmentById(java.lang.Long)
     */
    @Override
    public Department findDepartmentById(final Long dpDeptid) {
        final Department tbDepartmentEntity = tbDepartmentJpaRepository.findOne(dpDeptid);
        return tbDepartmentEntity;
    }

    @Override
    @Transactional(readOnly = true)
    public String checkDepartmentActive(final long deptId, final Long orgId) {
        return tbDepartmentJpaRepository.checkDepartmentActive(deptId);

    }

    @Override
    public Department findDepartmentByCode(final String dpDeptCode) {
        return tbDepartmentJpaRepository.findDepartmentByDpCode(dpDeptCode);
    }

    @Override
    public List<TbDepartment> findAllActive(final Long orgId) {
        final List<TbDepartment> tbDepNonMappedBeanLst = new ArrayList<>();
        List<Department> departments = tbDepartmentJpaRepository.findAllByDeptIdOrgIDActive(orgId);
        for (final Department tbDepartmentEntity : departments) {
            tbDepNonMappedBeanLst
                    .add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
        }
        return tbDepNonMappedBeanLst;
    }
    
    @Override
    public List<TbDepartment> findAllDept(final Long orgId) {
        final List<TbDepartment> tbDepNonMappedBeanLst = new ArrayList<>();
        List<Department> departments = tbDepartmentJpaRepository.findAllByDeptIdOrgID(orgId);
        for (final Department tbDepartmentEntity : departments) {
            tbDepNonMappedBeanLst
                    .add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
        }
        return tbDepNonMappedBeanLst;
    }
    
    @Override
    public List<TbDepartment> getAllDeptBasedOnPrefix() {
        final List<TbDepartment> tbDepNonMappedBeanLst = new ArrayList<>();
        List<Department> departments = tbDepartmentJpaRepository.getAllDeptBasedOnPrefix();
        for (final Department tbDepartmentEntity : departments) {
            tbDepNonMappedBeanLst
                    .add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
        }
        return tbDepNonMappedBeanLst;
    }

    @Override
    public TbDepartment findDeptByCode(final Long orgId, final String status, final String code) {
        final Department department = tbDepartmentJpaRepository.findDeptByCode(orgId, status, code);
        final TbDepartment tbDepartment = new TbDepartment();
        if (department != null) {
            BeanUtils.copyProperties(department, tbDepartment);
            return tbDepartment;
        } else
            return null;
    }

    @Override
    @Transactional
    public List<TbDepartment> findNonMappedDept(final List<Long> dpDeptIds, final Long orgId) {
        final List<TbDepartment> tbDepNonMappedBeanLst = new ArrayList<>();
        final List<Department> deptNonMappedLst = tbDepartmentJpaRepository.findAllNonMappedDepts(orgId);
        for (final Department tbDepartmentEntity : deptNonMappedLst) {
            tbDepNonMappedBeanLst
                    .add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
        }
        return tbDepNonMappedBeanLst;
    }

    @Override
    @Transactional
    public List<TbDepartment> findMappedDepartments(final Long orgId) {
        final List<Department> entities = tbDepartmentJpaRepository.findMappedDepartments(orgId);
        final List<TbDepartment> beans = new ArrayList<>();
        for (final Department tbDepartmentEntity : entities) {
            beans.add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
        }
        return beans;
    }

    @Override
    @Transactional
    public List<TbDepartment> findActualDept(final Long orgId) {
        final List<Department> entities = tbDepartmentJpaRepository.findActualDept(orgId);
        final List<TbDepartment> beans = new ArrayList<>();
        for (final Department tbDepartmentEntity : entities) {
            beans.add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
        }
        return beans;
    }

    @Override
    public Long getDepartmentIdByDeptCode(final String deptCode) {

        return tbDepartmentJpaRepository.getDepartmentIdByDeptCode(deptCode);
    }

    @Override
    @Transactional
    public Department createDefaultDepartment(Long empId,
            final TbDepartmentDTO tbDepartmentDto, Long orgId, int languageId) {
        final TbDepartment tbDepartment = new TbDepartment();
        final Department deptEntity = new Department();
        tbDepartment.setDpDeptcode(tbDepartmentDto.getDpDeptcode());
        tbDepartment.setDpDeptdesc(tbDepartmentDto.getDpDeptDesc());
        tbDepartment.setUserId(empId);
        tbDepartment.setLangId(Long.valueOf(languageId));
        tbDepartment.setDpNameMar(tbDepartmentDto.getDpNameMar());
        tbDepartment.setLmoddate(new Date());
        tbDepartment.setStatus(MainetConstants.STATUS.ACTIVE);
        tbDepartment.setDpCheck(MainetConstants.Common_Constant.YES);
        tbDepartment.setLgIpMac(Utility.getMacAddress());
        final TbDepartment departmentSaved = create(tbDepartment, orgId);
        tbDepartmentServiceMapper.mapTbDepartmentToTbDepartmentEntity(departmentSaved, deptEntity);
        return deptEntity;
    }

    @Override
    @Transactional
    public List<TbDepartment> findAllMappedDepartments(final Long orgId) {
        final List<Department> entities = tbDepartmentJpaRepository.findAllMappedDepartments(orgId);
        final List<TbDepartment> beans = new ArrayList<>();
        if (entities != null && !entities.isEmpty()) {
            for (final Department tbDepartmentEntity : entities) {
                beans.add(tbDepartmentServiceMapper.mapTbDepartmentEntityToTbDepartment(tbDepartmentEntity));
            }
        }
        return beans;
    }
}
