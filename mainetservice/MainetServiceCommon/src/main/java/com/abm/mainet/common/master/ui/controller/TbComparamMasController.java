/*
 * Created on 24 Jun 2015 ( Time 19:53:21 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.abm.mainet.common.master.ui.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.MainetConstants.FormMode;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.master.dto.TbComparamDet;
import com.abm.mainet.common.master.dto.TbComparamMas;
import com.abm.mainet.common.master.dto.TbComparentDet;
import com.abm.mainet.common.master.dto.TbComparentMas;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.master.service.TbDeporgMapService;
import com.abm.mainet.common.master.service.TbOrganisationService;
import com.abm.mainet.common.master.ui.model.TbComParamMasResponse;
import com.abm.mainet.common.master.ui.model.TbComparamDetResponse;
import com.abm.mainet.common.master.ui.model.TbComparentDetResponse;
import com.abm.mainet.common.master.ui.model.TbComparentMasResponse;
import com.abm.mainet.common.service.TbComparamDetService;
import com.abm.mainet.common.service.TbComparamMasService;
import com.abm.mainet.common.service.TbComparentDetService;
import com.abm.mainet.common.service.TbComparentMasService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.Message;
import com.abm.mainet.common.utility.MessageType;
import com.abm.mainet.common.utility.UserSession;

/**
 * Spring MVC controller for 'TbComparamMas' management.
 */
@Controller
@Scope(value = "session")
@RequestMapping("/ComparamMaster.html")
public class TbComparamMasController extends AbstractController {

    // --- Variables names ( to be used in JSP with Expression Language)
    private static final String MAIN_ENTITY_NAME = "tbComparamMas";
    private static final String CHILD_ENTITY_NAME = "tbComparamDet";
    private static final String CHILD_COMPARENTMAS_ENTITY_NAME = "tbComparentMas";
    private static final String MAIN_LIST_NAME = "list";

    // --- JSP pages names ( View name in the MVC model )
    private static final String JSP_FORM = "tbComparamMas/form";
    private static final String JSP_LIST = "tbComparamMas/list";
    private static final String JSP_PRINT = "tbComparamMas/print";
    
    private static final String JSP_CHILD_FORM = "tbComparamDet/form";
    private static final String JSP_CHILD_COMPARENTMAS_FORM = "tbcomparentmas/form";
    private static final String JSP_CHILD_COMPARENTDET_FORM = "tbcomparentdet/comparentdetailform";

    // --- SAVE ACTION ( in the HTML form )
    private static final String SAVE_ACTION_CREATE = "ComparamMaster.html?create";
    private static final String SAVE_ACTION_UPDATE = "ComparamMaster.html?update";

    private static final String ISCHECKEDNO = "N";
    private static final String ISCHECKEDYES = "Y";
    private static final String STATUSACTIVE = "A";
    private static final String STATUSINACTIVE = "I";
    private static final String NON_HIERARCHICAL_CODE_N = "N";
    private static final String HIERARCHICAL_CODE_H = "H";
    private static final String NON_HIERARCHICAL_VALUE_N = "Non-Hierarchical";
    private static final String HIERARCHICAL_VALUE_H = "Hierarchical";
    private static final String PREFIX_TYPE = "prefixType";
    private static final String DEPARTMENTLIST = "departmentList";

    // --- Main entity service
    @Resource
    private TbComparamMasService tbComparamMasService; // Injected by Spring
    // --- Other service(s)
    @Resource
    private TbDepartmentService tbDepartmentService;

    @Resource
    private TbComparamDetService tbComparamDetService;

    @Resource
    TbComparentMasService tbComparentMasService;

    @Resource
    TbComparentDetService tbComparentDetService;

    @Resource
    TbOrganisationService tbOrganisationService;

    @Resource
    TbDeporgMapService tbDeporgMapService;

    List<TbComparamDet> tbComparamDetList = new ArrayList<>();
    List<TbComparentMas> tbComparentMasList = new ArrayList<>();
    List<TbComparentDet> tbComparentDetList = new ArrayList<>();
    List<TbComparentDet> comparentDetList = new ArrayList<>();
    List<TbComparamMas> listData = new ArrayList<>();
    String replicateFlag = MainetConstants.Common_Constant.NO;

    int rowNumber;
    String formModes = MainetConstants.BLANK;
    int level;
    long comparentId;
    long tempSelectedId;
    Long comLevel;

    // --------------------------------------------------------------------------------------
    /**
     * Default constructor
     */
    public TbComparamMasController() {
        super(TbComparamMasController.class, MAIN_ENTITY_NAME);
        log("TbComparamMasController created.");
    }

    // --------------------------------------------------------------------------------------
    // Spring MVC model management
    // --------------------------------------------------------------------------------------

    /**
     * Populates the Spring MVC model with the given entity and eventually other useful data
     * @param model
     * @param tbComparamMas
     */
    private void populateModel(final Model model, final TbComparamMas tbComparamMas, final FormMode formMode) {
        // --- Main entity
        model.addAttribute(MAIN_ENTITY_NAME, tbComparamMas);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparamMas);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            // --- Other data useful in this screen in "create" mode (all fields)
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
            // --- Other data useful in this screen in "update" mode (only non-pk fields)
        } else if (formMode == FormMode.VIEW) {
            model.addAttribute(MODE, MODE_VIEW); // The form is in "update" mode
            // --- Other data useful in this screen in "update" mode (only non-pk fields)
        }
    }

    private void populateChildModel(final Model model, final TbComparamDet tbComparamDet, final FormMode formMode) {
        // --- Main entity
        model.addAttribute(CHILD_ENTITY_NAME, tbComparamDet);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparamDet);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            // --- Other data useful in this screen in "create" mode (all fields)
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
            // --- Other data useful in this screen in "update" mode (only non-pk fields)
        }
    }

    private void populateComParentDetModel(final Model model, final TbComparentDet tbComparentDet, final FormMode formMode) {
        // --- Main entity
        model.addAttribute(MAIN_ENTITY_NAME, tbComparentDet);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparentDet);
        if (formMode == FormMode.CREATE) {
            model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            // --- Other data useful in this screen in "create" mode (all fields)
        } else if (formMode == FormMode.UPDATE) {
            model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
        }
    }

    /**
     * Shows a list with all the occurrences of TbComparamMas found in the database
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping()
    public String list(final HttpServletRequest request, final Model model) {

        listData = new ArrayList<>();
        final Organisation org = UserSession.getCurrent().getOrganisation();

        final List<TbDepartment> deptList = tbDepartmentService.findMappedDepartments(org.getOrgid());
        listData = tbComparamMasService.findAll();
        for (final TbComparamMas comparamMas : listData) {
            if (!StringUtils.isEmpty(comparamMas.getCpmType()) && HIERARCHICAL_CODE_H.equals(comparamMas.getCpmType())) {
                comparamMas.setCpmTypeValue(HIERARCHICAL_VALUE_H);
            } else if (StringUtils.isEmpty(comparamMas.getCpmType())
                    || NON_HIERARCHICAL_CODE_N.equals(comparamMas.getCpmType())) {
                comparamMas.setCpmTypeValue(NON_HIERARCHICAL_VALUE_N);
            }
        }
        if (org.getDefaultStatus() != null && org.getDefaultStatus() != MainetConstants.BLANK
                && !org.getDefaultStatus().isEmpty()) {
            model.addAttribute("isDefault", MainetConstants.Common_Constant.YES);
        } else {
            model.addAttribute("isDefault", MainetConstants.Common_Constant.NO);
        }

        model.addAttribute(DEPARTMENTLIST, deptList);
        helpDoc("ComparamMaster.html", model);
        return JSP_LIST;
    }

    @RequestMapping(params = "getGridData")
    public @ResponseBody TbComParamMasResponse gridData(final HttpServletRequest request, final Model model) {

        final TbComParamMasResponse response = new TbComParamMasResponse();
        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));

        if (listData != null) {
            Collections.sort(listData, (o1, o2) -> o1.getCpmPrefix().compareTo(o2.getCpmPrefix()));
            final int dataSize = listData.size();
            response.setRows(listData);
            response.setTotal(dataSize);
            response.setRecords(dataSize);
        }
        response.setPage(page);
        model.addAttribute(MAIN_LIST_NAME, listData);
        return response;
    }

    /**
     * Shows a form page in order to create a new TbComparamMas
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping(params = "form")
    public String formForCreate(final Model model,
            @RequestParam("deptCode") final String deptCode) {
        final Organisation org = UserSession.getCurrent().getOrganisation();
        tbComparamDetList = new ArrayList<>();
        tbComparentMasList = new ArrayList<>();
        tbComparentDetList = new ArrayList<>();

        final TbComparamMas tbComparamMas = new TbComparamMas();

        final List<TbDepartment> deptList = tbDepartmentService.findMappedDepartments(org.getOrgid());

        final Map<String, String> prefixType = new HashMap<>();

        if ((org.getDefaultStatus() != null) && (org.getDefaultStatus() != MainetConstants.BLANK)) {
            model.addAttribute("isDefault", MainetConstants.Common_Constant.YES);
        } else {
            model.addAttribute("isDefault", MainetConstants.Common_Constant.NO);
        }

        prefixType.put(NON_HIERARCHICAL_CODE_N, NON_HIERARCHICAL_VALUE_N);
        prefixType.put(HIERARCHICAL_CODE_H, HIERARCHICAL_VALUE_H);

        model.addAttribute(PREFIX_TYPE, prefixType);
        model.addAttribute(DEPARTMENTLIST, deptList);

        tbComparamMas.setCpmModuleName(deptCode);
        tbComparamMas.setCpmStatus(MainetConstants.STATUS.ACTIVE);
        tbComparamMas.setCpmConfig(MainetConstants.Common_Constant.YES);
        populateModel(model, tbComparamMas, FormMode.CREATE);
        return JSP_FORM;
    }

    /**
     * Shows a form page in order to update an existing TbComparamMas
     * @param model Spring MVC model
     * @param cpmId primary key element
     * @return
     */
    @RequestMapping(params = "formForUpdate")
    public String formForUpdate(final Model model, @RequestParam("cpmId") final Long cpmId,
            @RequestParam("mode") final String mode, final HttpServletRequest request) {
        final Organisation sessionOrg = UserSession.getCurrent().getOrganisation();
        final Organisation defaultOrg = tbOrganisationService.findDefaultOrganisation();

        if (sessionOrg.getOrgid() != defaultOrg.getOrgid()) {
            model.addAttribute("isDefault", MainetConstants.Common_Constant.NO);
        } else {
            model.addAttribute("isDefault", MainetConstants.Common_Constant.YES);
        }

        tbComparentDetList = new ArrayList<>();
        final TbComparamMas tbComparamMas = tbComparamMasService.findById(Long.valueOf(cpmId));
        replicateFlag = tbComparamMas.getCpmReplicateFlag();
        tbComparentMasList = null;
        tbComparamDetList = null;

        if (replicateFlag.equals(MainetConstants.Common_Constant.YES)) {
            if (MainetConstants.FlagH.equals(tbComparamMas.getCpmType())) {
                tbComparentMasList = tbComparentMasService.findComparentMasDataById(tbComparamMas.getCpmId(),
                        sessionOrg.getOrgid());
                if ((tbComparentMasList != null) && !tbComparentMasList.isEmpty()) {
                    Collections.sort(tbComparentMasList);
                    tbComparamMas.setComparentMas(tbComparentMasList);
                }

            } else {
                tbComparamDetList = tbComparamDetService.findComparamDetDataByCpmId(tbComparamMas.getCpmId(),
                        sessionOrg.getOrgid());
            }
        } else {
            if (MainetConstants.FlagH.equals(tbComparamMas.getCpmType())) {
                tbComparentMasList = tbComparentMasService.findComparentMasDataById(tbComparamMas.getCpmId(),
                        defaultOrg.getOrgid());
                if ((tbComparentMasList != null) && !tbComparentMasList.isEmpty()) {
                    Collections.sort(tbComparentMasList);
                    tbComparamMas.setComparentMas(tbComparentMasList);
                }
            } else {
                tbComparamDetList = tbComparamDetService.findComparamDetDataByCpmId(tbComparamMas.getCpmId(),
                        defaultOrg.getOrgid());
            }
        }

        final List<TbDepartment> deptList = tbDepartmentService.findMappedDepartments(sessionOrg.getOrgid());
        final Map<String, String> prefixType = new HashMap<>();

        prefixType.put(NON_HIERARCHICAL_CODE_N, NON_HIERARCHICAL_VALUE_N);
        prefixType.put(HIERARCHICAL_CODE_H, HIERARCHICAL_VALUE_H);

        model.addAttribute(PREFIX_TYPE, prefixType);
        model.addAttribute(DEPARTMENTLIST, deptList);
        if (mode.equals("update")) {
            populateModel(model, tbComparamMas, FormMode.UPDATE);
        } else {
            populateModel(model, tbComparamMas, FormMode.VIEW);
        }
        return JSP_FORM;
    }

    /**
     * 'CREATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbComparamMas entity to be created
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "create", method = RequestMethod.POST) // GET or POST
    public ModelAndView create(@Valid final TbComparamMas tbComparamMas, final BindingResult bindingResult, final Model model,
            final HttpServletRequest httpServletRequest) {
        try {

            tbComparamMas.setUserId(UserSession.getCurrent().getEmployee().getEmpId());
            tbComparamMas.setLangId(Long.valueOf(UserSession.getCurrent().getLanguageId()));
            tbComparamMas.setLmoddate(new Date());
            tbComparamMas.setLgIpMac(UserSession.getCurrent().getEmployee().getEmppiservername());

            if (tbComparamMas.getCpmEdit() == null) {
                tbComparamMas.setCpmEdit(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmEditDesc() == null) {
                tbComparamMas.setCpmEditDesc(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmConfig() == null) {
                tbComparamMas.setCpmConfig(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmStatus() == null) {
                tbComparamMas.setCpmStatus(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmEditValue() == null) {
                tbComparamMas.setCpmEditValue(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmReplicateFlag() == null) {
                tbComparamMas.setCpmReplicateFlag(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmEditOth() == null) {
                tbComparamMas.setCpmEditOth(ISCHECKEDNO);
            }
            if (tbComparamMas.getLoadAtStartup() == null) {
                tbComparamMas.setLoadAtStartup(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmEditDefault() == null) {
                tbComparamMas.setCpmEditDefault(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmEditStatus() == null) {
                tbComparamMas.setCpmEditStatus(ISCHECKEDNO);
            }

            if (!bindingResult.hasErrors()) {
                if (!StringUtils.isEmpty(tbComparamMas.getCpmPrefix())) {
                    final String prefixName = tbComparamMas.getCpmPrefix().toUpperCase();
                    tbComparamMas.setCpmPrefix(prefixName);
                }
                tbComparamMas.setComparamDetList(tbComparamDetList);
                tbComparamMas.setComparentMas(tbComparentMasList);
                final TbComparamMas tbComparamMasCreated = tbComparamMasService.create(tbComparamMas);
                updatePrefixCache(tbComparamMas.getCpmType());
                model.addAttribute(MAIN_ENTITY_NAME, tbComparamMasCreated);
                return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                        MainetConstants.COMMON_STATUS.SUCCESS);
            } else {
                populateModel(model, tbComparamMas, FormMode.CREATE);
                return new ModelAndView(JSP_FORM);
            }
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbComparamMas.error.create", e);
            populateModel(model, tbComparamMas, FormMode.CREATE);
            return new ModelAndView(JSP_FORM);
        }
    }

    /**
     * 'UPDATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbComparamMas entity to be updated
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = "update", method = RequestMethod.POST) // GET or POST
    public ModelAndView update(@Valid final TbComparamMas tbComparamMas, final BindingResult bindingResult, final Model model,
            final HttpServletRequest httpServletRequest) {
        try {

            if (tbComparamMas.getCpmEdit() == null) {
                tbComparamMas.setCpmEdit(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmEditDesc() == null) {
                tbComparamMas.setCpmEditDesc(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmConfig() == null) {
                tbComparamMas.setCpmConfig(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmStatus() == null) {
                tbComparamMas.setCpmStatus(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmEditValue() == null) {
                tbComparamMas.setCpmEditValue(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmReplicateFlag() == null) {
                tbComparamMas.setCpmReplicateFlag(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmEditOth() == null) {
                tbComparamMas.setCpmEditOth(ISCHECKEDNO);
            }
            if (tbComparamMas.getLoadAtStartup() == null) {
                tbComparamMas.setLoadAtStartup(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmEditDefault() == null) {
                tbComparamMas.setCpmEditDefault(ISCHECKEDNO);
            }
            if (tbComparamMas.getCpmEditStatus() == null) {
                tbComparamMas.setCpmEditStatus(ISCHECKEDNO);
            }

            if (!bindingResult.hasErrors()) {
                tbComparamMas.setComparamDetList(tbComparamDetList);
                tbComparamMas.setComparentMas(tbComparentMasList);
                tbComparamMas.setLgIpMacUpd(UserSession.getCurrent().getEmployee().getEmppiservername());

                // --- Perform database operations
                final TbComparamMas tbComparamMasSaved = tbComparamMasService.update(tbComparamMas);
                updatePrefixCache(tbComparamMas.getCpmType());

                model.addAttribute(MAIN_ENTITY_NAME, tbComparamMasSaved);
                return new ModelAndView(new MappingJackson2JsonView(), MainetConstants.FORM_NAME,
                        MainetConstants.COMMON_STATUS.SUCCESS);
            } else {
                log("Action 'update' : binding errors");
                populateModel(model, tbComparamMas, FormMode.UPDATE);
                return new ModelAndView(JSP_FORM);
            }
        } catch (final Exception e) {
            messageHelper.addException(model, "tbComparamMas.error.update", e);
            log("Action 'update' : Exception - " + e.getMessage());
            populateModel(model, tbComparamMas, FormMode.UPDATE);
            return new ModelAndView(JSP_FORM);
        }
    }

    /**
     * 'DELETE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param redirectAttributes
     * @param cpmId primary key element
     * @return
     */
    @RequestMapping(params = "delete") // GET or POST
    public @ResponseBody int delete(final HttpServletRequest request, @RequestParam("cpmId") final Long cpmId) {
        int success = 0;
        final TbComparamMas tbComparamMas = tbComparamMasService.findById(cpmId);
        tbComparamMas.setCpmStatus(MainetConstants.Common_Constant.INACTIVE_FLAG);
        tbComparamMasService.update(tbComparamMas);
        updatePrefixCache(tbComparamMas.getCpmType());
        success = 1;
        return success;
    }

    @RequestMapping(params = "addChildForm")
    public String addChildForm(final Model model, @RequestParam("prefixType") final String prefixType) {
        formModes = MainetConstants.CommonConstants.ADD;
        if (HIERARCHICAL_CODE_H.equals(prefixType)) {
            final TbComparentMas tbComparentMas = new TbComparentMas();

            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparentMas);
            model.addAttribute(MainetConstants.ComparamMasterConstants.CHILDFORMMODE, MainetConstants.CommonConstants.ADD);
            model.addAttribute(MAIN_ENTITY_NAME, tbComparentMas);

            return JSP_CHILD_COMPARENTMAS_FORM;

        } else {

            final TbComparamDet tbComparamDet = new TbComparamDet();
            model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
            model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparamDet);
            model.addAttribute(MainetConstants.ComparamMasterConstants.CHILDFORMMODE, MainetConstants.CommonConstants.ADD);
            model.addAttribute(MAIN_ENTITY_NAME, tbComparamDet);

            return JSP_CHILD_FORM;
        }
    }

    @RequestMapping(params = "editChildForm", method = RequestMethod.GET)
    public String editChildForm(final Model model, @RequestParam("cpdId") final Long cpdId,
            @RequestParam("rowNo") final Long rowNo) {
        rowNumber = rowNo.intValue();
        TbComparamDet tbComparamDet = null;

        for (int counter = 0; counter < tbComparamDetList.size(); counter++) {
            if (rowNumber == counter) {
                tbComparamDet = tbComparamDetList.get(counter);
                break;
            }
        }

        formModes = MainetConstants.CommonConstants.EDIT;

        model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparamDet);
        model.addAttribute(MainetConstants.ComparamMasterConstants.CHILDFORMMODE, MainetConstants.CommonConstants.EDIT);
        model.addAttribute("defaultChecked", tbComparamDet.getCpdDefault());
        model.addAttribute(MAIN_ENTITY_NAME, tbComparamDet);
        return JSP_CHILD_FORM;
    }

    @RequestMapping(params = "createChildData", method = RequestMethod.POST) // GET or POST
    public @ResponseBody String createChildData(@Valid final TbComparamDet tbComparamDet, final BindingResult bindingResult,
            final Model model,
            final HttpServletRequest httpServletRequest) {
        try {
            tbComparamDet.setLgIpMac(UserSession.getCurrent().getEmployee().getEmppiservername());
            tbComparamDet.setCpdValue(tbComparamDet.getCpdValue().toUpperCase());
            if (!bindingResult.hasErrors()) {

                int tempCounter = 0;
                TbComparamDet tbComparamData = null;

                if ((tbComparamDetList.size() > 0) && !formModes.equals(MainetConstants.CommonConstants.EDIT)) {
                    for (final TbComparamDet comparamTemp : tbComparamDetList) {
                        if (tbComparamDet.getCpdDesc().equalsIgnoreCase(comparamTemp.getCpdDesc())) {
                            return "-1";
                        }
                        if (comparamTemp.getCpdDefault() != null) {
                            if (ISCHECKEDYES.equals(tbComparamDet.getCpdDefault())
                                    && comparamTemp.getCpdDefault().equals(tbComparamDet.getCpdDefault())) {
                                return MainetConstants.CommonConstants.ZERO;
                            }
                        }

                        if (tbComparamDet.getCpdValue().equalsIgnoreCase(comparamTemp.getCpdValue())) {
                            return "-2";
                        }

                    }
                }

                if ((tbComparamDetList.size() > 0) && formModes.equals(MainetConstants.CommonConstants.EDIT)) {
                    for (final TbComparamDet comparamTemp : tbComparamDetList) {
                        if (comparamTemp.getCpdDefault() != null) {
                            if (ISCHECKEDYES.equals(tbComparamDet.getCpdDefault())
                                    && comparamTemp.getCpdDefault().equals(tbComparamDet.getCpdDefault())) {
                                if (tbComparamDet.getCpdId() != null) {
                                    if (!tbComparamDet.getCpdId().equals(comparamTemp.getCpdId())) {
                                        return MainetConstants.CommonConstants.ZERO;
                                    }
                                } else {
                                    return MainetConstants.CommonConstants.ZERO;
                                }
                            }
                        }

                        if (comparamTemp.getCpdValue() != null && tbComparamDet.getCpdValue() != null) {
                            if (tbComparamDet.getCpdValue().equals(comparamTemp.getCpdValue())) {
                                if (tbComparamDet.getCpdId() != null) {
                                    if (!tbComparamDet.getCpdId().equals(comparamTemp.getCpdId())) {
                                        return "-2";
                                    }
                                } else {
                                    return "-2";
                                }

                            }

                        }
                    }

                    for (int counter = 0; counter < tbComparamDetList.size(); counter++) {

                        if (rowNumber != counter) {
                            tempCounter++;
                        } else {
                            tbComparamData = tbComparamDetList.get(counter);
                            tempCounter = 0;
                            break;
                        }
                    }

                    if (tempCounter == 0) {

                        tbComparamData.setCpdDesc(tbComparamDet.getCpdDesc());
                        tbComparamData.setCpdDescMar(tbComparamDet.getCpdDescMar());
                        tbComparamData.setCpdValue(tbComparamDet.getCpdValue());
                        tbComparamData.setCpdOthers(tbComparamDet.getCpdOthers());
                        tbComparamData.setCpdDefault(tbComparamDet.getCpdDefault());

                    } else {
                        tbComparamDetList.add(tbComparamDet);
                    }
                } else {
                    tbComparamDetList.add(tbComparamDet);
                }
                model.addAttribute(CHILD_ENTITY_NAME, tbComparamDet);
                return CHILD_ENTITY_NAME;
            } else {
                populateChildModel(model, tbComparamDet, FormMode.CREATE);
                return JSP_FORM;
            }
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbCustbanksMas.error.create", e);
            populateChildModel(model, tbComparamDet, FormMode.CREATE);
            return JSP_FORM;
        }
    }

    @RequestMapping(params = "createComparentMasData") // GET or POST
    public @ResponseBody String createComparentMasData(@Valid final TbComparentMas tbComparentMas,
            final BindingResult bindingResult,
            final Model model, final HttpServletRequest httpServletRequest) {
        try {
            if (!bindingResult.hasErrors()) {
                int tempCounter = 0;
                TbComparentMas tbComparentData = null;
                int rowCounter = 0;
                if (tbComparentMasList.size() > 0) {
                    for (final TbComparentMas comparentMas : tbComparentMasList) {
                        if (formModes.equals(MainetConstants.CommonConstants.EDIT) && (rowCounter != rowNumber)) {
                            if (tbComparentMas.getComValue().equalsIgnoreCase(comparentMas.getComValue())) {
                                return MainetConstants.CommonConstants.ZERO;
                            }
                            if (tbComparentMas.getComDesc().equalsIgnoreCase(comparentMas.getComDesc())) {
                                return "-1";
                            }
                        } else if (!formModes.equals(MainetConstants.CommonConstants.EDIT)) {
                            if (tbComparentMas.getComValue().equalsIgnoreCase(comparentMas.getComValue())) {
                                return MainetConstants.CommonConstants.ZERO;
                            }
                            if (tbComparentMas.getComDesc().equalsIgnoreCase(comparentMas.getComDesc())) {
                                return "-1";
                            }
                        }
                        rowCounter++;
                    }
                }

                if ((tbComparentMasList.size() > 0) && formModes.equals(MainetConstants.CommonConstants.EDIT)) {
                    for (int counter = 0; counter < tbComparentMasList.size(); counter++) {
                        if (rowNumber != counter) {
                            tempCounter++;
                        } else {
                            tbComparentData = tbComparentMasList.get(counter);
                            tempCounter = 0;
                            break;
                        }
                    }

                    if (tempCounter == 0) {

                        tbComparentData.setComDesc(tbComparentMas.getComDesc());
                        tbComparentData.setComDescMar(tbComparentMas.getComDescMar());
                        tbComparentData.setComValue(tbComparentMas.getComValue());
                        tbComparentData.setComLevel(comLevel);

                    } else {

                        tbComparentMas.setComLevel(new Long(tbComparentMasList.size() + 1));
                        tbComparentMasList.add(tbComparentMas);
                    }

                } else {

                    tbComparentMas.setComLevel(new Long(tbComparentMasList.size() + 1));
                    tbComparentMasList.add(tbComparentMas);
                }
                model.addAttribute(CHILD_COMPARENTMAS_ENTITY_NAME, tbComparentMas);

                // ---
                messageHelper.addMessage(model, new Message(MessageType.SUCCESS, MainetConstants.COMMON_STATUS.SAVE_OK));
                return CHILD_COMPARENTMAS_ENTITY_NAME;
            } else {
                return JSP_FORM;
            }
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbCustbanksMas.error.create", e);
            return JSP_FORM;
        }
    }

    @RequestMapping(params = "getChildGridData")
    public @ResponseBody TbComparamDetResponse getChildGridData(final HttpServletRequest request, final Model model) {
        final TbComparamDetResponse response = new TbComparamDetResponse();

        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
        if (tbComparamDetList != null) {
            response.setRows(tbComparamDetList);
            response.setTotal(tbComparamDetList.size());
            response.setRecords(tbComparamDetList.size());
        }

        response.setPage(page);
        model.addAttribute(MAIN_LIST_NAME, tbComparamDetList);
        return response;
    }

    @RequestMapping(params = "getComparentMasChildGridData")
    public @ResponseBody TbComparentMasResponse getComparentMasChildGridData(final HttpServletRequest request,
            final Model model) {
        final TbComparentMasResponse response = new TbComparentMasResponse();

        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));

        if (tbComparentMasList != null) {
            response.setRows(tbComparentMasList);
            response.setTotal(tbComparentMasList.size());
            response.setRecords(tbComparentMasList.size());
        }
        response.setPage(page);
        model.addAttribute(MAIN_LIST_NAME, tbComparamDetList);
        return response;
    }

    @RequestMapping(params = "updateStatus")
    public @ResponseBody void updateStatus(final Model model, @RequestParam("cpdId") final Long cpdId,
            @RequestParam("isChecked") final String isChecked) {
        final TbComparamDet tbComparamDet = new TbComparamDet();

        for (final TbComparamDet comparamDet : tbComparamDetList) {
            if (comparamDet.getCpdId().equals(cpdId) && ISCHECKEDNO.equals(isChecked)) {
                comparamDet.setCpdStatus(STATUSINACTIVE);
            } else if (comparamDet.getCpdId().equals(cpdId) && ISCHECKEDYES.equals(isChecked)) {
                comparamDet.setCpdStatus(STATUSACTIVE);
            }
        }

        model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparamDet);
        model.addAttribute(MAIN_ENTITY_NAME, tbComparamDet);

    }

    @RequestMapping(params = "getComparentDetData")
    public String getComparentDetData(final Model model, @RequestParam("comParentMasId") final Long comParentMasId,
            @RequestParam("level") final Long level,
            @RequestParam("tempMode") final String tempMode,
            @RequestParam("mainFormMode") final String mainFormMode,
            @RequestParam("flag") final String flag) {
        String returnedPage = MainetConstants.BLANK;
        formModes = MainetConstants.CommonConstants.ADD;
        final Organisation sessionOrg = UserSession.getCurrent().getOrganisation();
        final Organisation defaultOrg = tbOrganisationService.findDefaultOrganisation();
        Long orgId = 0L;

        if (FormMode.UPDATE.toString().equalsIgnoreCase(tempMode)) {
            returnedPage = "tbComparamMas/selectbox";
        } else {
            returnedPage = "tbcomparentdet/comparentdetailform";
        }

        if (FormMode.UPDATE.toString().equalsIgnoreCase(mainFormMode)
                || FormMode.VIEW.toString().equalsIgnoreCase(mainFormMode)) {
            if (replicateFlag.equals(MainetConstants.Common_Constant.NO)) {
                orgId = defaultOrg.getOrgid();
            } else {
                orgId = sessionOrg.getOrgid();
            }
        } else {
            orgId = sessionOrg.getOrgid();
        }

        final TbComparentDet comparentDet = new TbComparentDet();

        List<TbComparentDet> comparentDetVal = null;
        final List<Map<String, String>> parentDataList = new ArrayList<>();
        Map<String, String> parentData = null;
        int tempCounter = 0;
        if (level != null) {
            this.level = level.intValue();
        }
        final List<String> prefixName = new ArrayList<>();

        if (level.intValue() > 1) {

            for (final TbComparentMas comparentMasData : tbComparentMasList) {
                for (int iCounter = 1; iCounter < level.intValue(); iCounter++) {
                    if (comparentMasData.getComLevel().intValue() == iCounter) {
                        parentData = new HashMap<>();
                        if (FormMode.UPDATE.toString().equalsIgnoreCase(mainFormMode)
                                || FormMode.VIEW.toString().equalsIgnoreCase(mainFormMode)) {
                            comparentDetVal = tbComparentDetService.findComparentDetDataById(comparentMasData.getComId(), orgId);
                            for (final TbComparentDet tbComparentDet : comparentMasData.getComparentDetList()) {
                                if ((level.longValue() - 1) == tbComparentDet.getLevel()) {
                                    comparentDetVal.add(tbComparentDet);
                                }
                            }

                        } else {
                            comparentDetVal = comparentMasData.getComparentDetList();
                            tbComparentDetList = new ArrayList<>();
                        }

                        if (tempCounter == 0) {
                            for (final TbComparentDet comparentDetTemp : comparentDetVal) {
                                if (comparentDetTemp.getCodId() != null) {
                                    parentData.put(comparentDetTemp.getCodId().toString(), comparentDetTemp.getCodDesc());
                                } else {
                                    parentData.put(Long.toString(comparentDetTemp.getTempId()), comparentDetTemp.getCodDesc());
                                }
                                tempCounter++;
                            }
                        }
                        parentDataList.add(parentData);
                        prefixName.add(comparentMasData.getComDesc());
                    }
                }
            }

            model.addAttribute("parentData", parentData);
            model.addAttribute("parentDataList", parentDataList);
            model.addAttribute("prefixName", prefixName);

        } else {

            if (FormMode.UPDATE.toString().equalsIgnoreCase(mainFormMode)
                    || FormMode.VIEW.toString().equalsIgnoreCase(mainFormMode)) {
                List<TbComparentDet> comparentDets = new ArrayList<>();
                for (final TbComparentMas comparentMasEntity : tbComparentMasList) {
                    if (comparentMasEntity.getComLevel().intValue() == 1) {

                        // for super organization
                        if (orgId == defaultOrg.getOrgid()) {
                            comparentDets
                                    .addAll(tbComparentDetService.findComparentDetDataById(comParentMasId, orgId));
                            for (TbComparentDet tbComparentDet : comparentMasEntity.getComparentDetList()) {
                                if (tbComparentDet.getCodId() == null)
                                    comparentDets.add(tbComparentDet);
                            }
                            comparentMasEntity.setComparentDetList(comparentDets);
                        } else {
                            // for child organization edit and view mode
                            if (formModes.equals(MainetConstants.CommonConstants.ADD) && flag.equals(MainetConstants.FlagR)) {
                                comparentMasEntity
                                        .setComparentDetList(
                                                tbComparentDetService.findComparentDetDataById(comParentMasId, orgId));
                            }
                        }

                    }
                }
            }

            for (final TbComparentMas comparentMasEntity : tbComparentMasList) {
                if (comparentMasEntity.getComLevel().intValue() == 1) {
                    if (flag.equals(MainetConstants.FlagR)) {
                        tbComparentDetList = comparentMasEntity.getComparentDetList();

                    } else {
                        if ((tbComparentDetList == null) || tbComparentDetList.isEmpty()) {
                            tbComparentDetList = comparentMasEntity.getComparentDetList();
                        }
                    }

                }
                /*
                 * for (TbComparentDet tbComparentDetTemp : tbComparentDetList) {
                 * tbComparentDetTemp.setCodStatus(comparentMasEntity.getComStatus());
                 * }
                 */
            }
        }
        model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparentDetList);
        model.addAttribute(MAIN_ENTITY_NAME, comparentDet);
        model.addAttribute(MainetConstants.ComparamMasterConstants.CHILDFORMMODE, formModes);
        populateComParentDetModel(model, comparentDet, FormMode.UPDATE);
        model.addAttribute(MainetConstants.CommonConstants.LEVEL, level);

        return returnedPage;
    }

    @RequestMapping(params = "getComparentDetChildGridData")
    public @ResponseBody TbComparentDetResponse getComparentDetChildGridData(final HttpServletRequest request,
            final Model model) {
        final TbComparentDetResponse response = new TbComparentDetResponse();
        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
        if (tbComparentDetList != null) {
            response.setRows(tbComparentDetList);
            response.setTotal(tbComparentDetList.size());
            response.setRecords(tbComparentDetList.size());
        }
        response.setPage(page);
        model.addAttribute(MAIN_LIST_NAME, tbComparentDetList);
        return response;
    }

    //
    @RequestMapping(params = "getComparentNextLevelData")
    public @ResponseBody Map<String, String> getComparentNextLevelData(final HttpServletRequest request, final Model model,
            @RequestParam("selectedId") final Long selectedId) {
        tempSelectedId = selectedId.longValue();
        comparentDetList = new ArrayList<>();

        final Organisation sessionOrg = UserSession.getCurrent().getOrganisation();
        final Organisation defaultOrg = tbOrganisationService.findDefaultOrganisation();
        Long orgId = 0L;

        if (replicateFlag.equals(MainetConstants.Common_Constant.NO)) {
            orgId = defaultOrg.getOrgid();
        } else {
            orgId = sessionOrg.getOrgid();
        }

        final List<TbComparentDet> comparentDetVal = tbComparentDetService.findComparentDetDataByParentId(selectedId, orgId);
        tbComparentDetList = new ArrayList<>();

        if (comparentDetVal.size() == 0) {
            for (final TbComparentMas tbComMas : tbComparentMasList) {
                for (final TbComparentDet tbComparentDet : tbComMas.getComparentDetList()) {
                    if (tempSelectedId == tbComparentDet.getTempParentId()) {
                        tbComparentDetList.add(tbComparentDet);
                    }
                }
            }
        } else {
            tbComparentDetList = comparentDetVal;
            for (final TbComparentMas tbComMas : tbComparentMasList) {
                for (final TbComparentDet tbComparentDet : tbComMas.getComparentDetList()) {
                    if (tbComparentDet.getCodId() == null) {
                        for (final TbComparentDet tbComparentDetTemp : tbComparentDetList) {
                            if (tbComparentDetTemp.getParentId() == null) {
                                tbComparentDetList.add(tbComparentDet);
                                break;
                            }
                        }
                    } else {
                        for (final TbComparentDet tbComparentDetTemp1 : tbComparentDetList) {
                            if (tbComparentDetTemp1.getCodId().longValue() == tbComparentDet.getCodId().longValue()) {
                                if (tbComparentDet.getCodStatus().equals(ISCHECKEDNO))
                                    tbComparentDetTemp1.setCodStatus(ISCHECKEDNO);
                                break;
                            }
                        }
                    }
                }
            }
        }
        if (comparentDetVal.size() != 0) {
            for (final TbComparentMas tbComMas : tbComparentMasList) {
                for (final TbComparentDet tbComparentDet : tbComMas.getComparentDetList()) {
                    if (tempSelectedId == tbComparentDet.getTempParentId()) {
                        tbComparentDetList.add(tbComparentDet);
                    }
                }
            }
        }
        final Map<String, String> comparentData = new HashMap<>();

        for (final TbComparentDet comparentDetData : tbComparentDetList) {
            if (comparentDetData.getCodId() != null) {
                comparentData.put(comparentDetData.getCodId().toString(), comparentDetData.getCodDesc());
            } else {
                comparentData.put(Long.toString(comparentDetData.getTempId()), comparentDetData.getCodDesc());
            }
        }
        model.addAttribute(MainetConstants.CommonConstants.LEVEL, level);

        return comparentData;
    }

    @RequestMapping(params = "createComparentDetailsData", method = RequestMethod.POST) // GET or POST
    public @ResponseBody String createComparentDetailsData(@Valid final TbComparentDet tbComparentDet,
            final BindingResult bindingResult,
            final Model model, final HttpServletRequest httpServletRequest) {
        try {
            tbComparentDet.setLgIpMac(UserSession.getCurrent().getEmployee().getEmppiservername());

            tbComparentDet.setCodDesc(tbComparentDet.getCodDesc().trim());
            tbComparentDet.setCodValue(tbComparentDet.getCodValue().trim());

            tbComparentDet.setCodValue(tbComparentDet.getCodValue().toUpperCase());
            if (tbComparentDet.isChkBox()) {
                tbComparentDet.setCpdDefault(MainetConstants.Y_FLAG);
            } else {
                tbComparentDet.setCpdDefault(MainetConstants.N_FLAG);
            }
            if (!bindingResult.hasErrors()) {
                int tempCounter = 0;
                TbComparentDet tbComparentData = null;

                // validation
                int rowCounter = 0;
                if (tbComparentMasList.size() > 0) {
                    for (final TbComparentMas comparentMas : tbComparentMasList) {
                        for (final TbComparentDet comparentDet : comparentMas.getComparentDetList()) {
                            if ((rowCounter != rowNumber) && formModes.equals(MainetConstants.CommonConstants.EDIT)) {
                                if (tbComparentDet.getCodDesc().equalsIgnoreCase(comparentDet.getCodDesc())) {
                                    return "-1";
                                }
                                if (tbComparentDet.getCodValue().equalsIgnoreCase(comparentDet.getCodValue())) {
                                    return "-2";
                                }

                                if (comparentDet.getCpdDefault() != null) {
                                    if (ISCHECKEDYES.equals(tbComparentDet.getCpdDefault())
                                            && comparentDet.getCpdDefault().equals(tbComparentDet.getCpdDefault())) {
                                        if (tbComparentDet.getComId() != null) {
                                            if (!tbComparentDet.getComId().equals(comparentDet.getComId())) {
                                                return MainetConstants.CommonConstants.ZERO;
                                            }
                                        } else {
                                            return MainetConstants.CommonConstants.ZERO;
                                        }
                                    }
                                }

                            } else if (!formModes.equals(MainetConstants.CommonConstants.EDIT)) {
                                if (tbComparentDet.getCodValue().equalsIgnoreCase(comparentDet.getCodValue())) {
                                    return "-2";
                                }
                                // new added validation
                                if (comparentDet.getCpdDefault() != null) {
                                    if (ISCHECKEDYES.equals(tbComparentDet.getCpdDefault())
                                            && comparentDet.getCpdDefault().equals(tbComparentDet.getCpdDefault())) {
                                        return MainetConstants.CommonConstants.ZERO;
                                    }
                                }
                            }

                            rowCounter++;
                        }
                    }
                }
                if (!formModes.equals(MainetConstants.CommonConstants.EDIT)) {
                    for (final TbComparentDet comparentData : tbComparentDetList) {

                        if (tbComparentDet.getCodDesc().equalsIgnoreCase(comparentData.getCodDesc())) {
                            return "-1";
                        }

                        if (tbComparentDet.getCodValue().equalsIgnoreCase(comparentData.getCodValue())) {
                            return "-2";
                        }
                    }
                }

                if (formModes.equals(MainetConstants.CommonConstants.EDIT)) {
                    for (final TbComparentDet comparentData : tbComparentDetList) {
                        if (tbComparentDet.getCodDesc().equalsIgnoreCase(comparentData.getCodDesc())
                                && !tbComparentDet.getCodId().equals(comparentData.getCodId())) {
                            return "-1";
                        }
                        if (tbComparentDet.getCodValue().equalsIgnoreCase(comparentData.getCodValue())
                                && !tbComparentDet.getCodId().equals(comparentData.getCodId())) {
                            return "-2";
                        }
                    }
                }
                for (final TbComparentMas comparentMasData : tbComparentMasList) {
                    if (tbComparentDet.getLevel() == 1) {
                        if (comparentMasData.getComLevel().longValue() == tbComparentDet.getLevel()) {
                            if ((comparentMasData.getComparentDetList().size() > 0)
                                    && formModes.equals(MainetConstants.CommonConstants.EDIT)) {
                                for (int counter = 0; counter < tbComparentDetList.size(); counter++) {
                                    if (rowNumber != counter) {
                                        tempCounter++;
                                    } else {
                                        tbComparentData = tbComparentDetList.get(counter);
                                        tempCounter = 0;
                                        break;
                                    }
                                }

                                if (tempCounter == 0) {

                                    tbComparentData.setCodDesc(tbComparentDet.getCodDesc());
                                    tbComparentData.setCodDescMar(tbComparentDet.getCodDescMar());
                                    tbComparentData.setCodValue(tbComparentDet.getCodValue());
                                    tbComparentData.setCodOthers(tbComparentDet.getCodOthers());
                                    tbComparentData.setCpdDefault(tbComparentDet.getCpdDefault());

                                } else {

                                    if (tbComparentDet.getLevel() == comparentMasData.getComLevel().longValue()) {
                                        final TbComparentMas comParentMas = tbComparentMasList
                                                .get(Integer.parseInt(Long.toString(tbComparentDet.getLevel())) - 2);

                                        for (final TbComparentDet comparentDetTemp : comParentMas.getComparentDetList()) {
                                            if (comparentDetTemp.getTempId() == tempSelectedId) {
                                                comparentId -= 1;
                                                tbComparentDet.setTempId(comparentId);
                                                tbComparentDet.setTempParentId(comparentDetTemp.getTempId());
                                                comparentMasData.getComparentDetList().add(tbComparentDet);
                                                tbComparentDetList.add(tbComparentDet);
                                            }
                                        }
                                    }
                                }

                            } else {
                                level = comparentMasData.getComLevel().intValue();
                                comparentId -= 1;
                                tbComparentDet.setTempId(comparentId);
                                if (formModes.equals(MainetConstants.CommonConstants.EDIT)) {
                                    comparentMasData.getComparentDetList().add(tbComparentDet);
                                    tbComparentDet.setCodStatus(comparentMasData.getComStatus());
                                    tbComparentDetList.add(tbComparentDet);

                                }
                                // adding new det data in Edit mode
                                if (formModes.equals(MainetConstants.CommonConstants.ADD)) {
                                    tbComparentDet.setCodStatus(comparentMasData.getComStatus());
                                    tbComparentDetList.add(tbComparentDet);
                                    comparentMasData.setComparentDetList(tbComparentDetList);
                                }

                            }
                        }
                    } else if ((tbComparentDet.getLevel() == comparentMasData.getComLevel().longValue())
                            && formModes.equals(MainetConstants.CommonConstants.EDIT)) {

                        for (int counter = 0; counter < tbComparentDetList.size(); counter++) {
                            if (rowNumber != counter) {
                                tempCounter++;
                            } else {
                                tbComparentData = tbComparentDetList.get(counter);
                                tempCounter = 0;
                                break;
                            }
                        }

                        if (tempCounter == 0) {

                            tbComparentData.setCodDesc(tbComparentDet.getCodDesc());
                            tbComparentData.setCodDescMar(tbComparentDet.getCodDescMar());
                            tbComparentData.setCodValue(tbComparentDet.getCodValue());
                            tbComparentData.setCodOthers(tbComparentDet.getCodOthers());
                            tbComparentData.setCpdDefault(tbComparentDet.getCpdDefault());
                            // tbComparentData.setParentId(parentId);
                            comparentDetList.add(tbComparentData);

                        }

                        for (final TbComparentMas comparentMas : tbComparentMasList) {
                            if (comparentMas.getComLevel().longValue() == level) {
                                comparentMas.setComparentDetList(comparentDetList);
                                break;
                            }
                        }

                    } else {

                        if (tbComparentDet.getLevel() == comparentMasData.getComLevel().longValue()) {
                            final TbComparentMas comParentMas = tbComparentMasList
                                    .get(Integer.parseInt(Long.toString(tbComparentDet.getLevel())) - 2);

                            if (comParentMas.getComparentDetList().size() == 0) {
                                comParentMas.setComparentDetList(
                                        tbComparentDetService.findComparentDetDataById(comParentMas.getComId(),
                                                new Long(UserSession.getCurrent().getOrganisation().getOrgid())));
                            }

                            for (final TbComparentDet comparentDetTemp : comParentMas.getComparentDetList()) {
                                if (comparentDetTemp.getCodId() != null) {
                                    if (comparentDetTemp.getCodId().longValue() == tempSelectedId) {
                                        comparentId -= 1;
                                        tbComparentDet.setTempId(comparentId);
                                        tbComparentDet.setParentId(comparentDetTemp.getCodId());
                                        tbComparentDet.setTempParentId(comparentDetTemp.getCodId().longValue());
                                        comparentMasData.getComparentDetList().add(tbComparentDet);
                                        tbComparentDetList.add(tbComparentDet);
                                    }

                                } else {

                                    if (comparentDetTemp.getTempId() == tempSelectedId) {

                                        comparentId -= 1;
                                        tbComparentDet.setTempId(comparentId);
                                        tbComparentDet.setTempParentId(comparentDetTemp.getTempId());
                                        comparentMasData.getComparentDetList().add(tbComparentDet);
                                        tbComparentDetList.add(tbComparentDet);
                                    }
                                }
                            }
                        }
                    }
                }

                model.addAttribute(CHILD_COMPARENTMAS_ENTITY_NAME, tbComparentDet);

                messageHelper.addMessage(model, new Message(MessageType.SUCCESS, MainetConstants.COMMON_STATUS.SAVE_OK));
                return CHILD_COMPARENTMAS_ENTITY_NAME;
            } else {
                return JSP_FORM;
            }
        } catch (final Exception e) {
            log("Action 'create' : Exception - " + e.getMessage());
            messageHelper.addException(model, "tbCustbanksMas.error.create", e);
            return JSP_FORM;
        }
    }

    //
    @RequestMapping(params = "updateComparentDetStatus")
    public @ResponseBody void updateComparentDetStatus(final Model model, @RequestParam("codValue") final String codValue,
            @RequestParam("isChecked") final String isChecked) {
        final TbComparamDet tbComparamDet = new TbComparamDet();

        for (final TbComparentDet comparentDet : tbComparentDetList) {
            if (comparentDet.getCodValue().equalsIgnoreCase(codValue) && ISCHECKEDNO.equals(isChecked)) {
                comparentDet.setCodStatus(ISCHECKEDNO);
                // comparentDetList.add(comparentDet);
                break;
            } else if (comparentDet.getCodValue().equalsIgnoreCase(codValue) && ISCHECKEDYES.equals(isChecked)) {
                comparentDet.setCodStatus(ISCHECKEDYES);
                // comparentDetList.add(comparentDet);
                break;
            }
        }

        for (final TbComparentMas comparentMas : tbComparentMasList) {
            if (comparentMas.getComLevel().longValue() == level) {
                // comparentMas.setComparentDetList(comparentDetList);
                comparentMas.setComparentDetList(tbComparentDetList);
                break;
            }
        }

        model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparamDet);
        model.addAttribute(MAIN_ENTITY_NAME, tbComparamDet);

    }

    @RequestMapping(params = "updateComparentMasStatus")
    public @ResponseBody void updateComparentMasStatus(final Model model, HttpServletRequest request,
            @RequestParam("comValue") final String comValue,
            @RequestParam("isChecked") final String isChecked, @RequestParam("comLevel") int comLevelSelected) {
        final TbComparentMas tbComparentMas = new TbComparentMas();
        final Organisation sessionorg = UserSession.getCurrent().getOrganisation();
        List<TbComparentDet> tbcomparentDetList = null;

        for (final TbComparentMas comparentMas : tbComparentMasList) {
            tbcomparentDetList = new ArrayList<TbComparentDet>();
            if (ISCHECKEDNO.equalsIgnoreCase(isChecked) && comLevelSelected <= comparentMas.getComLevel()) {
                comparentMas.setComStatus(ISCHECKEDNO);

                comparentDetList = tbComparentDetService.findComparentDetDataById(comparentMas.getComId(), sessionorg.getOrgid());
                for (TbComparentDet tbcomparentDet : comparentDetList) {
                    tbcomparentDet.setCodStatus(ISCHECKEDNO);
                    tbcomparentDetList.add(tbcomparentDet);
                    if (tbComparentDetList != null && !tbComparentDetList.isEmpty()) {
                        for (TbComparentDet tbcomparentDetTemp : tbComparentDetList) {
                            if (tbcomparentDetTemp.getCodId().longValue() == tbcomparentDet.getCodId().longValue())
                                tbcomparentDetTemp.setCodStatus(tbcomparentDet.getCodStatus());

                        }
                    }
                }
            } else if (comparentMas.getComValue().equalsIgnoreCase(comValue)) {
                comparentMas.setComStatus(ISCHECKEDYES);
            }
            comparentMas.setComparentDetList(tbcomparentDetList);
        }
        model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparentMas);
        model.addAttribute(MAIN_ENTITY_NAME, tbComparentMas);
    }

    @RequestMapping(params = "editComparentMasForm")
    public String getComparentMasForm(final Model model, @RequestParam("rowNo") final Long rowNo) {

        rowNumber = rowNo.intValue();
        TbComparentMas tbComparentMas = null;
        final int length = tbComparentMasList.size();

        for (int counter = 0; counter < length; counter++) {
            if (rowNumber == counter) {
                tbComparentMas = tbComparentMasList.get(counter);
                comLevel = tbComparentMas.getComLevel();
                if (tbComparentMas.getComId() != null) {
                    tbComparentMas = tbComparentMasService.findById(tbComparentMas.getComId());
                }
                break;
            }
        }

        formModes = MainetConstants.CommonConstants.EDIT;

        model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparentMas);
        model.addAttribute(MainetConstants.ComparamMasterConstants.CHILDFORMMODE, MainetConstants.CommonConstants.EDIT);
        model.addAttribute(MAIN_ENTITY_NAME, tbComparentMas);

        return JSP_CHILD_COMPARENTMAS_FORM;

    }

    @RequestMapping(params = "editComparentDetForm")
    public String getComparentDetForm(final Model model, @RequestParam("rowNo") final Long rowNo) {

        rowNumber = rowNo.intValue();
        TbComparentDet tbComparentDet = null;

        final int detLength = tbComparentDetList.size();
        for (int iCounter = 0; iCounter < detLength; iCounter++) {
            if (rowNumber == iCounter) {
                tbComparentDet = tbComparentDetList.get(iCounter);
                break;
            }
        }

        formModes = MainetConstants.CommonConstants.EDIT;

        model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
        model.addAttribute(MainetConstants.CommonConstants.COMMAND, tbComparentDet);
        model.addAttribute(MainetConstants.CommonConstants.LEVEL, level);
        model.addAttribute(MainetConstants.ComparamMasterConstants.CHILDFORMMODE, MainetConstants.CommonConstants.EDIT);
        model.addAttribute(MAIN_ENTITY_NAME, tbComparentDet);

        return JSP_CHILD_COMPARENTDET_FORM;

    }

    @RequestMapping(params = "validatePrefix")
    public @ResponseBody int validatePrefix(final Model model, @RequestParam("prefixData") final String prefixData) {
        final int isValid = tbComparamMasService.validatePrefix(prefixData);
        return isValid;
    }

    @RequestMapping(params = "searchPrefixData", method = RequestMethod.POST)
    public @ResponseBody List<Long> searchPrefixData(final Model model, @RequestParam("department") final String department,
            @RequestParam("cpmPrefix") final String cpmPrefix) {
        final String prefix = cpmPrefix.toUpperCase();
        final List<Long> errorCount = new ArrayList<>();

        final Long orgId = UserSession.getCurrent().getOrganisation().getOrgid();
        if (!department.isEmpty() || !cpmPrefix.isEmpty()) {
            listData = tbComparamMasService.findAllByDepartment(department, prefix);

            for (final TbComparamMas comparamMas : listData) {
                if (!StringUtils.isEmpty(comparamMas.getCpmType()) && HIERARCHICAL_CODE_H.equals(comparamMas.getCpmType())) {
                    comparamMas.setCpmTypeValue(HIERARCHICAL_VALUE_H);
                } else if (StringUtils.isEmpty(comparamMas.getCpmType())
                        || NON_HIERARCHICAL_CODE_N.equals(comparamMas.getCpmType())) {
                    comparamMas.setCpmTypeValue(NON_HIERARCHICAL_VALUE_N);
                }
            }

            if (listData.size() > 1) {
                errorCount.add(Long.valueOf(1));
            } else if (listData.size() == 1) {
                for (final TbComparamMas comparamMas : listData) {
                    final Department dept = tbDepartmentService.findDepartmentByCode(comparamMas.getCpmModuleName());
                    if (dept != null) {
                        if ((dept.getDpCheck() == null) || dept.getDpCheck().isEmpty()) {
                            errorCount.add(Long.valueOf(2)); // validation for Actual department check
                        }
                        if (!dept.getStatus().equals(MainetConstants.Common_Constant.ACTIVE_FLAG)) {
                            errorCount.add(Long.valueOf(3)); // validation for active department check
                        }
                        if (tbDeporgMapService.findByOrgIdDeptId(orgId, dept.getDpDeptid()) == null) {
                            errorCount.add(Long.valueOf(4)); // validation for map dept with organisation
                        }
                    }
                }
            } else {
                errorCount.add(Long.valueOf(0));
            }

            if (errorCount.size() > 0) {
                if (errorCount.get(0) != 1) {
                    listData.clear();
                }
            }
        } else {
            listData = tbComparamMasService.findAll();
        }

        return errorCount;
    }

    @RequestMapping(params = "getPrefixDataByPrefix")
    public @ResponseBody TbComparamMas getPrefixDataByPrefix(@RequestParam("cpmPrefix") final String cpmPrefix) {

        final TbComparamMas tbcomparamMas = tbComparamMasService.findComparamDetDataByCpmId(cpmPrefix);
        return tbcomparamMas;

    }

    @RequestMapping(params = "printPrefixDataByDept")
    public String printPrefixDataByPrefix(final Model model,@RequestParam("departmentShortCode") final String departmentShortCode) {

    	
    	List<TbComparamMas> allprefixByDepartment = tbComparamMasService.findAllByDepartment(departmentShortCode,null);
    
    	model.addAttribute("prefixList",allprefixByDepartment);
    	 
    	return JSP_PRINT;

    }
    
    
    private void updatePrefixCache(String prefixType) {
        ApplicationSession appSession = ApplicationSession.getInstance();
        appSession.updatePrefixCache(prefixType);
    }
}
