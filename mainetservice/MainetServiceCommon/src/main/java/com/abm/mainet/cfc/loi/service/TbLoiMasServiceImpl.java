/*
 * Created on 5 Apr 2016 ( Time 11:43:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.cfc.loi.service;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.ClassUtils;
import org.springframework.util.ReflectionUtils;

import com.abm.mainet.cfc.challan.dao.IChallanDAO;
import com.abm.mainet.cfc.loi.dao.ILoiMasterPaymentDAO;
import com.abm.mainet.cfc.loi.domain.TbLoiMasEntity;
import com.abm.mainet.cfc.loi.domain.TbLoiMasEntityKey;
import com.abm.mainet.cfc.loi.dto.LoiPaymentSearchDTO;
import com.abm.mainet.cfc.loi.dto.LoiPrintDTO;
import com.abm.mainet.cfc.loi.dto.TbLoiDet;
import com.abm.mainet.cfc.loi.dto.TbLoiMas;
import com.abm.mainet.cfc.loi.mapper.TbLoiMasServiceMapper;
import com.abm.mainet.cfc.loi.repository.TbLoiMasJpaRepository;
import com.abm.mainet.cfc.scrutiny.dto.ScrutinyLableValueDTO;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.domain.Employee;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.domain.TbTaxDetMasEntity;
import com.abm.mainet.common.domain.TbTaxMasEntity;
import com.abm.mainet.common.dto.CommonChallanDTO;
import com.abm.mainet.common.exception.FrameworkException;
import com.abm.mainet.common.master.service.TbTaxMasService;
import com.abm.mainet.common.service.AbstractService;
import com.abm.mainet.common.service.ServiceMasterService;
import com.abm.mainet.common.utility.ApplicationContextProvider;
import com.abm.mainet.common.utility.ApplicationSession;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.SeqGenFunctionUtility;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.workflow.dao.IWorkflowTypeDAO;
import com.abm.mainet.common.workflow.dto.UserTaskDTO;
import com.abm.mainet.common.workflow.dto.WorkflowProcessParameter;
import com.abm.mainet.common.workflow.dto.WorkflowTaskAction;
import com.abm.mainet.common.workflow.repository.WorkflowMappingRepository;
import com.abm.mainet.common.workflow.service.ITaskService;
import com.abm.mainet.common.workflow.service.IWorkflowExecutionService;
import com.google.common.util.concurrent.AtomicDouble;

/**
 * Implementation of TbLoiMasService
 */
@Service
public class TbLoiMasServiceImpl extends AbstractService implements TbLoiMasService {

	private static final Logger LOGGER = Logger.getLogger(TbLoiMasServiceImpl.class);

	@Resource
	private TbLoiMasJpaRepository tbLoiMasJpaRepository;

	@Resource
	private TbLoiMasServiceMapper tbLoiMasServiceMapper;

	@Autowired
	private IChallanDAO challanDAO;

	@Autowired
	private TbLoiDetService iTbLoiDetService;

	@Autowired
	private ILoiMasterPaymentDAO iLoiMasterPaymentDAO;

	@Resource
	private ITaskService taskService;

	@Resource
	private SeqGenFunctionUtility seqGenFunctionUtility;

	@Resource
	private IWorkflowExecutionService workflowExecutionService;

	@Autowired
	private ServiceMasterService serviceMasterService;

	@Autowired
	private MessageSource messageSource;

	@Autowired
	private WorkflowMappingRepository workflowMappingRepository;

	@Autowired
	private IWorkflowTypeDAO iWorkflowTypeDAO;

	@Autowired
	private TbTaxMasService tbTaxMasService;

	@Override
	public TbLoiMas findById(final Long loiId, final Long orgid) {
		final TbLoiMasEntityKey id = new TbLoiMasEntityKey(loiId, orgid);
		final TbLoiMasEntity tbLoiMasEntity = tbLoiMasJpaRepository.findOne(id);
		return tbLoiMasServiceMapper.mapTbLoiMasEntityToTbLoiMas(tbLoiMasEntity);
	}

	@Override
	public List<TbLoiMas> findAll() {
		final Iterable<TbLoiMasEntity> entities = tbLoiMasJpaRepository.findAll();
		final List<TbLoiMas> beans = new ArrayList<>();
		for (final TbLoiMasEntity tbLoiMasEntity : entities) {
			beans.add(tbLoiMasServiceMapper.mapTbLoiMasEntityToTbLoiMas(tbLoiMasEntity));
		}
		return beans;
	}

	@Override
	public TbLoiMas save(final TbLoiMas tbLoiMas) {
		return update(tbLoiMas);
	}

	@Override
	@Transactional
	public TbLoiMas create(final TbLoiMas tbLoiMas) {
		final TbLoiMasEntityKey id = new TbLoiMasEntityKey(tbLoiMas.getLoiId(), tbLoiMas.getOrgid());
		TbLoiMasEntity tbLoiMasEntity = tbLoiMasJpaRepository.findOne(id);
		if (tbLoiMasEntity != null) {
			throw new IllegalStateException("already.exists");
		}
		tbLoiMasEntity = new TbLoiMasEntity();
		tbLoiMasServiceMapper.mapTbLoiMasToTbLoiMasEntity(tbLoiMas, tbLoiMasEntity);
		final TbLoiMasEntity tbLoiMasEntitySaved = tbLoiMasJpaRepository.save(tbLoiMasEntity);
		return tbLoiMasServiceMapper.mapTbLoiMasEntityToTbLoiMas(tbLoiMasEntitySaved);
	}

	@Override
	public TbLoiMas update(final TbLoiMas tbLoiMas) {
		final TbLoiMasEntityKey id = new TbLoiMasEntityKey(tbLoiMas.getLoiId(), tbLoiMas.getOrgid());
		final TbLoiMasEntity tbLoiMasEntity = tbLoiMasJpaRepository.findOne(id);
		tbLoiMasServiceMapper.mapTbLoiMasToTbLoiMasEntity(tbLoiMas, tbLoiMasEntity);
		final TbLoiMasEntity tbLoiMasEntitySaved = tbLoiMasJpaRepository.save(tbLoiMasEntity);
		return tbLoiMasServiceMapper.mapTbLoiMasEntityToTbLoiMas(tbLoiMasEntitySaved);
	}

	@Override
	public void delete(final Long loiId, final Long orgid) {
		final TbLoiMasEntityKey id = new TbLoiMasEntityKey(loiId, orgid);
		tbLoiMasJpaRepository.delete(id);
	}

	public TbLoiMasJpaRepository getTbLoiMasJpaRepository() {
		return tbLoiMasJpaRepository;
	}

	public void setTbLoiMasJpaRepository(final TbLoiMasJpaRepository tbLoiMasJpaRepository) {
		this.tbLoiMasJpaRepository = tbLoiMasJpaRepository;
	}

	public TbLoiMasServiceMapper getTbLoiMasServiceMapper() {
		return tbLoiMasServiceMapper;
	}

	public void setTbLoiMasServiceMapper(final TbLoiMasServiceMapper tbLoiMasServiceMapper) {
		this.tbLoiMasServiceMapper = tbLoiMasServiceMapper;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.loi.service.TbLoiMasService#saveLoiDetails(com.abm.
	 * mainetservice.web.loi.bean.TbLoiMas, java.util.List)
	 */
	@Override
	@Transactional
	public boolean saveLoiDetails(final TbLoiMas entity, final List<TbLoiDet> loiDetails,
			final ScrutinyLableValueDTO labelDTO) {
		final Long primaryKeyMas = seqGenFunctionUtility.generateSequenceNo(MainetConstants.DEPT_SHORT_NAME.CFC_CENTER,
				MainetConstants.LOI.TB_LOI_MAS, MainetConstants.LOI.LOI_ID, entity.getOrgid(), null, null);

		final Long loiNoSeq = seqGenFunctionUtility.generateSequenceNo(MainetConstants.DEPT_SHORT_NAME.CFC_CENTER,
				MainetConstants.LOI.TB_LOI_MAS, MainetConstants.LOI.LOI_NO, entity.getOrgid(),
				MainetConstants.RECEIPT_MASTER.Reset_Type, null);

		final SimpleDateFormat sdf1 = new SimpleDateFormat(MainetConstants.YEAR_FORMAT1);
		final String startYear = sdf1.format(UserSession.getCurrent().getFinStartDate());

		final SimpleDateFormat sdf2 = new SimpleDateFormat(MainetConstants.YEAR_FORMAT1);
		final String endYear = sdf2.format(UserSession.getCurrent().getFinEndDate());

		final String loino = String.format(MainetConstants.LOI.LOI_NO_FORMAT, loiNoSeq);
		final String LOINumber = startYear + endYear + loino;
		entity.setLoiNo(LOINumber);
		entity.setLoiId(primaryKeyMas);
		final TbLoiMas loiMas = create(entity);
		for (final TbLoiDet loidet : loiDetails) {
			final Long primaryKeyDet = seqGenFunctionUtility.generateSequenceNo(
					MainetConstants.DEPT_SHORT_NAME.CFC_CENTER, MainetConstants.LOI.TB_LOI_DET,
					MainetConstants.LOI.LOI_DET_ID, entity.getOrgid(), null, null);
			loidet.setLoiDetId(primaryKeyDet);
			loidet.setLoiMasId(loiMas.getLoiId());
			iTbLoiDetService.create(loidet);
		}
		if (labelDTO != null) {
			saveScrutinyValue(labelDTO);
		}
		return true;
	}

	@Override
	@Transactional
	public String saveLOIMaster(final Map<Long, Double> loiCharges, final ScrutinyLableValueDTO labelDTO,
			final Organisation org, final Employee emp, TbLoiMas entity) {
		final List<TbLoiDet> loiDetails = new ArrayList<>(0);
		AtomicDouble totAmount = new AtomicDouble(0);
		if (loiCharges != null) {
			final Long payType = CommonMasterUtility
					.getValueFromPrefixLookUp(MainetConstants.FlagC, PrefixConstants.LookUpPrefix.LPT, org)
					.getLookUpId();
			loiCharges.forEach((key, value) -> {
				TbLoiDet loiDet = new TbLoiDet();
				if (value != null && value > 0) {
					loiDet.setLoiAmount(BigDecimal.valueOf(value));
					totAmount.addAndGet(value);
				}
				loiDet.setLoiChrgid(key);
				loiDet.setLgIpMac(emp.getEmppiservername());
				loiDet.setOrgid(org.getOrgid());
				loiDet.setUserId(emp.getEmpId());
				loiDet.setLmoddate(new Date());
				loiDet.setLoiCharge(MainetConstants.Common_Constant.YES);
				loiDet.setLoiPaytype(payType);
				loiDetails.add(loiDet);

			});
		}
		entity.setLgIpMac(emp.getEmppiservername());
		entity.setOrgid(org.getOrgid());
		entity.setUserId(emp.getEmpId());
		entity.setLoiDate(new Date());
		entity.setLmoddate(new Date());
		entity.setLoiPaid(MainetConstants.Common_Constant.NO);
		entity.setLoiStatus(MainetConstants.FlagA);
		final Calendar calendar = Calendar.getInstance();
		entity.setLoiYear(calendar.get(Calendar.YEAR));
		entity.setLoiRefId(entity.getLoiApplicationId());
		entity.setLoiAmount(BigDecimal.valueOf(totAmount.doubleValue()));

		final Long primaryKeyMas = seqGenFunctionUtility.generateSequenceNo(MainetConstants.DEPT_SHORT_NAME.CFC_CENTER,
				MainetConstants.LOI.TB_LOI_MAS, MainetConstants.LOI.LOI_ID, entity.getOrgid(), null, null);

		final Long loiNoSeq = seqGenFunctionUtility.generateSequenceNo(MainetConstants.DEPT_SHORT_NAME.CFC_CENTER,
				MainetConstants.LOI.TB_LOI_MAS, MainetConstants.LOI.LOI_NO, entity.getOrgid(),
				MainetConstants.RECEIPT_MASTER.Reset_Type, null);

		final SimpleDateFormat sdf1 = new SimpleDateFormat(MainetConstants.YEAR_FORMAT1);
		final String startYear = sdf1.format(UserSession.getCurrent().getFinStartDate());

		final SimpleDateFormat sdf2 = new SimpleDateFormat(MainetConstants.YEAR_FORMAT1);
		final String endYear = sdf2.format(UserSession.getCurrent().getFinEndDate());

		final String loino = String.format(MainetConstants.LOI.LOI_NO_FORMAT, loiNoSeq);
		final String lOINumber = startYear + endYear + loino;
		entity.setLoiNo(lOINumber);
		entity.setLoiId(primaryKeyMas);
		final TbLoiMas loiMas = create(entity);
		for (final TbLoiDet loidet : loiDetails) {
			final Long primaryKeyDet = seqGenFunctionUtility.generateSequenceNo(
					MainetConstants.DEPT_SHORT_NAME.CFC_CENTER, MainetConstants.LOI.TB_LOI_DET,
					MainetConstants.LOI.LOI_DET_ID, entity.getOrgid(), null, null);
			loidet.setLoiDetId(primaryKeyDet);
			loidet.setLoiMasId(loiMas.getLoiId());
			iTbLoiDetService.create(loidet);
		}
		if (labelDTO != null) {
			saveScrutinyValue(labelDTO);
		}
		return lOINumber;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.loi.service.TbLoiMasService#getChargeDescByChgId(
	 * java.util.List)
	 */
	@Override
	@Transactional(readOnly = true)
	public Map<Long, String> getChargeDescByChgId(final List<Long> ids, final long orgId, String loiFoundFlag) {
		final List<TbTaxMasEntity> chargeData = challanDAO.getChargeDescByChgId(ids, orgId);

		final Map<Long, String> desc = new LinkedHashMap<Long, String>();
		Organisation org = new Organisation();

		org.setOrgid(orgId);
		if ((chargeData != null) && !chargeData.isEmpty()) {
			for (final TbTaxMasEntity data : chargeData) {
				// 127603
               //D#136539
				String loiEditableFlag = MainetConstants.FlagN;
				String taxDesc = tbTaxMasService.findTaxDescRegByTaxIdAndOrgId(data.getTaxId(), orgId);
				if (StringUtils.isNotBlank(loiFoundFlag) && (CollectionUtils.isNotEmpty(data.getListOfTbTaxDetMas())
						&& StringUtils.isNotBlank(loiFoundFlag)
						&& StringUtils.equals(loiFoundFlag, MainetConstants.FlagN))) {
					for (TbTaxDetMasEntity tbTaxMasEntity : data.getListOfTbTaxDetMas()) {
						LookUp EditableLoiLookUp = CommonMasterUtility
								.getNonHierarchicalLookUpObject(tbTaxMasEntity.getTdDependFact(), org);
						if (EditableLoiLookUp != null && StringUtils.equals(EditableLoiLookUp.getLookUpCode(),
								PrefixConstants.LookUpPrefix.ELC)) {
							loiEditableFlag = MainetConstants.FlagY;
						}
					}

					// #127603
					// Defect #117792
					if (StringUtils.isNotEmpty(taxDesc)
							&& UserSession.getCurrent().getLanguageId() == MainetConstants.REGIONAL_LANGUAGE_ID) {
						desc.put(data.getTaxId(), taxDesc.concat("-").concat(loiEditableFlag));

					} else {
						desc.put(data.getTaxId(), data.getTaxDesc().concat("-").concat(loiEditableFlag));
					}

				} else {
					// Defect #117792
					if (StringUtils.isNotEmpty(taxDesc)
							&& UserSession.getCurrent().getLanguageId() == MainetConstants.REGIONAL_LANGUAGE_ID) {

						desc.put(data.getTaxId(), taxDesc);
					} else {
						desc.put(data.getTaxId(), data.getTaxDesc());
					}
				}
			}
		}
		return desc;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.abm.mainetservice.web.loi.service.TbLoiMasService#
	 * findLoiMasBySearchCriteria(com.abm.mainetservice.web.loi.bean.
	 * LoiPaymentSearchDTO)
	 */
	@Override
	@Transactional(readOnly = true)
	public TbLoiMas findLoiMasBySearchCriteria(final LoiPaymentSearchDTO searchDto, final String status) {
		final TbLoiMasEntity tbLoiMasEntity = iLoiMasterPaymentDAO.findLoiMasBySearchDTO(searchDto, status);
		return tbLoiMasServiceMapper.mapTbLoiMasEntityToTbLoiMas(tbLoiMasEntity);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.loi.service.TbLoiMasService#updateLoiMaster(com.abm
	 * .mainetservice.web.loi.bean.TbLoiMas)
	 */
	@Override
	@Transactional
	public void updateLoiMaster(final TbLoiMas requestDTO) {
		iLoiMasterPaymentDAO.updateLoiMaster(requestDTO.getLoiId(), requestDTO.getOrgid());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.loi.service.TbLoiMasService#updateLoiPaidByLoiNo(
	 * java.lang.String, long)
	 */
	@Override
	@Transactional
	public void updateLoiPaidByLoiNo(final String loiNo, final long orgid) {
		iLoiMasterPaymentDAO.updateLoiPaidByLoiNo(loiNo, orgid);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.loi.service.TbLoiMasService#getloiByApplicationId(
	 * java.lang.Long, java.lang.Long, long)
	 */
	@Override
	@Transactional(readOnly = true)
	public List<TbLoiMas> getloiByApplicationId(final Long applicationId, final Long serviceId, final long orgid) {
		final List<TbLoiMasEntity> tbLoiMasEntity = tbLoiMasJpaRepository.findLoiMasBySearchDTO(applicationId,
				serviceId, orgid);
		final List<TbLoiMas> beans = new ArrayList<>();
		for (final TbLoiMasEntity tbLoiMas : tbLoiMasEntity) {
			beans.add(tbLoiMasServiceMapper.mapTbLoiMasEntityToTbLoiMas(tbLoiMas));
		}
		return beans;
	}

	// #121724
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.abm.mainetservice.web.loi.service.TbLoiMasService#getLoiPrintIngData(
	 * long)
	 */
	@Override
	@Transactional(readOnly = true)
	public List<LoiPrintDTO> getLoiPrintIngData(final Long orgid, final Long deptId, final Long serviceId,
			final Long appId, final String loiNo,final String applicantName) {
		String apmFname = null,apmLname = null;
		if(StringUtils.isNotEmpty(applicantName) && applicantName != null) {
		String appName [] = applicantName.split(" ");
	     apmFname	= appName[0];
	     if (appName != null && appName.length>1)
		     apmLname = appName[1];
		}
		final List<LoiPrintDTO> loiMasList = new ArrayList<>();
		final  List<Object[]>  tbLoiMasEntity = iLoiMasterPaymentDAO.getLoiMasData(orgid, deptId, serviceId, appId,loiNo,apmFname,apmLname);
		if (CollectionUtils.isNotEmpty(tbLoiMasEntity)) {
		for (final Object[] list : tbLoiMasEntity) {
			LoiPrintDTO loiMas = new LoiPrintDTO();
			loiMas.setLoiId(Long.valueOf(list[0].toString()));
			loiMas.setLoiNo(list[1].toString());
			loiMas.setLoiDate((Date) list[2]);
			loiMas.setLoiServiceId(Long.valueOf(list[3].toString()));
			loiMas.setLoiApplicationId(Long.valueOf(list[4].toString()));
			loiMas.setLoiRefId(Long.valueOf(list[5].toString()));
			loiMas.setLoiAmt(new BigDecimal(list[6].toString()));
			loiMas.setServiceName(list[7].toString());
			loiMas.setServiceNameMar(list[8].toString());
			if(list[9]!=null && list[10]!=null && list[11]!=null)
			loiMas.setApplicantName(list[9].toString() +" "+ list[10].toString()+" "+list[11].toString());
			else if(list[9] !=null &&  list[11] !=null){
				loiMas.setApplicantName(list[9].toString() +" "+list[11].toString());	
			}else if(list[9] !=null){
				loiMas.setApplicantName(list[9].toString());	
			}
			if(list[12] != null) {
				String appDate = new SimpleDateFormat(MainetConstants.DATE_FORMAT).format(list[12]);
			     loiMas.setApplDate(appDate);
			}
			loiMas.setLoiPaid(MainetConstants.PAYMENT_STATUS.PENDING);
			loiMasList.add(loiMas);
		}
	}
		return loiMasList;
	}

	@Override
	@Transactional(readOnly = true)
	public List<Object[]> getLoiDataByOrgId(final Long orgId) {
		final List<Object[]> loiMasList = tbLoiMasJpaRepository.findLoiDetailsByorgId(orgId);
		return loiMasList;
	}

	@Override
	@Transactional(readOnly = true)
	public TbLoiMas getloiByApplicationIdForDeletion(final Long applicationId, final long orgid) {
		final TbLoiMasEntity tbLoiMasEntity = tbLoiMasJpaRepository.findloiByApplicationIdForDeletion(applicationId,
				orgid);
		return tbLoiMasServiceMapper.mapTbLoiMasEntityToTbLoiMas(tbLoiMasEntity);
	}

	@Override
	@Transactional
	public void deleteLoiData(final LoiPaymentSearchDTO searchData, final long orgId, final Long empId,
			final String deleteRemark) {
		iLoiMasterPaymentDAO.updateLoiMasterStatus(searchData.getLoiMasData().getLoiNo(), orgId, empId, deleteRemark);
		final Long appId = searchData.getLoiMasData().getLoiApplicationId();
		UserTaskDTO task = null;
		try {
			task = taskService.getTask(appId.toString());
		} catch (Exception e) {
			LOGGER.error("Unable to retrive task for RequestNo: " + appId, e);
		} finally {
			if (task == null) {
				LOGGER.warn("Unable to delete LOI ata due to task not found for RequestNo: " + appId);
				return;
			}
		}

		String processName = serviceMasterService.getProcessName(searchData.getServiceId(), orgId);
		if (processName != null) {
			WorkflowProcessParameter workflowdto = new WorkflowProcessParameter();
			WorkflowTaskAction workflowAction = new WorkflowTaskAction();
			workflowAction.setTaskId(task.getTaskId());
			workflowAction.setApplicationId(appId);
			workflowAction.setDateOfAction(new Date());
			workflowAction.setDecision(MainetConstants.WorkFlow.Decision.LOI_DELETED);
			workflowAction.setOrgId(orgId);
			workflowAction.setEmpId(empId);
			workflowAction.setModifiedBy(empId);
			workflowAction.setCreatedBy(empId);
			workflowAction.setCreatedDate(new Date());
			workflowdto.setProcessName(processName);
			try {
				workflowdto.setWorkflowTaskAction(workflowAction);
				workflowExecutionService.updateWorkflow(workflowdto);
			} catch (final Exception e) {
				throw new FrameworkException(
						"Exception in LOI deletion send back for jbpm workflow : " + e.getMessage(), e);
			}
		}
	}

	@Override
	@Transactional(readOnly = true)
	public List<TbLoiMas> getloiByLoiNo(Long serviceId, Long orgid) {
		final List<TbLoiMasEntity> tbLoiMasEntity = tbLoiMasJpaRepository.findLoiMasBySLoiNo(serviceId, orgid);
		final List<TbLoiMas> beans = new ArrayList<>();
		for (final TbLoiMasEntity tbLoiMas : tbLoiMasEntity) {
			beans.add(tbLoiMasServiceMapper.mapTbLoiMasEntityToTbLoiMas(tbLoiMas));
		}
		return beans;
	}

	@Override
	public TbLoiMasEntity findLoiIdbyLoiNumber(String loiNumber, Long orgId) {

		return tbLoiMasJpaRepository.findLoiIdbyLoiNumber(loiNumber, orgId);
	}

	@Override
	@Transactional
	public int inactiveLoi(Long applicationId, Long orgId) {

		return tbLoiMasJpaRepository.inactiveLoi(applicationId, orgId);
	}

	// #102456 By Arun
	@Override
	public CommonChallanDTO getDepartmentWiseLoiData(String serviceShortCode, Long applicationNo, Long orgId) {
		CommonChallanDTO commonChallanDTO = null;
		try {
			Class<?> clazz = null;
			Object dynamicServiceInstance = null;
			String serviceClassName = null;
			serviceClassName = messageSource.getMessage(serviceShortCode, new Object[] {}, StringUtils.EMPTY,
					Locale.ENGLISH);
			clazz = ClassUtils.forName(serviceClassName,
					ApplicationContextProvider.getApplicationContext().getClassLoader());
			final Method method = ReflectionUtils.findMethod(clazz,
					ApplicationSession.getInstance().getMessage("loidet.departmentWiseLoiData"),
					new Class[] { Long.class, Long.class });

			if (method != null) {
				dynamicServiceInstance = ApplicationContextProvider.getApplicationContext()
						.getAutowireCapableBeanFactory().autowire(clazz, 4, false);
				commonChallanDTO = (CommonChallanDTO) ReflectionUtils.invokeMethod(method, dynamicServiceInstance,
						new Object[] { applicationNo, orgId });
			}
		} catch (Exception exception) {
			LOGGER.error("Unable to retrive data for CommonChallanDTO ", exception);
		}
		return commonChallanDTO;
	}

	// Defect #117792
	@Override
	public List<TbLoiMas> getLoiInformation(Long orgId, Long empId, String mobileNo) {
		List<TbLoiMas> dashBoardResDTOs = new ArrayList<>();
		final List<Object[]> appList = iLoiMasterPaymentDAO.findLoiInformation(orgId, mobileNo, empId);

		appList.forEach(app -> {
			TbLoiMas application = new TbLoiMas();
			application.setLoiApplicationId(Long.valueOf(app[0].toString()));
			application.setServiceName(app[1].toString());
			application.setServiceNameMar(app[2].toString());
			application.setSmShortCode(app[3].toString());
			application.setLoiNo(app[4].toString());
			application.setLoiRefId(Long.valueOf(app[5].toString()));
			application.setLoiAmount(new BigDecimal(app[6].toString()));
			if (app[7].toString().equals(MainetConstants.FlagN)) {
				application.setLoiPaid(MainetConstants.WorkFlow.Status.PENDING);
			} else {
				application.setLoiPaid(MainetConstants.WorkFlow.Status.COMPLETED);
			}
			application.setLoiServiceId(Long.valueOf(app[8].toString()));
			application.setLoiDate((Date) app[9]);
			application.setOrgid(Long.valueOf(app[10].toString()));
			Long taskId = iWorkflowTypeDAO.getTaskIdByAppIdAndOrgId(Long.valueOf(app[0].toString()), orgId);
			if (taskId != null) {
				application.setTaskId(taskId);
				dashBoardResDTOs.add(application);
			}
		});
		return dashBoardResDTOs;
	}

	public List<String> getLicNumber(Long applicationId) {
		List<String> commonChallanDTO = new ArrayList<String>();
		try {
			Class<?> clazz = null;
			Object dynamicServiceInstance = null;
			String serviceClassName = null;
			serviceClassName = "com.abm.mainet.tradeLicense.service.ChangeBusinessNameServiceImpl";
			clazz = ClassUtils.forName(serviceClassName,
					ApplicationContextProvider.getApplicationContext().getClassLoader());
			final Method method = ReflectionUtils.findMethod(clazz, "getTradLoicNumber", new Class[] { Long.class });

			if (method != null) {
				dynamicServiceInstance = ApplicationContextProvider.getApplicationContext()
						.getAutowireCapableBeanFactory().autowire(clazz, 4, false);
				commonChallanDTO = (List<String>) ReflectionUtils.invokeMethod(method, dynamicServiceInstance,
						new Object[] { applicationId });
			}
		} catch (Exception exception) {
			LOGGER.error("Unable to retrive data for CommonChallanDTO ", exception);
		}
		return commonChallanDTO;
	}

	@Override
	@Transactional(readOnly=true)
	public TbLoiMas findloiByApplicationIdAndOrgId(Long appNo, Long orgId) {
		TbLoiMasEntity entity = tbLoiMasJpaRepository.findloiByApplicationIdAndOrgId(appNo, orgId);
		return tbLoiMasServiceMapper.mapTbLoiMasEntityToTbLoiMas(entity);
		 
	}

	@Override
	@Transactional(readOnly=true)
	public TbLoiMas findLoibyLoiNumber(String loiNumber, Long orgId) {
		TbLoiMasEntity entity = tbLoiMasJpaRepository.findLoiIdbyLoiNumber(loiNumber, orgId);
		return tbLoiMasServiceMapper.mapTbLoiMasEntityToTbLoiMas(entity);
	}

}
