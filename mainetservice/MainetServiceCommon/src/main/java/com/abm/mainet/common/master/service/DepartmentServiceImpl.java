/*
 * Created on 9 Dec 2015 ( Time 11:08:57 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.service;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.dao.IDepartmentDAO;
import com.abm.mainet.common.dao.IDepartmentOrganisationMappingDAO;
import com.abm.mainet.common.domain.Department;
import com.abm.mainet.common.domain.DeptOrgMap;
import com.abm.mainet.common.domain.LocationMasEntity;
import com.abm.mainet.common.master.dto.DepartmentDTO;
import com.abm.mainet.common.master.dto.TbDepartment;
import com.abm.mainet.common.master.mapper.DepartmentServiceMapper;
import com.abm.mainet.common.master.mapper.TbDepartmentServiceMapper;
import com.abm.mainet.common.master.repository.DepartmentJpaRepository;
import com.abm.mainet.common.master.repository.LocationMasJpaRepository;
import com.abm.mainet.common.master.repository.TbDepartmentJpaRepository;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;

/**
 * Implementation of DepartmentService
 */
@Component
@Transactional
public class DepartmentServiceImpl implements DepartmentService {

    @Resource
    private DepartmentJpaRepository departmentJpaRepository;

    @Resource
    private LocationMasJpaRepository locationMasJpaRepository;

    @Resource
    private DepartmentServiceMapper departmentServiceMapper;

    @Autowired
    private IDepartmentDAO departmentDAO;

    @Autowired
    private IDepartmentOrganisationMappingDAO mappingDAO;

    @Resource
    private TbDepartmentServiceMapper tbDepartmentServiceMapper;

    @Resource
    private TbDepartmentJpaRepository tbDepartmentJpaRepository;

    @Override
    public DepartmentDTO findById(final Long depid) {
        final LocationMasEntity departmentEntity = locationMasJpaRepository.findOne(depid);
        return departmentServiceMapper.mapDepartmentEntityToDepartment(departmentEntity);
    }

    @Override
    public List<DepartmentDTO> findAll() {
        final Iterable<LocationMasEntity> entities = locationMasJpaRepository.findAll();
        final List<DepartmentDTO> beans = new ArrayList<>();
        for (final LocationMasEntity departmentEntity : entities) {
            beans.add(departmentServiceMapper.mapDepartmentEntityToDepartment(departmentEntity));
        }
        return beans;
    }

    @Override
    public DepartmentDTO save(final DepartmentDTO department) {
        return update(department);
    }

    @Override
    public DepartmentDTO create(final DepartmentDTO department) {
        LocationMasEntity departmentEntity = locationMasJpaRepository.findOne(department.getDepid());
        if (departmentEntity != null) {
            throw new IllegalStateException("already.exists");
        }
        departmentEntity = new LocationMasEntity();
        departmentServiceMapper.mapDepartmentToDepartmentEntity(department, departmentEntity);
        final LocationMasEntity departmentEntitySaved = locationMasJpaRepository.save(departmentEntity);
        return departmentServiceMapper.mapDepartmentEntityToDepartment(departmentEntitySaved);
    }

    @Override
    public DepartmentDTO update(final DepartmentDTO department) {
        final LocationMasEntity departmentEntity = locationMasJpaRepository.findOne(department.getDepid());
        departmentServiceMapper.mapDepartmentToDepartmentEntity(department, departmentEntity);
        final LocationMasEntity departmentEntitySaved = locationMasJpaRepository.save(departmentEntity);
        return departmentServiceMapper.mapDepartmentEntityToDepartment(departmentEntitySaved);
    }

    @Override
    public void delete(final Long depid) {
        departmentJpaRepository.delete(depid);
    }

    public DepartmentJpaRepository getDepartmentJpaRepository() {
        return departmentJpaRepository;
    }

    public void setDepartmentJpaRepository(final DepartmentJpaRepository departmentJpaRepository) {
        this.departmentJpaRepository = departmentJpaRepository;
    }

    public DepartmentServiceMapper getDepartmentServiceMapper() {
        return departmentServiceMapper;
    }

    public void setDepartmentServiceMapper(final DepartmentServiceMapper departmentServiceMapper) {
        this.departmentServiceMapper = departmentServiceMapper;
    }

    @Override
    public List<Object[]> getAllDeptTypeNames() {
        final List<Object[]> entities = departmentJpaRepository.getAllDeptTypeNames();
        return entities;
    }

    @Override
    @Transactional
    public List<Department> getDepartments(long orgId, final String activeStatus) {
        return tbDepartmentJpaRepository.findAllMappedDepartments(orgId);
    }

    @Override
    @Transactional
    public List<Department> getDepartments(final String activeStatus) {
        return departmentDAO.getAllDepartment(activeStatus);
    }

    @Override
    @Transactional
    public List<DeptOrgMap> getMappingWithOragnisation(final String activeStatus) {
        return mappingDAO.getaMapping(activeStatus);
    }

    @Override
    @Transactional(readOnly=true)
    public Department getDepartment(final String dpDeptcode, final String status) {
        return departmentDAO.getDepartment(dpDeptcode, status);
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.common.service.IDepartmentService# getDepartmentIdByDeptCode(java.lang.String,
     * java.lang.String)
     */
    @Override
    @Transactional(readOnly = true)
    public Long getDepartmentIdByDeptCode(final String dpDeptcode, final String status) {
        return departmentDAO.getDepartmentIdByDeptCode(dpDeptcode, status);
    }

    @Transactional(readOnly=true)
    @Override
    public TbDepartment findDeptByCode(final Long orgId, final String status, final String code) {
        final Department department = tbDepartmentJpaRepository.findDeptByCode(orgId, status, code);
        final TbDepartment tbDepartment = new TbDepartment();
        BeanUtils.copyProperties(department, tbDepartment);
        return tbDepartment;
    }

    /*
     * (non-Javadoc)
     * @see com.abm.mainetservice.web.common.service.IDepartmentService# getDepartmentLookUps(java.lang.String)
     */
    @Transactional(readOnly=true)
    @Override
    public List<LookUp> getDepartmentLookUpsByAsc(final String status) {

        final String deptActualFlag = "Y";
        final List<Department> list = departmentDAO.getAllDepartmentWithDpCheck(status, deptActualFlag);
        if ((list == null) || list.isEmpty()) {
            throw new IllegalArgumentException(
                    "No record found from Department for status & deptActualFlag =" + status + "and" + deptActualFlag);
        }
        final List<LookUp> lookUps = new ArrayList<>();
        for (final Department department : list) {
            final LookUp lookUp = new LookUp();
            lookUp.setLookUpId(department.getDpDeptid());
            lookUp.setLookUpCode(department.getDpDeptcode());
            lookUp.setDescLangFirst(department.getDpDeptdesc());
            lookUp.setDescLangSecond(department.getDpNameMar());
            lookUps.add(lookUp);
        }

        return lookUps;
    }

    @Override
    public String getDeptCode(final Long dpDeptid) {

        final String DeptMasterCode = departmentJpaRepository.getDeptCode(dpDeptid);

        return DeptMasterCode;

    }

    @Override
    public Long getDepartmentIdByDeptCode(String deptCode) {
        return departmentJpaRepository.getDepartmentIdByDeptCode(deptCode);
    }

    @Override
    @Transactional
    public String fetchDepartmentDescById(final Long deptId) {
         String deptDesc = MainetConstants.BLANK;
        	if(UserSession.getCurrent().getLanguageId() == MainetConstants.REGIONAL_LANGUAGE_ID) {
        		deptDesc = tbDepartmentJpaRepository.fetchDepartmentDescRegById(deptId);
        	}else {
        		deptDesc = tbDepartmentJpaRepository.fetchDepartmentDescById(deptId);	
        	}
        return deptDesc;
    }

    @Override
    public String getDepartmentDescByDeptCode(String deptCode) {
        return departmentJpaRepository.getDepartmentDescByDeptCode(deptCode);
    }
    
    @Override
    @Transactional
    public String fetchDepartmentDescEngById(final Long deptId,int langId) {
    	String deptDesc = MainetConstants.BLANK;
    	if(langId == MainetConstants.REGIONAL_LANGUAGE_ID) {
    		deptDesc = tbDepartmentJpaRepository.fetchDepartmentDescRegById(deptId);
    	}else {
    		deptDesc = tbDepartmentJpaRepository.fetchDepartmentDescById(deptId);	
    	}
    return deptDesc;
    }
    
    @Override
	public List<LookUp> getAllDesgBasedOnDept(Long deptId, Long orgId) {
		List<Object[]> list = null;
		List<LookUp> dsglookupList = null;
		list = tbDepartmentJpaRepository.getAllDesgBasedOnDept(deptId,orgId);
		dsglookupList = new ArrayList<>();
		LookUp look = null;
		for (final Object[] oneDesg : list) {
			look = new LookUp();
			look.setLookUpId(Long.parseLong(oneDesg[0].toString()));
			if (oneDesg[1] != null) {
				look.setDescLangFirst(oneDesg[1].toString());
			}
			if (oneDesg[2] != null) {
				look.setDescLangSecond(oneDesg[2].toString());
			}
			dsglookupList.add(look);
		}
		return dsglookupList;
	}
    
    @Override
    @Transactional
    public List<LookUp> finDeptListForLoc(Long locId) {
    	
    	List<Object[]> list = null;
		List<LookUp> dsglookupList = null;
		list =tbDepartmentJpaRepository.finDeptListForLoc(locId);
		dsglookupList = new ArrayList<>();
		LookUp look = null;
		for (final Object[] oneDesg : list) {
			look = new LookUp();
			look.setLookUpId(Long.parseLong(oneDesg[0].toString()));
			if (oneDesg[1] != null) {
				look.setDescLangFirst(oneDesg[1].toString());
			}
			if (oneDesg[2] != null) {
				look.setDescLangSecond(oneDesg[2].toString());
			}
			dsglookupList.add(look);
		}
		return dsglookupList;
    	
    }
    
}
