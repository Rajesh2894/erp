/*
 * Created on 2 Jan 2016 ( Time 11:57:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.common.master.service;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.abm.mainet.common.domain.Employee;
import com.abm.mainet.common.domain.FinancialYear;
import com.abm.mainet.common.domain.Organisation;
import com.abm.mainet.common.dto.FinYearDTO;
import com.abm.mainet.common.master.dto.TbFinancialyear;

/** Business Service Interface for entity TbFinancialyear. */
public interface TbFinancialyearService {

    /**
     * Loads an entity from the database using its Primary Key
     *
     * @param faYearid
     * @param
     * @return entity
     */
    TbFinancialyear findYearById(Long faYearid, long orgId);

    /**
     * Updates the given entity in the database
     *
     * @param entity
     * @return
     */
    void update(TbFinancialyear bean, Long mapId, Employee sessionEmp);

    /**
     * Creates the given entity in the database
     *
     * @param entity
     * @return
     */
    void create(TbFinancialyear entity, Long sessionOrgId, Employee sessionEmp) throws Exception;

    List<TbFinancialyear> findAllFinancialYearByOrgId(Organisation organisation);

    /**
     * @param orgid
     * @return
     */
    List<FinancialYear> findAllFinYearByOrgId(long orgid);

    /**
     * @param fromdate
     * @param todate
     * @return
     */
    FinancialYear isFaYearExists(String fromDate);

    public Map<Long, String> getAllFinincialYear();

    public Map<Long, String> getAllFinincialYearByStatusWise(Long orgId);

    /**
     * use this method in order to get financial year description by id
     * @param fyId : pass id
     * @return financial Year description like 2016-2017
     */
    public String findFinancialYearDesc(Long fyId);

    public List<TbFinancialyear> findAll();

    public TbFinancialyear findFinancialYear(Date estdDate);

    public List<TbFinancialyear> getFinanciaYearsFromDate(Date fromDate);

    public List<Long> getCurrentAndPreviousYears();

    public Long checkForPreviousYear(int fromYear, int toYear);

    public Date getValidFInancialYearDate();

    /**
     * @param SLI Prefix Date wise
     * @return Financial Years
     */
    public Map<Long, String> getAllSLIPrefixDateFinincialYear(Date sliDate);

    public int getFinancialYearTotalCount();

    public Date getMinFinancialYear();

    public void create(FinancialYear entity, Long orgId);

    public Long checkHardClosedFinYearDateExists(Date date, Long orgid);

    public List<FinYearDTO> getFinancialYear();

    public FinancialYear getFinanciaYearByDate(Date date);

    List<FinancialYear> findAllFinancialYearById(List<Long> finYearIdList);

    Map<Long, String> getAllFinincialYearStatusOpen(Long orgId);

    public Long checkSoftClosedFinYearDateExists(Date date, Long orgid);

    public List<Object[]> getFromDateAndToDateByFinancialYearId(Long faYearid);

    int getCountOfFinYearBetwDates(Date fromDate, Date toDate, Long orgid);

    Long getFinanciaYearIdByFromDate(Date finYearFromDate);

	List<FinancialYear> findAllFinYear();

}
