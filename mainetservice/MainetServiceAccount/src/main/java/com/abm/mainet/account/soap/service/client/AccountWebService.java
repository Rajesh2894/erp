package com.abm.mainet.account.soap.service.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.14 2018-03-15T13:21:20.090+05:30 Generated source version: 3.1.14
 * 
 */
@WebServiceClient(name = "AccountWebService", wsdlLocation = "file:/E:/product_svn_workspaces/service_for_memoryleaks/MainetServiceWeb/src/main/webapp/wsdl/accountwebservice.wsdl", targetNamespace = "http://service.soap.account.mainet.abm.com/")
public class AccountWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://service.soap.account.mainet.abm.com/", "AccountWebService");
    public final static QName AccountWebServicePort = new QName("http://service.soap.account.mainet.abm.com/",
            "AccountWebServicePort");
    static {
        URL url = null;
        try {
            url = new URL(
                    "file:/E:/product_svn_workspaces/service_for_memoryleaks/MainetServiceWeb/src/main/webapp/wsdl/accountwebservice.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(AccountWebService.class.getName())
                    .log(java.util.logging.Level.INFO,
                            "Can not initialize the default wsdl from {0}",
                            "file:/E:/product_svn_workspaces/service_for_memoryleaks/MainetServiceWeb/src/main/webapp/wsdl/accountwebservice.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public AccountWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AccountWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AccountWebService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public AccountWebService(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public AccountWebService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public AccountWebService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return returns AccountWebServicePortType
     */
    @WebEndpoint(name = "AccountWebServicePort")
    public AccountWebServicePortType getAccountWebServicePort() {
        return super.getPort(AccountWebServicePort, AccountWebServicePortType.class);
    }

    /**
     * 
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in the
     * <code>features</code> parameter will have their default values.
     * @return returns AccountWebServicePortType
     */
    @WebEndpoint(name = "AccountWebServicePort")
    public AccountWebServicePortType getAccountWebServicePort(WebServiceFeature... features) {
        return super.getPort(AccountWebServicePort, AccountWebServicePortType.class, features);
    }

}
