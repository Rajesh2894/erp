/*
 * Created on 30 Apr 2016 ( Time 15:02:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.abm.mainet.workManagement.roadcutting.ui.controller;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.abm.mainet.cfc.loi.dto.TbLoiMas;
import com.abm.mainet.cfc.loi.service.TbLoiMasService;
import com.abm.mainet.common.constant.MainetConstants;
import com.abm.mainet.common.constant.PrefixConstants;
import com.abm.mainet.common.domain.CFCApplicationAddressEntity;
import com.abm.mainet.common.domain.TbCfcApplicationMstEntity;
import com.abm.mainet.common.dto.TbApprejMas;
import com.abm.mainet.common.dto.TbWorkOrder;
import com.abm.mainet.common.dto.TbWorkOrderDetail;
import com.abm.mainet.common.dto.WorkOrderGridEntityList;
import com.abm.mainet.common.dto.WorkOrderGridResponse;
import com.abm.mainet.common.integration.acccount.domain.TbServiceReceiptMasEntity;
import com.abm.mainet.common.master.dto.EmployeeBean;
import com.abm.mainet.common.master.dto.TbServicesMst;
import com.abm.mainet.common.master.service.DepartmentService;
import com.abm.mainet.common.master.service.TbDepartmentService;
import com.abm.mainet.common.master.service.TbServicesMstService;
import com.abm.mainet.common.service.CommonService;
import com.abm.mainet.common.service.ICFCApplicationAddressService;
import com.abm.mainet.common.service.ICFCApplicationMasterService;
import com.abm.mainet.common.service.IEmployeeService;
import com.abm.mainet.common.service.IReceiptEntryService;
import com.abm.mainet.common.service.TbApprejMasService;
import com.abm.mainet.common.service.TbChargeMasterService;
import com.abm.mainet.common.service.TbWorkOrderService;
import com.abm.mainet.common.ui.controller.telosys.AbstractController;
import com.abm.mainet.common.utility.ApplicationContextProvider;
import com.abm.mainet.common.utility.CommonMasterUtility;
import com.abm.mainet.common.utility.LookUp;
import com.abm.mainet.common.utility.UserSession;
import com.abm.mainet.common.utility.Utility;
import com.abm.mainet.workManagement.roadcutting.service.IRoadCuttingService;
import com.abm.mainet.workManagement.roadcutting.ui.dto.RoadCuttingDto;

/**
 * Spring MVC controller for 'TbWorkOrder' management.
 */
@Controller
/* @RequestMapping("/WorkOrder.html") */
@RequestMapping(value = "/RoadCuttingWorkOrderPrinting.html")
public class RoadCuttingWorkOrderController extends AbstractController {

    private static final String MAIN_ENTITY_NAME = "tbWorkOrder";
    private static final String MAIN_LIST_NAME = "list";
    private static final String MAIN_LIST_PRIFEX_WPC = "listpofPrifexWPC";
    private static final String JSP_GRID = "RoadCuttingWorkOrder/grid";
    private static final String WORK_ORDER = "RoadCutting/workorder";

    @Autowired
    private CommonService commonService;

    // --- Main entity service
    @Autowired
    private TbWorkOrderService tbWorkOrderService;

    @Autowired
    private TbServicesMstService tbServicesMstService;

    @Autowired
    private TbDepartmentService tbDepartmentService;

    @Autowired
    private ICFCApplicationMasterService icfcApplicationMasterService;

    @Autowired
    private ICFCApplicationAddressService iCFCApplicationAddressService;

    @Autowired
    private TbChargeMasterService tbChargeMasterService;

    @Autowired
    private TbApprejMasService tbApprejMasServiceImpl;

    @Autowired
    private IRoadCuttingService roadCuttingService;

    @Autowired
    private TbLoiMasService loiService;

    @Autowired
    private IReceiptEntryService receiptEntryService;

    private List<TbServicesMst> serviceMasList = Collections.emptyList();
    private List<TbServicesMst> serviceList = new ArrayList<>();
    private List<WorkOrderGridEntityList> workodergenraitonList = new ArrayList<>();

    // --------------------------------------------------------------------------------------
    /**
     * Default constructor
     */
    public RoadCuttingWorkOrderController() {
        super(RoadCuttingWorkOrderController.class, MAIN_ENTITY_NAME);
        log("RoadCuttingWorkOrderController created.");
    }

    // PRINTING
    @RequestMapping()
    public String list(final Model model) {
        log("Action 'list'");
        final TbWorkOrder tbWorkOrder = new TbWorkOrder();
        final List<TbWorkOrder> list = new ArrayList<>();
        Long deptId = tbDepartmentService.getDepartmentIdByDeptCode(MainetConstants.WorksManagement.WORKS_MANAGEMENT);
        serviceMasList = tbServicesMstService
                .findALlActiveServiceByDeptId(deptId, Long.valueOf(UserSession.getCurrent().getOrganisation().getOrgid()));
        serviceList = new ArrayList<>();
        final List<LookUp> lookUpList = CommonMasterUtility.getListLookup(PrefixConstants.WATERMODULEPREFIX.WPC,
                UserSession.getCurrent().getOrganisation());
        model.addAttribute(MAIN_LIST_PRIFEX_WPC, lookUpList);
        final int LanguageId = UserSession.getCurrent().getLanguageId();
        model.addAttribute("LanguageId", LanguageId);
        model.addAttribute("serviceMasList", serviceMasList);
        model.addAttribute(MAIN_LIST_NAME, list);
        model.addAttribute(MAIN_ENTITY_NAME, tbWorkOrder);
        workodergenraitonList.clear();
        return JSP_GRID;
    }

    // PRINTING
    /**
     * Shows a form page in order to create a new TbWorkOrder
     * @param model Spring MVC model
     * @return
     */
    @RequestMapping(params = "searchServiceMst")
    public @ResponseBody List<WorkOrderGridEntityList> searchServiceMst(final Model model,
            @RequestParam("deptId") final Long deptId, @RequestParam("serviceId") Long serviceId) {
        log("Action 'searchServiceMst'");

        if (serviceId.intValue() == -1) {
            serviceId = null;
        }

        workodergenraitonList = tbWorkOrderService.findWorkOrderPrintList(deptId, serviceId);

        return workodergenraitonList;
    }

    // PRINTING
    @RequestMapping(params = "getGridData")
    public @ResponseBody WorkOrderGridResponse gridData(final HttpServletRequest request, final Model model) {
        log("Action 'Get grid Data'");
        final WorkOrderGridResponse response = new WorkOrderGridResponse();
        final int page = Integer.parseInt(request.getParameter(MainetConstants.CommonConstants.PAGE));
        response.setRows(workodergenraitonList);
        response.setTotal(workodergenraitonList.size());
        response.setRecords(workodergenraitonList.size());
        response.setPage(page);

        model.addAttribute(MAIN_LIST_NAME, serviceList);

        return response;
    }

    // PRINTING
    /**
     * Shows a form page in order to update an existing TbWorkOrder
     * @param model Spring MVC model
     * @param woId primary key element
     * @return
     */
    @RequestMapping(params = "print", method = { RequestMethod.POST })
    public String formForPrint(final Model model, @RequestParam("applicationId") final BigDecimal applicationId) {
        log("Action 'formForUpdate'");
        final List<String> paramList = commonService.findServiceActionUrl(Long.valueOf(applicationId + MainetConstants.BLANK),
                UserSession.getCurrent().getOrganisation().getOrgid());
        final String serviceName = tbServicesMstService
                .getServiceNameByServiceId(Long.valueOf(paramList.get(MainetConstants.INDEX.ONE) + MainetConstants.BLANK));
        final TbCfcApplicationMstEntity tbCfcApplicationMstEntity = icfcApplicationMasterService
                .getCFCApplicationByApplicationId(Long.valueOf(applicationId + MainetConstants.BLANK),
                        UserSession.getCurrent().getOrganisation().getOrgid());
        final CFCApplicationAddressEntity address = iCFCApplicationAddressService.getApplicationAddressByAppId(
                Long.valueOf(applicationId + MainetConstants.BLANK), UserSession.getCurrent().getOrganisation().getOrgid());
        String useraddress = address.getApaFloor() == null ? MainetConstants.BLANK
                : address.getApaFloor() + MainetConstants.operator.COMMA;
        useraddress += address.getApaBldgnm() == null ? MainetConstants.BLANK
                : address.getApaBldgnm() + MainetConstants.operator.COMMA;
        useraddress += address.getApaAreanm() == null ? MainetConstants.BLANK
                : address.getApaAreanm() + MainetConstants.operator.COMMA;
        useraddress += address.getApaHsgCmplxnm() == null ? MainetConstants.BLANK
                : address.getApaHsgCmplxnm() + MainetConstants.operator.COMMA;
        useraddress += address.getApaRoadnm() == null ? MainetConstants.BLANK
                : address.getApaRoadnm() + MainetConstants.operator.COMMA;
        useraddress += address.getApaPincode() == null ? MainetConstants.BLANK
                : address.getApaPincode() + MainetConstants.operator.COMMA;

        final String applicantFullName = tbCfcApplicationMstEntity.getApmFname() + MainetConstants.WHITE_SPACE
                + tbCfcApplicationMstEntity.getApmMname() + MainetConstants.WHITE_SPACE + tbCfcApplicationMstEntity.getApmLname();
        final Date applicationDate = tbCfcApplicationMstEntity.getApmApplicationDate();
        final long applicationid = tbCfcApplicationMstEntity.getApmApplicationId();
        tbCfcApplicationMstEntity.getWorkDefinitionId();
        final Map<String, BigDecimal> chargedescruption = tbChargeMasterService.getChargeDescByChgId(
                Long.valueOf(applicationId + MainetConstants.BLANK), UserSession.getCurrent().getOrganisation().getOrgid());
        BigDecimal chargestotal = new BigDecimal(0);
        ;
        for (final Entry<String, BigDecimal> entry : chargedescruption.entrySet()) {
            chargestotal = chargestotal.add(entry.getValue());
        }

        final List<TbWorkOrderDetail> tbWorkOrderDetail = tbWorkOrderService
                .findByApplicationID(Long.valueOf(applicationId + MainetConstants.BLANK));
        List<TbApprejMas> tbApprejMas = new ArrayList<>();
        final List<Long> artId = new ArrayList<>(0);
        Long woId = null;
        for (final TbWorkOrderDetail tbRejection : tbWorkOrderDetail) {
            woId = tbRejection.getWoId();
            if (tbRejection.getWdRemarkId() != null) {
                artId.add(tbRejection.getWdRemarkId());
            }
        }
        tbApprejMas = tbApprejMasServiceImpl.findByArtId(artId, UserSession.getCurrent().getOrganisation().getOrgid());
        final TbWorkOrder tbWorkOrderWON = tbWorkOrderService.findById(woId);
        model.addAttribute("WorkOrderNumber", tbWorkOrderWON.getWoOrderNo());
        model.addAttribute("PrintReprintFlg", tbWorkOrderWON.getWoPrintFlg());
        model.addAttribute("NewDate", Utility.dateToString(new Date()));
        model.addAttribute("TermsConditon", tbApprejMas);
        model.addAttribute("ApplicationDate", Utility.dateToString(applicationDate, MainetConstants.DATE_HOUR_FORMAT));
        model.addAttribute("ApplicationID", applicationid);
        model.addAttribute("ServiceName", serviceName);
        model.addAttribute("applicantAddress", useraddress);
        model.addAttribute("Chargedescruption", chargedescruption);
        model.addAttribute("chargestotal", chargestotal);// Exponent
        model.addAttribute("ApplicantFullName", applicantFullName);
        model.addAttribute("serviceId", Long.valueOf(paramList.get(MainetConstants.INDEX.ONE)));
        model.addAttribute("logo", UserSession.getCurrent().getOrgLogoPath());

        RoadCuttingDto roadData = roadCuttingService.getRoadCuttingApplicationData(applicationId.longValue(),
                UserSession.getCurrent().getOrganisation().getOrgid());
        List<TbLoiMas> loiMaster = loiService.getloiByApplicationId(applicationId.longValue(),
                Long.valueOf(paramList.get(MainetConstants.INDEX.ONE)), UserSession.getCurrent().getOrganisation().getOrgid());
        String loiNo = loiMaster.get(0).getLoiNo();
        TbServiceReceiptMasEntity receipMas = receiptEntryService.getReceiptNoByLoiNoAndOrgId(loiNo,
                UserSession.getCurrent().getOrganisation().getOrgid());
        
		if (StringUtils.isNotEmpty(roadData.getRcAssignEng())) {
			// Set Asign Engineer
			IEmployeeService employeeService = (IEmployeeService) ApplicationContextProvider.getApplicationContext()
					.getBean("employeeService");
			DepartmentService departmentService = (DepartmentService) ApplicationContextProvider.getApplicationContext()
					.getBean("departmentServiceImpl");
			long deptId = departmentService.getDepartmentIdByDeptCode(MainetConstants.WorksManagement.WORKS_MANAGEMENT);
			List<EmployeeBean> employee = employeeService.getEmployeeData(deptId, null, null,
					UserSession.getCurrent().getOrganisation().getOrgid(),null);
			String assignEng = employee.stream()
					.filter(e -> roadData.getRcAssignEng().contains(String.valueOf(e.getEmpId())))
					.map(e -> e.getFullName()).collect(Collectors.joining(", "));
			model.addAttribute("assignEng", assignEng);
		}
		
        model.addAttribute("loiNo", loiNo);
        model.addAttribute("receiptNo", receipMas.getRmRcptno());
        model.addAttribute("receiptDate", Utility.dateToString(receipMas.getRmDate()));
        model.addAttribute("data", roadData);
      
        return WORK_ORDER;
    }

    /**
     * 'UPDATE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param tbWorkOrder entity to be updated
     * @param bindingResult Spring MVC binding result
     * @param model Spring MVC model
     * @param redirectAttributes Spring MVC redirect attributes
     * @param httpServletRequest
     * @return
     */
    @RequestMapping(params = MainetConstants.Actions.UPDATE, method = RequestMethod.POST) // GET or POST
    public void ForPrintflagupdate(final Model model, @RequestParam("workOrderNo") final String workOrderNo) {
        log("Action 'update'");

        tbWorkOrderService.ForPrintflagupdate(workOrderNo);

    }

    /**
     * 'DELETE' action processing. <br>
     * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
     * @param redirectAttributes
     * @param woId primary key element
     * @return
     */
    @RequestMapping(value = "/delete/{woId}") // GET or POST
    public String delete(final RedirectAttributes redirectAttributes, @PathVariable("woId") final Long woId) {
        log("Action 'delete'");
        try {
            tbWorkOrderService.delete(woId);
        } catch (final Exception e) {
            log("Action 'delete' : Exception - " + e.getMessage());
            messageHelper.addException(redirectAttributes, "tbWorkOrder.error.delete", e);
        }
        return redirectToList();
    }

}
